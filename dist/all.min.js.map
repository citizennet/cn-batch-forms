{"version":3,"sources":["all.min.js","_.cn-batch-forms.module.js","batch-results.js","cn-batch-forms.routes.js","cn-batch-forms.service.js","templates.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","angular","module","BatchResults","$state","parent","$stateParams","activate","console","log","vm","config","idParam","results","forEach","result","i","params","_","assign","originals","id","editSref","current","name","toJson","headerConfig","title","main","actionConfig","actions","text","handler","returnState","go","noData","submit","closeModal","this","models","resultsConfig","displayName","formName","controller","$inject","cnBatchFormsConfig","cnFlexFormServiceProvider","registerField","condition","field","type","TYPE","templateUrl","TEMPLATE_URL","addTemplates","$templateCache","put","run","_typeof","Symbol","iterator","constructor","cnBatchForms","cnFlexFormService","cnFlexFormTypes","sfPath","$rootScope","$timeout","cnModal","augmentSchema","schema","model","length","service","BatchForms","create","addMeta","addToSchema","buildModelDefault","clearDefaults","clearSchemaDefault","createDirtyCheck","processLinks","createBatchField","getChangedModels","getEditModeLegends","getModelValues","getSchemaDefault","getTitleMap","onFieldScope","processCondition","processForm","processField","processItems","processDate","processDefault","processNumber","processSelect","processToggle","setValue","showResults","instance","instances","editModes","fieldRegister","links","forms","form","splice","$on","bind","event","scope","_key","ngModel","$pristine","children","arguments","undefined","child","show","batchConfig","htmlClass","batchField","dirtyCheck","items","replace","getSchema","properties","fieldType","getFieldType","fieldTypeHandlers","isObject","ogValues","allEqual","first","parseExpression","set","clone","uniqueId","watch","item","push","resolution","_this","map","capitalize","def","titleMap","btnClass","default","onSelect","val","prev","_this2","path","parse","notitle","options","tv4Validation","keys","$error","filter","k","indexOf","$setValidity","$broadcast","isArray","equals","register","$dirty","initiated","link","_this3","fieldHandler","linkRegisters","includes","linkRegister","_ret2","each","v","depth","get","_this4","dirty","mode","update","original","originalVal","concat","isString","trim","_originalVal","_this5","placeholder","append","prepend","setNestedPlaceholder","_this6","remove","chain","flatten","uniq","required","__batchConfig","__dirtyCheck","_this7","modal","close","open","controllerAs","resolve","meta","legends","decrease","increase","string","number","url","array","cn-autocomplete","cn-currency","cn-datetimepicker","cn-toggle","factory"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  angular.module('cn.batch-forms', ['schemaForm', 'cn.flex-form', 'cn.util', 'ui.router']);\n})();\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$stateParams'];\n\n  function BatchResults($state, parent, $stateParams) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    //vm.errors = _.reject(vm.results, {status: 200});\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n    vm.formName = $state.current.name;\n\n    vm.activate = activate;\n    vm.submit = submit;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      console.log('vm.parent:', vm.parent);\n      if (vm.config.idParam) {\n        vm.results.forEach(function (result, i) {\n          var params = _.assign({}, $stateParams, _defineProperty({}, vm.config.idParam, vm.originals[i].id));\n          result.editSref = $state.current.name + '(' + angular.toJson(params) + ')';\n          console.log('result.editSref:', result);\n        });\n      }\n\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Continue Editing'\n          }, {\n            text: 'Done',\n            handler: function handler() {\n              if (vm.config && vm.config.returnState) {\n                $state.go(vm.config.returnState.name, vm.config.returnState.params);\n              }\n            }\n          }]\n        },\n        noData: true\n      };\n    }\n\n    function submit(handler) {\n      console.log('submit:', handler);\n      vm.parent.closeModal();\n      if (handler) {\n        handler();\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').config(cnBatchFormsConfig).run(addTemplates);\n\n  var TYPE = 'cn-dirty-check';\n  var TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function cnBatchFormsConfig(cnFlexFormServiceProvider) {\n    cnFlexFormServiceProvider.registerField({\n      condition: function condition(field) {\n        return field.type === TYPE;\n      },\n      handler: function handler(field) {/*console.log('field.readonly:', field.key, field.readonly)*/},\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(TEMPLATE_URL, '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 ng-disabled=\"form.readonly\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>');\n  }\n})();\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n(function () {\n  angular.module('cn.batch-forms').factory('cnBatchForms', cnBatchForms);\n\n  cnBatchForms.$inject = ['cnFlexFormService', 'cnFlexFormTypes', 'sfPath', '$rootScope', '$state', '$timeout', 'cnModal'];\n  function cnBatchForms(cnFlexFormService, cnFlexFormTypes, sfPath, $rootScope, $state, $timeout, cnModal) {\n\n    var instances = 0;\n\n    var fieldTypeHandlers = {\n      'string': processDefault,\n      'number': processNumber,\n      'url': 'processDefault',\n      'array': processSelect,\n      'cn-autocomplete': processSelect,\n      'cn-currency': processNumber,\n      'cn-datetimepicker': processDate,\n      'cn-toggle': processToggle\n    };\n\n    return {\n      augmentSchema: augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if (!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor: constructor,\n        addMeta: addMeta,\n        addToSchema: addToSchema,\n        buildModelDefault: buildModelDefault,\n        clearDefaults: clearDefaults,\n        clearSchemaDefault: clearSchemaDefault,\n        closeModal: closeModal,\n        createDirtyCheck: createDirtyCheck,\n        processLinks: processLinks,\n        createBatchField: createBatchField,\n        getChangedModels: getChangedModels,\n        getEditModeLegends: getEditModeLegends,\n        getModelValues: getModelValues,\n        getSchemaDefault: getSchemaDefault,\n        getTitleMap: getTitleMap,\n        onFieldScope: onFieldScope,\n        processCondition: processCondition,\n        processForm: processForm,\n        processField: processField,\n        processItems: processItems,\n        processDate: processDate,\n        processDefault: processDefault,\n        processNumber: processNumber,\n        processSelect: processSelect,\n        processToggle: processToggle,\n        setValue: setValue,\n        showResults: showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n      console.log('BatchForms:', schema, model, models);\n\n      this.instance = instances;\n      //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.editModes = {};\n      this.fieldRegister = {};\n      this.links = [];\n\n      this.clearDefaults();\n\n      if (schema.forms) {\n        var i = schema.forms.length - 1;\n        while (i > -1) {\n          this.processForm(schema.forms[i]);\n          if (!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n        //schema.forms.forEach(this.processForm.bind(this));\n      } else {\n          this.processForm(schema.form);\n        }\n\n      this.addMeta();\n      this.processLinks();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n\n      console.log('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      var key = scope.form._key;\n      //console.log('onFieldScope:', key, scope.form.key, scope);\n      if (key) {\n        this.fieldRegister[key].ngModel = scope.ngModel;\n        this.fieldRegister[key].scope = scope;\n      }\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if (scope.form.key[0] === '__batchConfig') {\n          scope.ngModel.$pristine = false;\n        }\n    }\n\n    function processForm(form) {\n      this.processItems(form, 'form');\n    }\n\n    function processItems(field) {\n      var children = arguments.length <= 1 || arguments[1] === undefined ? 'items' : arguments[1];\n\n      //console.log('processItems:', field, children);\n      var i = field[children].length - 1;\n      while (i > -1) {\n        var child = field[children][i];\n        var show = this.processField(child);\n        if (child.batchConfig && show) {\n          //console.log('child:', child);\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n          var batchField = this.createBatchField(child);\n          var dirtyCheck = child.key && this.createDirtyCheck(child);\n          // add mode buttons after field\n          field[children][i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n            condition: this.processCondition(child.condition)\n          };\n          delete child.condition;\n          this.fieldRegister[child.key] = {\n            field: child,\n            dirtyCheck: dirtyCheck\n          };\n        }\n        if (!show) {\n          // remove field if batch isn't supported by it or children\n          field[children].splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processCondition(condition) {\n      return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n    }\n\n    function processField(field) {\n      //console.log('processField:', field.batchConfig, field);\n      if (field.key) {\n        if (!field.batchConfig) return false;\n\n        field._key = field.key;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n        //field.required = false;\n\n        var fieldType = cnFlexFormTypes.getFieldType(field);\n        var handler = fieldTypeHandlers[fieldType];\n\n        if (handler) {\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          if (_.allEqual(field.batchConfig.ogValues)) {\n            var key = '__ogValues[\"' + field.key + '\"]';\n            var first = _.first(field.batchConfig.ogValues);\n            cnFlexFormService.parseExpression(key, this.model).set(first);\n          }\n\n          handler.bind(this)(field);\n        } else return false;\n      } else if (field.items) {\n        if (field.batchConfig) {\n          field.items.forEach(function (child) {\n            child.batchConfig = _.clone(field.batchConfig);\n          });\n        }\n        this.processItems(field);\n        if (!field.items.length) return false;\n\n        if (field.batchConfig) {\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.key = 'component_' + _.uniqueId();\n          field.batchConfig.watch = [];\n\n          field.items.forEach(function (item, i) {\n            var child = item.items[0];\n            if (!i) {\n              field.batchConfig.editModes = child.batchConfig.editModes;\n              field.batchConfig.default = child.batchConfig.default;\n            }\n            field.batchConfig.watch.push({\n              resolution: 'model.__batchConfig[\"' + child.key + '\"] = model.__batchConfig[\"' + field.batchConfig.key + '\"]'\n            });\n            item.items[2].condition = 'false';\n          });\n        }\n      }\n      return true;\n    }\n\n    function getTitleMap(editModes) {\n      var _this = this;\n\n      editModes = editModes || ['replace'];\n\n      return editModes.map(function (value) {\n        _this.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value: value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      var batchConfig = field.batchConfig;\n      var key = '__batchConfig[\"' + (field.key || batchConfig.key) + '\"]';\n\n      var batchField = {\n        key: key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check',\n        watch: batchConfig.watch || []\n      };\n\n      if (batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(batchConfig.default)\n      });\n\n      if (batchConfig.onSelect) {\n        batchField.watch.push({\n          resolution: function resolution(val, prev) {\n            if (!val) return;\n            batchConfig.onSelect[val](prev);\n          }\n        });\n      }\n\n      return batchField;\n    }\n\n    function createDirtyCheck(field) {\n      var _this2 = this;\n\n      var path = sfPath.parse(field.key);\n      var key = '__dirtyCheck[\"' + path[0] + '\"]';\n      var child = path.length > 1;\n      var htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if (field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      var dirtyCheck = {\n        key: key,\n        htmlClass: htmlClass,\n        type: 'cn-dirty-check',\n        watch: [{\n          resolution: function resolution(val) {\n            var form = _this2.fieldRegister[field.key];\n            form.scope.options = {\n              tv4Validation: val\n            };\n            Object.keys(form.ngModel.$error).filter(function (k) {\n              return k.indexOf('tv4-') === 0;\n            }).forEach(function (k) {\n              ngModel.$setValidity(k, true);\n            });\n            $rootScope.$broadcast('schemaFormValidate');\n          }\n        }]\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      if (!child) {\n        (function () {\n          if (field.watch) {\n            if (!_.isArray(field.watch)) field.watch = [field.watch];\n          } else {\n            field.watch = [];\n          }\n\n          var model = _this2.buildModelDefault(field.key, field.schema) || {};\n\n          field.watch.push({\n            resolution: function resolution(val, prev) {\n              if (!angular.equals(val, prev) && !angular.equals(val, model[field.key])) {\n                var register = _this2.fieldRegister[field.key];\n                if (register) {\n                  if (register.ngModel && register.ngModel.$dirty || register.initiated) {\n                    //console.log('dirtyCheck.key:', dirtyCheck.key);\n                    cnFlexFormService.parseExpression(dirtyCheck.key, _this2.model).set(true);\n                  } else {\n                    register.initiated = true;\n                  }\n                }\n                // debug\n                else {\n                    console.log('noregister:', register);\n                  }\n              }\n            }\n          });\n\n          if (field.batchConfig.link) {\n            _this2.links.push({\n              key: field.key,\n              links: field.batchConfig.link\n            });\n          }\n        })();\n      }\n\n      return dirtyCheck;\n    }\n\n    function processLinks() {\n      var _this3 = this;\n\n      var model = this.model;\n      this.links.forEach(function (link) {\n        var fieldHandler = function fieldHandler(val, prev) {\n          if (!angular.equals(val, prev)) {\n            if (val) {\n              link.links.forEach(function (key) {\n                cnFlexFormService.parseExpression('__dirtyCheck[\"' + key + '\"]', model).set(true);\n              });\n            }\n          }\n        };\n        var fieldRegister = _this3.fieldRegister[link.key];\n        fieldRegister.field.watch.push({\n          resolution: fieldHandler\n        });\n        fieldRegister.dirtyCheck.watch = [{ resolution: fieldHandler }];\n\n        var linkRegisters = _.filter(_this3.fieldRegister, function (val, key) {\n          return link.links.includes(key);\n        });\n        linkRegisters.forEach(function (linkRegister) {\n          if (!linkRegister.dirtyCheck.watch) linkRegister.dirtyCheck.watch = [];\n          linkRegister.dirtyCheck.watch.push({\n            resolution: function resolution(val, prev) {\n              if (!angular.equals(val, prev)) {\n                if (val === false) {\n                  cnFlexFormService.parseExpression('__dirtyCheck[\"' + link.key + '\"]', model).set(false);\n                }\n              }\n            }\n          });\n        });\n      });\n    }\n\n    function buildModelDefault(key, schema) {\n      if (schema.type === 'array') {\n        var _ret2 = function () {\n          var model = _defineProperty({}, key, []);\n          if (schema.items) {\n            _.each(schema.items.properties, function (v, k) {\n              if (v.type === 'array') {\n                model[key].push(buildModelDefault(k, v));\n              }\n            });\n          }\n          return {\n            v: model\n          };\n        }();\n\n        if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === \"object\") return _ret2.v;\n      }\n    }\n\n    function addToSchema(key, schema) {\n      var path = sfPath.parse(key);\n      var depth = this.schema.schema;\n\n      path.forEach(function (k, i) {\n        if (i === path.length - 1) {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        } else if (k === '') {\n          if (!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        } else {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          if (!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(function (model) {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      var _this4 = this;\n\n      var models = [];\n\n      _.each(this.fieldRegister, function (register, key) {\n        var dirty = cnFlexFormService.parseExpression('__dirtyCheck[\"' + key + '\"]', _this4.model).get();\n\n        if (!dirty) return;\n\n        var mode = cnFlexFormService.parseExpression('__batchConfig[\"' + key + '\"]', _this4.model).get();\n\n        _this4.models.forEach(function (model, i) {\n          if (!models[i]) models[i] = {};\n\n          var val = cnFlexFormService.parseExpression(key, _this4.model).get();\n          var update = cnFlexFormService.parseExpression(key, models[i]);\n          var original = cnFlexFormService.parseExpression(key, _this4.models[i]);\n\n          _this4.setValue(val, update, original, mode);\n        });\n      });\n\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if (mode === 'replace') {\n        update.set(val);\n      } else if (mode === 'append') {\n        var originalVal = original.get();\n        if (_.isArray(originalVal)) {\n          update.set(originalVal.concat(val));\n        } else if (_.isString(originalVal)) {\n          update.set(originalVal + ' ' + val.trim());\n        }\n      } else if (mode === 'prepend') {\n        var _originalVal = original.get();\n        if (_.isArray(_originalVal)) {\n          update.set(val.concat(_originalVal));\n        } else if (_.isString(_originalVal)) {\n          update.set(val.trim() + ' ' + _originalVal);\n        }\n      } else if (mode === 'increase') {\n        update.set(original.get() + val);\n      } else if (mode === 'decrease') {\n        update.set(original.get() - val);\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function processDefault(field) {\n      var _this5 = this;\n\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append'];\n\n      config.default = config.default || 'append';\n\n      config.onSelect = {\n        replace: function replace() {\n          if (_.allEqual(config.ogValues)) {\n            cnFlexFormService.parseExpression(field.key, _this5.model).set(_.first(config.ogValues));\n          } else {\n            field.placeholder = '—';\n          }\n        },\n        append: function append() {\n          field.placeholder = '';\n        },\n        prepend: function prepend() {\n          field.placeholder = '';\n        }\n      };\n    }\n\n    function processNumber(field) {\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      } else {\n        field.placeholder = '—';\n      }\n    }\n\n    function setNestedPlaceholder(field) {\n      if (field.items) {\n        field.items.forEach(setNestedPlaceholder);\n      } else {\n        field.placeholder = '—';\n      }\n    }\n\n    function processSelect(field) {\n      var _this6 = this;\n\n      var type = field.schema.type;\n      var config = field.batchConfig;\n\n      if (type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'append';\n\n        if (_.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n        } else {\n          setNestedPlaceholder(field);\n        }\n\n        config.onSelect = {\n          replace: function replace(prev) {\n            if (prev && prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, _this6.model).set([]);\n            }\n          },\n          append: function append(prev) {\n            if (prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, _this6.model).set([]);\n            }\n          },\n          remove: function remove() {\n            var val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, _this6.model).set(val);\n          }\n        };\n      } else {\n\n        var first = _.first(config.ogValues);\n        //TODO: dynamically send back data\n        if (first && _.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(first);\n        }\n\n        if (!field.placeholder) {\n          field.placeholder = '—';\n        }\n      }\n    }\n\n    function processDate(field) {\n      var config = field.batchConfig;\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      } else {\n        field.placeholder = '—';\n      }\n    }\n\n    function processToggle(field) {\n      var config = field.batchConfig;\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n    }\n\n    function clearDefaults() {\n      this.schema.schema.required = undefined;\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n    }\n\n    function clearSchemaDefault(schema) {\n      schema.default = undefined;\n      if (schema.type === 'object' && schema.properties) {\n        schema.required = undefined;\n        _.each(schema.properties, this.clearSchemaDefault.bind(this));\n      } else if (schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items);\n      }\n    }\n\n    function showResults(results, config) {\n      var _this7 = this;\n\n      this.results = results;\n      this.resultsConfig = config;\n\n      if (this.modal) {\n        this.modal.close();\n      }\n\n      this.modal = cnModal.open({\n        controller: 'BatchResults',\n        controllerAs: 'vm',\n        templateUrl: 'cn-batch-forms/batch-results.html',\n        resolve: {\n          parent: function parent() {\n            return _this7;\n          }\n        }\n      });\n    }\n\n    function closeModal() {\n      this.modal.close();\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = '\\n          <div class=\"well\">\\n            <h5>Edit Modes</h5>\\n            <p>Some types of fields allow you to apply batch changes in\\n            different ways:</p>\\n            <dl>\\n              <dt>Replace:</dt>\\n              <dd>Replace all the original values\\n              with the new value. <em>(If you don\\'t see an <b>Edit Mode</b> option\\n              for a field, this will be the default)</em></dd>\\n            </dl>\\n            ' + this.getEditModeLegends() + '\\n          </div>';\n    }\n\n    function getEditModeLegends() {\n      var legends = '';\n\n      if (this.editModes.prepend) {\n        legends += '\\n            <dl>\\n              <dt>Prepend:</dt>\\n              <dd>Add the new value to the start of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.append) {\n        legends += '\\n            <dl>\\n              <dt>Append:</dt>\\n              <dd>Affix the new value at the end of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.decrease) {\n        legends += '\\n            <dl>\\n              <dt>Decrease:</dt>\\n              <dd>Subtract the given value from the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.increase) {\n        legends += '\\n            <dl>\\n              <dt>Increase:</dt>\\n              <dd>Add the given value to the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      return legends;\n    }\n  }\n})();\n\"use strict\";\n\nangular.module(\"cn.batch-forms\").run([\"$templateCache\", function ($templateCache) {\n  $templateCache.put(\"cn-batch-forms/batch-results.html\", \"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.submit(handler)\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n    <table class=\\\"table card-flex gutterless\\\">\\n      <tbody>\\n      <tr ng-repeat=\\\"result in vm.results\\\">\\n        <td class=\\\"col-sm-10\\\">\\n          <h6 ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{result.body.id}})</span>\\n          </h6>\\n          <h6 ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{vm.originals[$index].id}})</span>\\n          </h6>\\n          <p ng-class=\\\"{\\n               \\'text-danger\\': result.status != 200,\\n               \\'text-primary\\': result.status == 200\\n             }\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n            {{result.status == 200 ? \\'updated successfully\\' : result.body.message}}\\n          </p>\\n        </td>\\n        <td class=\\\"col-sm-2 text-center\\\">\\n          <a ng-show=\\\"result.editSref\\\"\\n             class=\\\"btn btn-sm btn-transparent\\\"\\n             ui-sref=\\\"{{result.editSref}}\\\">\\n            <i class=\\\"icn-edit\\\"></i>\\n          </a>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\");\n}]);","(function() {\n  angular.module('cn.batch-forms', [\n    'schemaForm',\n    'cn.flex-form',\n    'cn.util',\n    'ui.router'\n  ]);\n})();","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$stateParams'];\n\n  function BatchResults($state, parent, $stateParams) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    //vm.errors = _.reject(vm.results, {status: 200});\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n    vm.formName = $state.current.name;\n\n    vm.activate = activate;\n    vm.submit = submit;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      console.log('vm.parent:', vm.parent);\n      if(vm.config.idParam) {\n        vm.results.forEach((result, i) => {\n          let params = _.assign({}, $stateParams, {[vm.config.idParam]: vm.originals[i].id});\n          result.editSref = `${$state.current.name}(${angular.toJson(params)})`;\n          console.log('result.editSref:', result);\n        });\n      }\n\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Continue Editing'\n          }, {\n            text: 'Done',\n            handler: () => {\n              if(vm.config && vm.config.returnState) {\n                $state.go(vm.config.returnState.name, vm.config.returnState.params);\n              }\n            }\n          }]\n        },\n        noData: true\n      };\n\n    }\n\n    function submit(handler) {\n      console.log('submit:', handler);\n      vm.parent.closeModal();\n      if(handler) {\n        handler();\n      }\n    }\n\n  }\n\n})();","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .config(cnBatchFormsConfig)\n      .run(addTemplates);\n\n  const TYPE = 'cn-dirty-check';\n  const TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function cnBatchFormsConfig(cnFlexFormServiceProvider) {\n    cnFlexFormServiceProvider.registerField({\n      condition: (field) => field.type === TYPE,\n      handler: (field) => {/*console.log('field.readonly:', field.key, field.readonly)*/},\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(\n        TEMPLATE_URL,\n        '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 ng-disabled=\"form.readonly\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>'\n    );\n  }\n\n})();","(function() {\n  angular\n      .module('cn.batch-forms')\n      .factory('cnBatchForms', cnBatchForms);\n\n  cnBatchForms.$inject = [\n    'cnFlexFormService',\n    'cnFlexFormTypes',\n    'sfPath',\n    '$rootScope',\n    '$state',\n    '$timeout',\n    'cnModal'\n  ];\n  function cnBatchForms(\n      cnFlexFormService,\n      cnFlexFormTypes,\n      sfPath,\n      $rootScope,\n      $state,\n      $timeout,\n      cnModal) {\n\n    let instances = 0;\n\n    let fieldTypeHandlers = {\n      'string': processDefault,\n      'number': processNumber,\n      'url': 'processDefault',\n      'array': processSelect,\n      'cn-autocomplete': processSelect,\n      'cn-currency': processNumber,\n      'cn-datetimepicker': processDate,\n      'cn-toggle': processToggle\n    };\n\n    return {\n      augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if(!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor,\n        addMeta,\n        addToSchema,\n        buildModelDefault,\n        clearDefaults,\n        clearSchemaDefault,\n        closeModal,\n        createDirtyCheck,\n        processLinks,\n        createBatchField,\n        getChangedModels,\n        getEditModeLegends,\n        getModelValues,\n        getSchemaDefault,\n        getTitleMap,\n        onFieldScope,\n        processCondition,\n        processForm,\n        processField,\n        processItems,\n        processDate,\n        processDefault,\n        processNumber,\n        processSelect,\n        processToggle,\n        setValue,\n        showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n      console.log('BatchForms:', schema, model, models);\n\n      this.instance = instances;\n      //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.editModes = {};\n      this.fieldRegister = {};\n      this.links = [];\n\n      this.clearDefaults();\n\n      if(schema.forms) {\n        let i = schema.forms.length - 1;\n        while(i > -1) {\n          this.processForm(schema.forms[i]);\n          if(!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n        //schema.forms.forEach(this.processForm.bind(this));\n      }\n      else {\n        this.processForm(schema.form);\n      }\n\n      this.addMeta();\n      this.processLinks();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n\n      console.log('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      let key = scope.form._key;\n      //console.log('onFieldScope:', key, scope.form.key, scope);\n      if(key) {\n        this.fieldRegister[key].ngModel = scope.ngModel;\n        this.fieldRegister[key].scope = scope;\n      }\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if(scope.form.key[0] === '__batchConfig') {\n        scope.ngModel.$pristine = false;\n      }\n\n    }\n\n    function processForm(form) {\n      this.processItems(form, 'form');\n    }\n\n    function processItems(field, children = 'items') {\n      //console.log('processItems:', field, children);\n      let i = field[children].length - 1;\n      while(i > -1) {\n        let child = field[children][i];\n        let show = this.processField(child);\n        if(child.batchConfig && show) {\n          //console.log('child:', child);\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n          let batchField = this.createBatchField(child);\n          let dirtyCheck = child.key && this.createDirtyCheck(child);\n          // add mode buttons after field\n          field[children][i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n            condition: this.processCondition(child.condition)\n          };\n          delete child.condition;\n          this.fieldRegister[child.key] = {\n            field: child,\n            dirtyCheck\n          };\n        }\n        if(!show) {\n          // remove field if batch isn't supported by it or children\n          field[children].splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processCondition(condition) {\n      return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n    }\n\n    function processField(field) {\n      //console.log('processField:', field.batchConfig, field);\n      if(field.key) {\n        if(!field.batchConfig) return false;\n\n        field._key = field.key;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n        //field.required = false;\n\n        let fieldType = cnFlexFormTypes.getFieldType(field);\n        let handler = fieldTypeHandlers[fieldType];\n\n        if(handler) {\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          if(_.allEqual(field.batchConfig.ogValues)) {\n            let key = `__ogValues[\"${field.key}\"]`;\n            let first = _.first(field.batchConfig.ogValues);\n            cnFlexFormService.parseExpression(key, this.model).set(first);\n          }\n\n          handler.bind(this)(field);\n        }\n        else return false;\n      }\n      else if(field.items) {\n        if(field.batchConfig) {\n          field.items.forEach(child => {\n            child.batchConfig = _.clone(field.batchConfig);\n          });\n        }\n        this.processItems(field);\n        if(!field.items.length) return false;\n\n        if(field.batchConfig) {\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.key = `component_${_.uniqueId()}`;\n          field.batchConfig.watch = [];\n\n          field.items.forEach((item, i) => {\n            let child = item.items[0];\n            if(!i) {\n              field.batchConfig.editModes = child.batchConfig.editModes;\n              field.batchConfig.default = child.batchConfig.default;\n            }\n            field.batchConfig.watch.push({\n              resolution: `model.__batchConfig[\"${child.key}\"] = model.__batchConfig[\"${field.batchConfig.key}\"]`\n            });\n            item.items[2].condition = 'false';\n          });\n        }\n      }\n      return true;\n    }\n\n    function getTitleMap(editModes) {\n      editModes = editModes || ['replace'];\n\n      return editModes.map(value => {\n        this.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      let batchConfig = field.batchConfig;\n      let key = `__batchConfig[\"${field.key || batchConfig.key}\"]`;\n\n      let batchField = {\n        key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check',\n        watch: batchConfig.watch || []\n      };\n\n      if(batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(batchConfig.default)\n      });\n\n      if(batchConfig.onSelect) {\n        batchField.watch.push({\n          resolution: (val, prev) => {\n            if(!val) return;\n            batchConfig.onSelect[val](prev);\n          }\n        });\n      }\n\n      return batchField;\n    }\n\n    function createDirtyCheck(field) {\n      let path = sfPath.parse(field.key);\n      let key = `__dirtyCheck[\"${path[0]}\"]`;\n      let child = path.length > 1;\n      let htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if(field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      let dirtyCheck = {\n        key,\n        htmlClass,\n        type: 'cn-dirty-check',\n        watch: [{\n          resolution: (val) => {\n            let form = this.fieldRegister[field.key];\n            form.scope.options = {\n              tv4Validation: val\n            };\n            Object.keys(form.ngModel.$error)\n                .filter(function(k) { return k.indexOf('tv4-') === 0; })\n                .forEach(function(k) { ngModel.$setValidity(k, true); });\n            $rootScope.$broadcast('schemaFormValidate');\n          }\n        }]\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      if(!child) {\n        if(field.watch) {\n          if(!_.isArray(field.watch)) field.watch = [field.watch];\n        }\n        else {\n          field.watch = [];\n        }\n\n        let model = this.buildModelDefault(field.key, field.schema) || {};\n\n        field.watch.push({\n          resolution: (val, prev) => {\n            if(!angular.equals(val, prev) && !angular.equals(val, model[field.key])) {\n              let register = this.fieldRegister[field.key];\n              if(register) {\n                if((register.ngModel && register.ngModel.$dirty) || register.initiated) {\n                  //console.log('dirtyCheck.key:', dirtyCheck.key);\n                  cnFlexFormService.parseExpression(dirtyCheck.key, this.model).set(true);\n                }\n                else {\n                  register.initiated = true;\n                }\n              }\n              // debug\n              else {\n                console.log('noregister:', register);\n              }\n            }\n          }\n        });\n\n        if (field.batchConfig.link) {\n          this.links.push({\n            key: field.key,\n            links: field.batchConfig.link\n          });\n        }\n      }\n\n      return dirtyCheck;\n    }\n\n    function processLinks() {\n      let model = this.model;\n      this.links.forEach((link) => {\n        let fieldHandler = function(val, prev) {\n          if (!angular.equals(val, prev)) {\n            if(val) {\n              link.links.forEach(key => {\n                cnFlexFormService.parseExpression(`__dirtyCheck[\"${key}\"]`, model).set(true);\n              });\n            }\n          }\n        };\n        let fieldRegister = this.fieldRegister[link.key];\n        fieldRegister.field.watch.push({\n          resolution: fieldHandler\n        });\n        fieldRegister.dirtyCheck.watch = [{resolution: fieldHandler}];\n\n        let linkRegisters = _.filter(this.fieldRegister, (val, key) => link.links.includes(key));\n        linkRegisters.forEach((linkRegister) => {\n          if (!linkRegister.dirtyCheck.watch) linkRegister.dirtyCheck.watch = [];\n          linkRegister.dirtyCheck.watch.push({\n            resolution: (val, prev) => {\n              if (!angular.equals(val, prev)) {\n                if(val === false) {\n                  cnFlexFormService.parseExpression(`__dirtyCheck[\"${link.key}\"]`, model).set(false);\n                }\n              }\n            }\n          });\n        });\n      });\n    }\n\n    function buildModelDefault(key, schema) {\n      if (schema.type === 'array') {\n        let model = {[key]: []};\n        if (schema.items) {\n          _.each(schema.items.properties, (v, k) => {\n            if (v.type === 'array') {\n              model[key].push(buildModelDefault(k, v));\n            }\n          });\n        }\n        return model;\n      }\n    }\n\n    function addToSchema(key, schema) {\n      let path = sfPath.parse(key);\n      let depth = this.schema.schema;\n\n      path.forEach((k, i) => {\n        if(i === path.length - 1) {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        }\n        else if(k === '') {\n          if(!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        }\n        else {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          if(!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(model => {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      let models = [];\n\n      _.each(this.fieldRegister, (register, key) => {\n        let dirty = cnFlexFormService\n            .parseExpression(`__dirtyCheck[\"${key}\"]`, this.model)\n            .get();\n\n        if(!dirty) return;\n\n        let mode = cnFlexFormService\n            .parseExpression(`__batchConfig[\"${key}\"]`, this.model)\n            .get();\n\n        this.models.forEach((model, i) => {\n          if(!models[i]) models[i] = {};\n\n          let val = cnFlexFormService\n              .parseExpression(key, this.model)\n              .get();\n          let update = cnFlexFormService\n              .parseExpression(key, models[i]);\n          let original = cnFlexFormService\n              .parseExpression(key, this.models[i]);\n\n          this.setValue(val, update, original, mode);\n        });\n      });\n\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if(mode === 'replace') {\n        update.set(val);\n      }\n      else if(mode === 'append') {\n        let originalVal = original.get();\n        if(_.isArray(originalVal)) {\n          update.set(originalVal.concat(val));\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${originalVal} ${val.trim()}`);\n        }\n      }\n      else if(mode === 'prepend') {\n        let originalVal = original.get();\n        if(_.isArray(originalVal)) {\n          update.set(val.concat(originalVal));\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${val.trim()} ${originalVal}`);\n        }\n      }\n      else if(mode === 'increase') {\n        update.set(original.get() + val);\n      }\n      else if(mode === 'decrease') {\n        update.set(original.get() - val);\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function processDefault(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append'];\n\n      config.default = config.default || 'append';\n\n      config.onSelect = {\n        replace: () => {\n          if(_.allEqual(config.ogValues)) {\n            cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n          }\n          else {\n            field.placeholder = '—';\n          }\n        },\n        append: () => {\n          field.placeholder = '';\n        },\n        prepend: () => {\n          field.placeholder = '';\n        }\n      };\n    }\n\n    function processNumber(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n      else {\n        field.placeholder = '—';\n      }\n    }\n\n    function setNestedPlaceholder(field) {\n      if (field.items) {\n        field.items.forEach(setNestedPlaceholder);\n      } else {\n        field.placeholder = '—';\n      }\n    }\n\n    function  processSelect(field) {\n      let type = field.schema.type;\n      let config = field.batchConfig;\n\n      if(type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'append';\n\n        if (_.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n        } else {\n          setNestedPlaceholder(field);\n        }\n\n        config.onSelect = {\n          replace: (prev) => {\n            if(prev && prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          append: (prev) => {\n            if(prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          remove: () => {\n            let val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, this.model).set(val);\n          }\n        };\n      }\n      else {\n\n        let first = _.first(config.ogValues);\n        //TODO: dynamically send back data\n        if(first && _.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(first);\n        }\n\n        if(!field.placeholder) {\n          field.placeholder = '—';\n        }\n      }\n    }\n\n    function processDate(field) {\n      let config = field.batchConfig;\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n      else {\n        field.placeholder = '—';\n      }\n    }\n\n    function processToggle(field) {\n      let config = field.batchConfig;\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n    }\n\n    function clearDefaults() {\n      this.schema.schema.required = undefined;\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n    }\n\n    function clearSchemaDefault(schema) {\n      schema.default = undefined;\n      if(schema.type === 'object' && schema.properties) {\n        schema.required = undefined;\n        _.each(schema.properties, this.clearSchemaDefault.bind(this));\n      }\n      else if(schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items);\n      }\n    }\n\n    function showResults(results, config) {\n      this.results = results;\n      this.resultsConfig = config;\n\n      if(this.modal) {\n        this.modal.close();\n      }\n\n      this.modal = cnModal.open({\n        controller: 'BatchResults',\n        controllerAs: 'vm',\n        templateUrl: 'cn-batch-forms/batch-results.html',\n        resolve: {\n          parent: () => this\n        }\n      });\n    }\n\n    function closeModal() {\n      this.modal.close();\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = `\n          <div class=\"well\">\n            <h5>Edit Modes</h5>\n            <p>Some types of fields allow you to apply batch changes in\n            different ways:</p>\n            <dl>\n              <dt>Replace:</dt>\n              <dd>Replace all the original values\n              with the new value. <em>(If you don't see an <b>Edit Mode</b> option\n              for a field, this will be the default)</em></dd>\n            </dl>\n            ${this.getEditModeLegends()}\n          </div>`;\n    }\n\n    function getEditModeLegends() {\n      let legends = '';\n\n      if(this.editModes.prepend) {\n        legends += `\n            <dl>\n              <dt>Prepend:</dt>\n              <dd>Add the new value to the start of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.append) {\n        legends += `\n            <dl>\n              <dt>Append:</dt>\n              <dd>Affix the new value at the end of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.decrease) {\n        legends += `\n            <dl>\n              <dt>Decrease:</dt>\n              <dd>Subtract the given value from the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.increase) {\n        legends += `\n            <dl>\n              <dt>Increase:</dt>\n              <dd>Add the given value to the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      return legends;\n    }\n  }\n\n})();","angular.module(\"cn.batch-forms\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"cn-batch-forms/batch-results.html\",\"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.submit(handler)\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n    <table class=\\\"table card-flex gutterless\\\">\\n      <tbody>\\n      <tr ng-repeat=\\\"result in vm.results\\\">\\n        <td class=\\\"col-sm-10\\\">\\n          <h6 ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{result.body.id}})</span>\\n          </h6>\\n          <h6 ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{vm.originals[$index].id}})</span>\\n          </h6>\\n          <p ng-class=\\\"{\\n               \\'text-danger\\': result.status != 200,\\n               \\'text-primary\\': result.status == 200\\n             }\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n            {{result.status == 200 ? \\'updated successfully\\' : result.body.message}}\\n          </p>\\n        </td>\\n        <td class=\\\"col-sm-2 text-center\\\">\\n          <a ng-show=\\\"result.editSref\\\"\\n             class=\\\"btn btn-sm btn-transparent\\\"\\n             ui-sref=\\\"{{result.editSref}}\\\">\\n            <i class=\\\"icn-edit\\\"></i>\\n          </a>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\");}]);"],"sourceRoot":"/source/"}