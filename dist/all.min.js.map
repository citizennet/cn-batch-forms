{"version":3,"sources":["all.min.js","_.cn-batch-forms.module.js","cn-batch-forms.service.js"],"names":["angular","module","cnBatchForms","cnFlexFormService","augmentSchema","schema","model","models","length","service","BatchForms","Object","create","constructor","processField","postProcessField","processHidden","processString","processSelect","getModelValues","_this","this","forms","forEach","form","field","batchConfig","key","getSchema","fieldType","cnFlexFormTypes","getFieldType","handler","fieldTypeHandlers","_","isObject","ogValues","bind","items","map","parseExpression","get","condition","titleMap","name","value","uniq","placeholder","first","_this2","type","onSelect","replace","prev","set","push","remove","val","chain","flatten","every","displayProperty","watch","resolution","string","cn-autocomplete","factory","$inject"],"mappings":"AAAA,cCAA,WACEA,QAAQC,OAAO,kBACb,eACA,eCHJ,WAME,QAASC,GAAaC,GAQlB,QAIOC,GAAcC,EAAQC,EAAOC,GACpC,IAAIA,EAAOC,OAAQ,MAAOH,EAE1B,IAAII,GAAUC,EAAWL,EAAQC,EAAOC,EAExC,OAAOE,GAAQJ,OAGjB,QAASK,KACP,MAAOC,QAAOC,QACZC,YAAAA,EACAC,aAAAA,EACAC,iBAAAA,EACAC,cAAAA,EACAC,cAAAA,EACAC,cAAAA,EACAC,eAAAA,IACCN,cAGL,QAASA,GAAYR,EAAQC,EAAOC,GFMlC,GAAIa,GAAQC,IEMZ,OAXAA,MAAKhB,OAASA,EACdgB,KAAKf,MAAQA,EACbe,KAAKd,OAASA,EAEXF,EAAOiB,MACRjB,EAAOiB,MAAMC,QAAQ,SAAAC,GFQnB,MER2BA,GAAKD,QAAQH,EAAKN,gBAG/CT,EAAOmB,KAAKD,QAAQF,KAAKP,cAGpBO,KAGT,QAASP,GAAaW,GACpB,IAAIA,EAAMC,YAER,WADAV,GAAcS,EAGhB,IAAGA,EAAME,IAAK,CACZF,EAAMpB,OAASoB,EAAMpB,QAAUF,EAAkByB,UAAUH,EAE3D,IAAII,GAAYC,gBAAgBC,aAAaN,GACzCO,EAAUC,EAAkBJ,EAEhC,KAAGG,EASD,WADAX,MAAKL,cAAcS,EAPfS,GAAEC,SAASV,EAAMC,eAAcD,EAAMC,gBACzCD,EAAMC,YAAYU,SAAWf,KAAKF,eAAeM,GAEjDO,EAAQK,KAAKhB,MAAMI,GACnBJ,KAAKN,iBAAiBU,OAOlBA,GAAMa,OACZb,EAAMa,MAAMf,QAAQF,KAAKP,cAI7B,QAASC,GAAiBU,IAK1B,QAASN,GAAeM,GACtB,MAAOJ,MAAKd,OAAOgC,IAAI,SAAAjC,GACrB,MAAOH,GAAkBqC,gBAAgBf,EAAME,IAAKrB,GAAOmC,QAI/D,QAASzB,GAAcS,GACrBA,EAAMiB,UAAY,QAGpB,QAASzB,GAAcQ,GACrBA,EAAMC,YAAYiB,SAAWlB,EAAMC,YAAYiB,YAC7CC,KAAM,UACNC,MAAO,YAEPD,KAAM,SACNC,MAAO,SAGwC,IAA9CX,EAAEY,KAAKrB,EAAMC,YAAYU,UAAU5B,OACpCiB,EAAMsB,YAAcb,EAAEc,MAAMvB,EAAMC,YAAYU,UAG9CX,EAAMsB,YAAc,IAIxB,QAAS7B,GAAcO,GFGrB,GAAIwB,GAAS5B,KEFT6B,EAAOzB,EAAMpB,OAAO6C,IAEZ,WAATA,GACDzB,EAAMC,YAAYiB,SAAWlB,EAAMC,YAAYiB,YAC7CC,KAAM,UACNC,MAAO,YAEPD,KAAM,SACNC,MAAO,SAEPD,KAAM,SACNC,MAAO,WAGTpB,EAAMC,YAAYyB,UAChBC,QAAS,SAACC,GACI,SAATA,GACDlD,EAAkBqC,gBAAgBf,EAAME,IAAKsB,EAAK3C,OAAOgD,SAG7DC,KAAM,SAACF,GACO,YAATA,GACDlD,EAAkBqC,gBAAgBf,EAAME,IAAKsB,EAAK3C,OAAOgD,SAG7DE,OAAQ,WACN,GAAIC,GAAMvB,EAAEwB,MAAMjC,EAAMC,YAAYU,UAAUuB,UAAUb,OAAOD,OAC/D1C,GAAkBqC,gBAAgBf,EAAME,IAAKsB,EAAK3C,OAAOgD,IAAIG,OAKjEhC,EAAMC,YAAYiB,SAAWlB,EAAMC,YAAYiB,YAC7CC,KAAM,UACNC,MAAO,YAGTpB,EAAMC,YAAYyB,UAChBC,QAAS,SAACC,GACR,GAAIL,GAAQd,EAAEc,MAAMvB,EAAMC,YAAYU,SACnCF,GAAE0B,MAAMnC,EAAMC,YAAYU,SAAUY,GACrCvB,EAAMsB,YAAcC,EAAMvB,EAAMoC,iBAAmB,QAGnDpC,EAAMsB,YAAc,OAM5BtB,EAAMC,YAAYoC,OAChBC,WAAY,SAACN,EAAKJ,GAChB5B,EAAMC,YAAYyB,SAASM,GAAKJ,KA/JtC,GAAIpB,IACF+B,OAAU/C,EACVgD,kBAAmB/C,EAGrB,QACEd,cAAAA,GAZJJ,QACKC,OAAO,kBACPiE,QAAQ,eAAgBhE,GAE7BA,EAAaiE,SAAW","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  angular.module('cn.batch-forms', ['cn-flex-form', 'cn.util']);\n})();\n'use strict';\n\n(function () {\n  angular.module('cn.batch-forms').factory('cnBatchForms', cnBatchForms);\n\n  cnBatchForms.$inject = ['cnFlexFormService'];\n  function cnBatchForms(cnFlexFormService) {\n    var fieldTypeHandlers = {\n      'string': processString,\n      'cn-autocomplete': processSelect\n    };\n\n    return {\n      augmentSchema: augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if (!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service.schema;\n    }\n\n    function BatchForms() {\n      return Object.create({\n        constructor: constructor,\n        processField: processField,\n        postProcessField: postProcessField,\n        processHidden: processHidden,\n        processString: processString,\n        processSelect: processSelect,\n        getModelValues: getModelValues\n      }).constructor();\n    }\n\n    function constructor(schema, model, models) {\n      var _this = this;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n\n      if (schema.forms) {\n        schema.forms.forEach(function (form) {\n          return form.forEach(_this.processField);\n        });\n      } else {\n        schema.form.forEach(this.processField);\n      }\n\n      return this;\n    }\n\n    function processField(field) {\n      if (!field.batchConfig) {\n        processHidden(field);\n        return;\n      }\n      if (field.key) {\n        field.schema = field.schema || cnFlexFormService.getSchema(field);\n\n        var fieldType = cnFlexFormTypes.getFieldType(field);\n        var handler = fieldTypeHandlers[fieldType];\n\n        if (handler) {\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          handler.bind(this)(field);\n          this.postProcessField(field);\n        } else {\n          this.processHidden(field);\n          return;\n        }\n      } else if (field.items) {\n        field.items.forEach(this.processField);\n      }\n    }\n\n    function postProcessField(field) {}\n\n    function getModelValues(field) {\n      return this.models.map(function (model) {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function processHidden(field) {\n      field.condition = 'false';\n    }\n\n    function processString(field) {\n      field.batchConfig.titleMap = field.batchConfig.titleMap || [{\n        name: 'Replace',\n        value: 'replace'\n      }, {\n        name: 'Append',\n        value: 'push'\n      }];\n\n      if (_.uniq(field.batchConfig.ogValues).length === 1) {\n        field.placeholder = _.first(field.batchConfig.ogValues);\n      } else {\n        field.placeholder = '—';\n      }\n    }\n\n    function processSelect(field) {\n      var _this2 = this;\n\n      var type = field.schema.type;\n\n      if (type === 'array') {\n        field.batchConfig.titleMap = field.batchConfig.titleMap || [{\n          name: 'Replace',\n          value: 'replace'\n        }, {\n          name: 'Append',\n          value: 'push'\n        }, {\n          name: 'Remove',\n          value: 'remove'\n        }];\n\n        field.batchConfig.onSelect = {\n          replace: function replace(prev) {\n            if (prev !== 'push') {\n              cnFlexFormService.parseExpression(field.key, _this2.model).set([]);\n            }\n          },\n          push: function push(prev) {\n            if (prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, _this2.model).set([]);\n            }\n          },\n          remove: function remove() {\n            var val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, _this2.model).set(val);\n          }\n        };\n      } else {\n        field.batchConfig.titleMap = field.batchConfig.titleMap || [{\n          name: 'Replace',\n          value: 'replace'\n        }];\n\n        field.batchConfig.onSelect = {\n          replace: function replace(prev) {\n            var first = _.first(field.batchConfig.ogValues);\n            if (_.every(field.batchConfig.ogValues, first)) {\n              field.placeholder = first[field.displayProperty || 'name'];\n            } else {\n              field.placeholder = '—';\n            }\n          }\n        };\n      }\n\n      field.batchConfig.watch = {\n        resolution: function resolution(val, prev) {\n          field.batchConfig.onSelect[val](prev);\n        }\n      };\n    }\n  }\n})();","(function() {\n  angular.module('cn.batch-forms', [\n    'cn-flex-form',\n    'cn.util'\n  ]);\n})();","(function() {\n  angular\n      .module('cn.batch-forms')\n      .factory('cnBatchForms', cnBatchForms);\n\n  cnBatchForms.$inject = ['cnFlexFormService'];\n  function cnBatchForms(cnFlexFormService) {\n    var fieldTypeHandlers = {\n      'string': processString,\n      'cn-autocomplete': processSelect\n    };\n\n    return {\n      augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if(!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service.schema;\n    }\n\n    function BatchForms() {\n      return Object.create({\n        constructor,\n        processField,\n        postProcessField,\n        processHidden,\n        processString,\n        processSelect,\n        getModelValues\n      }).constructor();\n    }\n\n    function constructor(schema, model, models) {\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n\n      if(schema.forms) {\n        schema.forms.forEach(form => form.forEach(this.processField));\n      }\n      else {\n        schema.form.forEach(this.processField);\n      }\n\n      return this;\n    }\n\n    function processField(field) {\n      if(!field.batchConfig) {\n        processHidden(field);\n        return;\n      }\n      if(field.key) {\n        field.schema = field.schema || cnFlexFormService.getSchema(field);\n\n        var fieldType = cnFlexFormTypes.getFieldType(field);\n        var handler = fieldTypeHandlers[fieldType];\n\n        if(handler) {\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          handler.bind(this)(field);\n          this.postProcessField(field);\n        }\n        else {\n          this.processHidden(field);\n          return;\n        }\n      }\n      else if(field.items) {\n        field.items.forEach(this.processField);\n      }\n    }\n\n    function postProcessField(field) {\n\n\n    }\n\n    function getModelValues(field) {\n      return this.models.map(model => {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function processHidden(field) {\n      field.condition = 'false';\n    }\n\n    function processString(field) {\n      field.batchConfig.titleMap = field.batchConfig.titleMap || [{\n        name: 'Replace',\n        value: 'replace'\n      }, {\n        name: 'Append',\n        value: 'push'\n      }];\n\n      if(_.uniq(field.batchConfig.ogValues).length === 1) {\n        field.placeholder = _.first(field.batchConfig.ogValues);\n      }\n      else {\n        field.placeholder = '—';\n      }\n    }\n\n    function processSelect(field) {\n      var type = field.schema.type;\n\n      if(type === 'array') {\n        field.batchConfig.titleMap = field.batchConfig.titleMap || [{\n          name: 'Replace',\n          value: 'replace'\n        }, {\n          name: 'Append',\n          value: 'push'\n        }, {\n          name: 'Remove',\n          value: 'remove'\n        }];\n\n        field.batchConfig.onSelect = {\n          replace: (prev) => {\n            if(prev !== 'push') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          push: (prev) => {\n            if(prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          remove: () => {\n            var val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, this.model).set(val);\n          }\n        };\n      }\n      else {\n        field.batchConfig.titleMap = field.batchConfig.titleMap || [{\n          name: 'Replace',\n          value: 'replace'\n        }];\n\n        field.batchConfig.onSelect = {\n          replace: (prev) => {\n            var first = _.first(field.batchConfig.ogValues);\n            if(_.every(field.batchConfig.ogValues, first)) {\n              field.placeholder = first[field.displayProperty || 'name'];\n            }\n            else {\n              field.placeholder = '—';\n            }\n          }\n        };\n      }\n\n      field.batchConfig.watch = {\n        resolution: (val, prev) => {\n          field.batchConfig.onSelect[val](prev);\n        }\n      };\n    }\n  }\n\n})();"],"sourceRoot":"/source/"}