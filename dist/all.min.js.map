{"version":3,"sources":["all.min.js","batch-results.js","cn-batch-forms.routes.js","_.cn-batch-forms.module.js","cn-batch-forms.service.js","templates.js"],"names":["_interopRequireDefault","obj","__esModule","default","_defineProperty","key","value","Object","defineProperty","enumerable","configurable","writable","BatchResults","$state","parent","$stateParams","activate","vm","config","idParam","results","forEach","result","index","_","isFunction","buildEditSref","editSref","body","params","assign","originals","id","current","name","angular","toJson","headerConfig","title","main","actionConfig","actions","text","handler","returnState","go","noData","showEdit","inRange","status","submit","closeModal","this","models","resultsConfig","displayName","formName","cnBatchFormsConfig","cnFlexFormServiceProvider","registerField","condition","field","type","TYPE","templateUrl","TEMPLATE_URL","addTemplates","$templateCache","put","_batchResults","require","_batchResults2","_cnBatchForms","_cnBatchForms2","_cnBatchForms3","module","controller","provider","run","exports","cnBatchFormsProvider","fieldType","fieldTypeHandlers","$get","cnBatchForms","cnFlexFormConfig","cnFlexFormService","cnFlexFormTypes","sfPath","$rootScope","$timeout","cnModal","augmentSchema","schema","model","length","service","BatchForms","create","constructor","addMeta","addToSchema","clearSchemaDefault","createDirtyCheck","createBatchField","getChangedModels","getEditModeLegends","getFormFromRegister","getModelValues","getSchemaDefault","getTitleMap","handleLinks","onFieldScope","onReprocessField","processCondition","processDiff","processSchemaDiff","processSchema","processField","processItems","processDate","processDefault","processLinkList","processLinks","processNumber","processSelect","processToggle","registerFieldWatch","resetDefaults","restoreDefaults","setValidation","setValue","showResults","instance","instances","defaults","editModes","fieldRegister","onProcessDiff","bind","forms","i","form","splice","$on","console","info","event","scope","getKey","startsWith","ngModel","$pristine","register","updateSchema","links","filter","batchConfig","ls","hardLinks","call","diff","flatten","concat","properties","_this","props","keys","prop","has","items","every","l","includes","fields","child","htmlClass","batchField","dirtyCheck","replace","_key","_placeholder","placeholder","getSchema","required","resolve","conditionals","getFieldType","isString","isObject","ogValues","allEqual","first","parseExpression","set","clone","uniqueId","watch","item","push","resolution","_this2","map","capitalize","def","titleMap","btnClass","onSelect","val","prev","_this3","isUndefined","_minItems","minItems","options","tv4Validation","$error","k","indexOf","$setValidity","re","RegExp","test","_this4","notitle","$broadcast","fieldWatch","get","debug","isArray","e","list","hard","_this5","_this6","without","path","parse","depth","_this7","each","dirty","mode","assignable","getAssignable","fullPath","update","original","originalVal","uniqVal","uniq","trim","add","subtract","replaceString","withString","expression","escapeRegExp","setPlaceholder","noBatchPlaceholder","_this8","silent","append","prepend","stringReplace","configKey","replaceKey","withKey","stringReplaceField","extend","setNestedPlaceholder","_this9","copy","remove","chain","_this10","undefined","__batchConfig","__dirtyCheck","_this11","setNoPlaceholder","_this12","_this13","modal","close","open","controllerAs","meta","legends","decrease","increase","string","number","url","array","cn-autocomplete","cn-currency","cn-datetimepicker","cn-toggle","$inject"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\nvar _batchResults = require('./batch-results');\n\nvar _batchResults2 = _interopRequireDefault(_batchResults);\n\nvar _cnBatchForms = require('./cn-batch-forms.routes');\n\nvar _cnBatchForms2 = require('./cn-batch-forms.service');\n\nvar _cnBatchForms3 = _interopRequireDefault(_cnBatchForms2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nangular.module('cn.batch-forms', ['schemaForm', 'cn.flex-form', 'cn.util', 'ui.router']).controller('BatchResults', _batchResults2.default).provider('cnBatchForms', _cnBatchForms3.default).config(_cnBatchForms.cnBatchFormsConfig).run(_cnBatchForms.addTemplates);\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = BatchResults;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction BatchResults($state, parent, $stateParams) {\n  'ngInject';\n\n  var vm = this;\n  vm.parent = parent;\n  vm.results = vm.parent.results;\n  vm.originals = vm.parent.models;\n  vm.config = vm.parent.resultsConfig;\n  vm.displayName = vm.config && vm.config.displayName || 'name';\n  vm.formName = $state.current.name;\n  vm.text = vm.config.text;\n\n  vm.activate = activate;\n  vm.showEdit = showEdit;\n  vm.submit = submit;\n\n  vm.activate();\n\n  //////////\n\n  function activate() {\n    if (vm.config.idParam) {\n      vm.results.forEach(function (result, index) {\n        if (_.isFunction(vm.config.buildEditSref)) {\n          result.editSref = vm.config.buildEditSref(result.body, index);\n        } else {\n          var params = _.assign({}, $stateParams, _defineProperty({}, vm.config.idParam, vm.originals[index].id));\n          result.editSref = $state.current.name + '(' + angular.toJson(params) + ')';\n        }\n      });\n    }\n\n    vm.headerConfig = {\n      title: {\n        main: 'Batch Results'\n      },\n      actionConfig: {\n        actions: [{\n          text: 'Continue Editing'\n        }, {\n          text: 'Done',\n          handler: function handler() {\n            if (vm.config && vm.config.returnState) {\n              $state.go(vm.config.returnState.name, vm.config.returnState.params);\n            }\n          }\n        }]\n      },\n      noData: true\n    };\n  }\n\n  function showEdit(result) {\n    return result.editSref && _.inRange(result.status, 200, 299);\n  }\n\n  function submit(handler) {\n    vm.parent.closeModal();\n    if (handler) {\n      handler();\n    }\n  }\n}\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cnBatchFormsConfig = cnBatchFormsConfig;\nexports.addTemplates = addTemplates;\nvar TYPE = 'cn-dirty-check';\nvar TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\nfunction cnBatchFormsConfig(cnFlexFormServiceProvider) {\n  'ngInject';\n\n  cnFlexFormServiceProvider.registerField({\n    condition: function condition(field) {\n      return field.type === TYPE;\n    },\n    handler: function handler(field) {/*console.log('field.readonly:', field.key, field.readonly)*/},\n    type: TYPE,\n    templateUrl: TEMPLATE_URL\n  });\n}\n\nfunction addTemplates($templateCache) {\n  'ngInject';\n\n  $templateCache.put(TEMPLATE_URL, '\\\n      <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n        <input type=\"checkbox\"\\\n               ng-model=\"$$value$$\"\\\n               ng-model-options=\"form.ngModelOptions\"\\\n               sf-changed=\"form\"\\\n               ng-disabled=\"form.readonly\"\\\n               name=\"{{form.key.slice(-1)[0]}}\"/>\\\n      </div>');\n}\n'use strict';\n\n(function () {\n  angular.module('cn.batch-forms').provider('cnBatchForms', cnBatchFormsProvider);\n\n  var fieldTypeHandlers = {\n    'string': 'processDefault',\n    'number': 'processNumber',\n    'url': 'processDefault',\n    'array': 'processSelect',\n    'cn-autocomplete': 'processSelect',\n    'cn-currency': 'processNumber',\n    'cn-datetimepicker': 'processDate',\n    'cn-toggle': 'processToggle'\n  };\n\n  function cnBatchFormsProvider() {\n    return {\n      registerField: registerField,\n      $get: cnBatchForms\n    };\n\n    ///////////\n\n    function registerField(fieldType) {\n      if (fieldType.handler) {\n        fieldTypeHandlers[fieldType.type] = fieldType.handler;\n      }\n    }\n  }\n\n  cnBatchForms.$inject = ['cnFlexFormConfig', 'cnFlexFormService', 'cnFlexFormTypes', 'sfPath', '$rootScope', '$timeout', 'cnModal'];\n  function cnBatchForms(cnFlexFormConfig, cnFlexFormService, cnFlexFormTypes, sfPath, $rootScope, $timeout, cnModal) {\n\n    var instances = 0;\n\n    return {\n      augmentSchema: augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if (!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor: constructor,\n        addMeta: addMeta,\n        addToSchema: addToSchema,\n        clearSchemaDefault: clearSchemaDefault,\n        closeModal: closeModal,\n        createDirtyCheck: createDirtyCheck,\n        createBatchField: createBatchField,\n        getChangedModels: getChangedModels,\n        getEditModeLegends: getEditModeLegends,\n        getFormFromRegister: getFormFromRegister,\n        getModelValues: getModelValues,\n        getSchemaDefault: getSchemaDefault,\n        getTitleMap: getTitleMap,\n        handleLinks: handleLinks,\n        onFieldScope: onFieldScope,\n        onReprocessField: onReprocessField,\n        processCondition: processCondition,\n        processDiff: processDiff,\n        processSchemaDiff: processSchemaDiff,\n        processSchema: processSchema,\n        processField: processField,\n        processItems: processItems,\n        processDate: processDate,\n        processDefault: processDefault,\n        processLinkList: processLinkList,\n        processLinks: processLinks,\n        processNumber: processNumber,\n        processSelect: processSelect,\n        processToggle: processToggle,\n        registerFieldWatch: registerFieldWatch,\n        resetDefaults: resetDefaults,\n        restoreDefaults: restoreDefaults,\n        setValidation: setValidation,\n        setValue: setValue,\n        showResults: showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n\n      this.instance = instances;\n      //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.defaults = {};\n      this.editModes = {};\n      this.fieldRegister = {};\n\n      this.processSchema();\n      cnFlexFormConfig.onProcessDiff = this.processDiff.bind(this);\n\n      if (schema.forms) {\n        var i = schema.forms.length - 1;\n        while (i > -1) {\n          this.processItems(schema.forms[i].form);\n          if (!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n      } else {\n        this.processItems(schema.form);\n      }\n\n      this.addMeta();\n      this.processLinks();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n      $rootScope.$on('cnFlexFormReprocessField', this.onReprocessField.bind(this));\n\n      console.info('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      var key = cnFlexFormService.getKey(scope.form.key);\n\n      if (!key.startsWith('__')) {\n        if (!this.fieldRegister[key]) this.fieldRegister[key] = {};\n        var register = this.fieldRegister[key];\n        register.ngModel = scope.ngModel;\n        register.scope = scope;\n\n        if (!this.fieldRegister[key].field) this.fieldRegister[key].field = scope.form;\n      }\n\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if (scope.form.key[0] === '__batchConfig') {\n          scope.ngModel.$pristine = false;\n        }\n    }\n\n    function processDiff(schema) {\n      var updateSchema = schema.params.updateSchema;\n      var links = _.filter(schema.batchConfig.links, function (ls) {\n        return _.startsWith(ls, updateSchema);\n      });\n      var hardLinks = _.filter(schema.batchConfig.hardLinks, function (ls) {\n        return _.startsWith(ls, updateSchema);\n      });\n      processSchemaDiff.call(this, schema.diff.schema, _.flatten(links.concat(hardLinks)));\n    }\n\n    function processSchemaDiff(properties, links) {\n      var _this = this;\n\n      var props = _.keys(properties);\n      _.forEach(props, function (prop) {\n        if (_.has(properties[prop], \"properties\")) {\n          processSchemaDiff.call(_this, properties[prop].properties, links);\n        } else if (_.has(properties[prop], \"items\")) {\n          processSchemaDiff.call(_this, properties[prop].items, links);\n        } else if (_.every(links, function (l) {\n          return !_.includes(l, prop);\n        })) {\n          clearSchemaDefault.call(_this, properties[prop]);\n        }\n      });\n    }\n\n    function processItems(fields) {\n      var i = fields.length - 1;\n      while (i > -1) {\n        var child = this.processField(fields[i]);\n        if (child && child.batchConfig) {\n          if (child.type !== 'fieldset') {\n            child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n          }\n          var batchField = this.createBatchField(child);\n          var dirtyCheck = child.key && this.createDirtyCheck(child);\n          // add mode buttons after field\n          fields[i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n            condition: this.processCondition(child.condition)\n          };\n          delete child.condition;\n          if (child.key) {\n            if (!this.fieldRegister[child.key]) this.fieldRegister[child.key] = {};\n            this.fieldRegister[child.key].field = child;\n            this.fieldRegister[child.key].dirtyCheck = dirtyCheck;\n          }\n        }\n        if (!child) {\n          // remove field if batch isn't supported by it or children\n          fields.splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processCondition(condition) {\n      return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n    }\n\n    function processField(field) {\n      if (field.key) {\n        if (!field.batchConfig) return false;\n\n        field._key = field.key;\n        field._placeholder = field.placeholder;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n\n        delete field.required;\n        if (field.resolve) delete field.resolve.required;\n        if (field.conditionals) delete field.conditionals.required;\n\n        var fieldType = cnFlexFormTypes.getFieldType(field);\n        var handler = fieldTypeHandlers[fieldType];\n\n        if (handler) {\n          if (_.isString(handler)) handler = this[handler];\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          if (_.allEqual(field.batchConfig.ogValues)) {\n            var key = '__ogValues[\"' + field.key + '\"]';\n            var first = _.first(field.batchConfig.ogValues);\n            cnFlexFormService.parseExpression(key, this.model).set(first);\n          }\n\n          return handler.bind(this)(field);\n        } else return false;\n      }\n\n      if (field.items) {\n        if (field.batchConfig) {\n          field.items.forEach(function (child) {\n            child.batchConfig = _.clone(field.batchConfig);\n          });\n        }\n        this.processItems(field.items);\n        if (!field.items.length) return false;\n\n        if (field.batchConfig) {\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.key = 'component_' + _.uniqueId();\n          field.batchConfig.watch = [];\n\n          field.items.forEach(function (item, i) {\n            var child = item.items[0];\n            if (!i) {\n              field.batchConfig.editModes = child.batchConfig.editModes;\n              field.batchConfig.default = child.batchConfig.default;\n            }\n            field.batchConfig.watch.push({\n              resolution: 'model.__batchConfig[\"' + child.key + '\"] = model.__batchConfig[\"' + field.batchConfig.key + '\"]'\n            });\n            //item.items[2].condition = 'false';\n            item.items[2].htmlClass = 'hide';\n          });\n        }\n      }\n      return field;\n    }\n\n    function getTitleMap(editModes) {\n      var _this2 = this;\n\n      editModes = editModes || ['replace'];\n\n      return editModes.map(function (value) {\n        _this2.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value: value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      var batchConfig = field.batchConfig;\n      var key = '__batchConfig[\"' + (field.key || batchConfig.key) + '\"]';\n\n      var batchField = {\n        key: key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check',\n        watch: batchConfig.watch || []\n      };\n\n      if (batchField.titleMap.length === 1) {\n        //batchField.condition = 'false';\n        batchField.htmlClass = 'hide';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(batchConfig.default)\n      });\n\n      if (batchConfig.onSelect) {\n        batchField.watch.push({\n          resolution: function resolution(val, prev) {\n            if (!val) return;\n            batchConfig.onSelect[val](prev);\n          }\n        });\n      }\n\n      return batchField;\n    }\n\n    function setValidation(field, val) {\n      var _this3 = this;\n\n      var key = cnFlexFormService.getKey(field.key);\n\n      if (field.schema && field.schema.type === 'array') {\n        if (_.isUndefined(field.schema._minItems)) field.schema._minItems = field.schema.minItems;\n        field.schema.minItems = val ? field.schema._minItems : 0;\n      }\n\n      var forms = key ? this.getFormFromRegister(key) : [];\n\n      forms.forEach(function (form) {\n        if (form.scope) {\n          form.scope.options = form.scope.options || {};\n          form.scope.options.tv4Validation = val;\n          Object.keys(form.ngModel.$error).filter(function (k) {\n            return k.indexOf('tv4-') === 0;\n          }).forEach(function (k) {\n            form.ngModel.$setValidity(k, true);\n          });\n        }\n      });\n      if (field.items) {\n        field.items.forEach(function (i) {\n          return _this3.setValidation(i, val);\n        });\n      }\n    }\n\n    function getFormFromRegister(key) {\n      if (key.includes('[]')) {\n        var re = new RegExp(key.replace('[]', '\\\\[\\\\d*\\\\]'));\n        return _.filter(this.fieldRegister, function (form, k) {\n          return re.test(k);\n        });\n      } else if (this.fieldRegister[key]) {\n        return [this.fieldRegister[key]];\n      } else return [];\n    }\n\n    function createDirtyCheck(field) {\n      var _this4 = this;\n\n      //let path = sfPath.parse(field.key);\n      var key = '__dirtyCheck[\"' + (field.key || field.batchConfig.key) + '\"]';\n      //let child = path.length > 1;\n      var htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if (field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      var dirtyCheck = {\n        key: key,\n        htmlClass: htmlClass,\n        type: 'cn-dirty-check',\n        watch: [{\n          resolution: function resolution(val) {\n            //$timeout(() => {\n            _this4.setValidation(field, val);\n            $rootScope.$broadcast('schemaFormValidate');\n            //});\n          }\n        }]\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      dirtyCheck.fieldWatch = {\n        resolution: function resolution(val) {\n          var register = _this4.fieldRegister[field._key];\n          if (register) {\n            if (_.get(register, 'ngModel.$dirty')) {\n              cnFlexFormService.parseExpression(key, _this4.model).set(true);\n            }\n          }\n          // debug\n          else {\n              console.debug('no register:', field, _this4.fieldRegister);\n            }\n        }\n      };\n\n      this.registerFieldWatch(field, dirtyCheck.fieldWatch);\n\n      return dirtyCheck;\n    }\n\n    function registerFieldWatch(field, watch) {\n      if (field.watch) {\n        if (!_.isArray(field.watch)) field.watch = [field.watch];\n      } else {\n        field.watch = [];\n      }\n\n      field.watch.push(watch);\n    }\n\n    function onReprocessField(e, key) {\n      var register = this.fieldRegister[key];\n      if (!register) return console.debug('no register:', key, this.fieldRegister);\n      if (register.dirtyCheck) this.registerFieldWatch(register.field, register.dirtyCheck.fieldWatch);\n    }\n\n    function handleLinks(list, hard) {\n      var _this5 = this;\n\n      return function (val) {\n        list.forEach(function (key) {\n          if (!hard) {\n            var register = _this5.fieldRegister[key];\n            if (!_.get(register, 'ngModel.$dirty')) return;\n          }\n          cnFlexFormService.parseExpression('__dirtyCheck[\"' + key + '\"]', _this5.model).set(val);\n        });\n      };\n    }\n\n    function processLinkList(list, hard) {\n      var _this6 = this;\n\n      list.forEach(function (keys) {\n        keys.forEach(function (key) {\n          var register = _this6.fieldRegister[key];\n          if (!register) {\n            console.debug('no register:', key);\n            return;\n          }\n          var field = register.field,\n              dirtyCheck = register.dirtyCheck;\n\n          var handler = _this6.handleLinks(_.without(keys, key), hard);\n          field.watch = field.watch || [];\n          dirtyCheck.watch = dirtyCheck.watch || [];\n          field.watch.push({\n            resolution: function resolution() {\n              handler(true);\n            }\n          });\n          dirtyCheck.watch.push({ resolution: handler });\n        });\n      });\n    }\n\n    function processLinks() {\n      if (this.schema.batchConfig) {\n        if (this.schema.batchConfig.links) {\n          this.processLinkList(this.schema.batchConfig.links);\n        }\n        if (this.schema.batchConfig.hardLinks) {\n          this.processLinkList(this.schema.batchConfig.hardLinks, true);\n        }\n      }\n    }\n\n    function addToSchema(key, schema) {\n      var path = sfPath.parse(key);\n      var depth = this.schema.schema;\n\n      path.forEach(function (k, i) {\n        if (i === path.length - 1) {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        } else if (k === '') {\n          if (!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        } else {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          if (!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(function (model) {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      var _this7 = this;\n\n      var models = [];\n\n      _.each(this.fieldRegister, function (register, key) {\n        var dirty = cnFlexFormService.parseExpression('__dirtyCheck[\"' + key + '\"]', _this7.model).get();\n\n        if (!dirty) return;\n\n        var mode = cnFlexFormService.parseExpression('__batchConfig[\"' + key + '\"]', _this7.model).get();\n\n        _this7.models.forEach(function (model, i) {\n          models[i] = models[i] || {};\n\n          var path = sfPath.parse(key);\n          // if column is json, we want to merge updates into model's current json value\n          // so we copy the current value if we haven't already (on a previous iteration)\n          if (path.length > 1 && !models[i][path[0]]) {\n            models[i][path[0]] = _this7.models[i][path[0]];\n          }\n\n          var assignable = cnFlexFormService.parseExpression(key, _this7.models[i]).getAssignable();\n\n          // if column is json and model's current value doesn't have parent property for\n          // key we're updating, just copy over entire key instead of using specific\n          // edit mode logic for new value\n          if (assignable.fullPath !== key) {\n            var val = cnFlexFormService.parseExpression(assignable.fullPath, _this7.model).get();\n\n            cnFlexFormService.parseExpression(assignable.fullPath, _this7.models[i]).set(val);\n          } else {\n            var _val = cnFlexFormService.parseExpression(key, _this7.model).get();\n            var update = cnFlexFormService.parseExpression(key, models[i]);\n            var original = cnFlexFormService.parseExpression(key, _this7.models[i]);\n\n            _this7.setValue(_val, update, original, mode);\n          }\n        });\n      });\n\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if (mode === 'replace') {\n        update.set(val);\n      } else if (mode === 'append') {\n        var originalVal = original.get();\n        if (_.isArray(originalVal)) {\n          var uniqVal = _([]).concat(originalVal, val).uniq(function (value) {\n            return value.key || angular.toJson(value);\n          }).value();\n\n          update.set(uniqVal);\n        } else if (_.isString(originalVal)) {\n          update.set(originalVal + ' ' + val.trim());\n        } else {\n          update.set(val);\n        }\n      } else if (mode === 'prepend') {\n        var _originalVal = original.get();\n        if (_.isArray(_originalVal)) {\n          update.set(val.concat(_originalVal));\n        } else if (_.isString(_originalVal)) {\n          update.set(val.trim() + ' ' + _originalVal);\n        } else {\n          update.set(val);\n        }\n      } else if (mode === 'increase') {\n        update.set(_.add(original.get() || 0, val));\n      } else if (mode === 'decrease') {\n        update.set(_.subtract(original.get() || 0, val));\n      } else if (mode === 'stringReplace' && original.get()) {\n        var key = original.path().key;\n        var replaceString = cnFlexFormService.parseExpression('_replace_' + key, this.model);\n        var withString = cnFlexFormService.parseExpression('_with_' + key, this.model);\n        var expression = new RegExp(_.escapeRegExp(replaceString.get()), \"gi\");\n        update.set(original.get().replace(expression, withString.get()));\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function setPlaceholder(field, val) {\n      if (field.noBatchPlaceholder) return;\n      field.placeholder = val;\n    }\n\n    function processDefault(field) {\n      var _this8 = this;\n\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append', 'stringReplace'];\n\n      config.default = config.default || 'append';\n\n      if (!config.editModes.includes(config.default)) {\n        config.default = config.editModes[0];\n      }\n\n      config.onSelect = {\n        replace: function replace() {\n          if (_.allEqual(config.ogValues)) {\n            cnFlexFormService.parseExpression(field.key, _this8.model).set(_.first(config.ogValues), { silent: true });\n          } else {\n            setPlaceholder(field, '—');\n          }\n        },\n        append: function append() {\n          setPlaceholder(field, '');\n        },\n        prepend: function prepend() {\n          setPlaceholder(field, '');\n        },\n        stringReplace: function stringReplace() {}\n      };\n\n      if (config.editModes.includes(config.default)) {\n        config.onSelect[config.default]();\n      }\n\n      if (config.editModes.includes('stringReplace')) {\n        var dirtyCheck = this.createDirtyCheck(field);\n        var configKey = '__batchConfig[\"' + (field.key || field.batchConfig.key) + '\"]';\n        var replaceKey = '_replace_' + (field.key || field.batchConfig.key);\n        var withKey = '_with_' + (field.key || field.batchConfig.key);\n        var stringReplaceField = {\n          type: 'component',\n          items: [{\n            key: replaceKey,\n            title: 'Replace',\n            watch: {\n              resolution: 'model.' + dirtyCheck.key + ' = true'\n            }\n          }, {\n            key: withKey,\n            title: 'With',\n            watch: {\n              resolution: 'model.' + dirtyCheck.key + ' = true'\n            }\n          }],\n          condition: 'model.' + configKey + ' === \\'stringReplace\\''\n        };\n\n        config.key = field.key;\n\n        this.addToSchema(replaceKey, { type: 'string' });\n        this.addToSchema(withKey, { type: 'string' });\n\n        return {\n          type: 'section',\n          condition: field.condition,\n          batchConfig: config,\n          schema: field.schema,\n          items: [_.extend(field, { condition: 'model.' + configKey + ' !== \\'stringReplace\\'' }), stringReplaceField, dirtyCheck]\n        };\n      }\n\n      return field;\n    }\n\n    function processNumber(field) {\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues), { silent: true });\n      } else {\n        field.placeholder = '—';\n      }\n      return field;\n    }\n\n    function setNestedPlaceholder(field) {\n      if (field.items) {\n        //field.items.forEach(setNestedPlaceholder);\n      } else {\n        setPlaceholder(field, '—');\n      }\n    }\n\n    function processSelect(field) {\n      var _this9 = this;\n\n      var type = field.schema.type;\n      var config = field.batchConfig;\n\n      if (type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'replace';\n\n        if (_.allEqual(config.ogValues)) {\n          // fucking angular infdigs\n          $timeout(function () {\n            return cnFlexFormService.parseExpression(field.key, _this9.model).set(_.first(angular.copy(config.ogValues)), { silent: true });\n          });\n        } else {\n          setNestedPlaceholder(field);\n        }\n\n        config.onSelect = {\n          replace: function replace(prev) {\n            if (prev && prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, _this9.model).set([]);\n            }\n          },\n          append: function append(prev) {\n            if (prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, _this9.model).set([]);\n            }\n          },\n          remove: function remove() {\n            var val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, _this9.model).set(val, { silent: true });\n          }\n        };\n      } else {\n\n        var first = _.first(config.ogValues);\n        //TODO: dynamically send back data\n        if (first && _.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(first, { silent: true });\n        }\n\n        if (!field.placeholder) {\n          setPlaceholder(field, '—');\n        }\n      }\n      return field;\n    }\n\n    function processDate(field) {\n      var config = field.batchConfig;\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues, { silent: true }));\n      } else {\n        setPlaceholder(field, '—');\n      }\n      return field;\n    }\n\n    function processToggle(field) {\n      var config = field.batchConfig;\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues, { silent: true }));\n      }\n      return field;\n    }\n\n    function processSchema() {\n      var _this10 = this;\n\n      this.schema.schema.required = undefined;\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n\n      $rootScope.$on('schemaFormBeforeAppendToArray', function (e, form) {\n        return _this10.restoreDefaults(form);\n      });\n      $rootScope.$on('schemaFormAfterAppendToArray', function (e, form) {\n        return _this10.resetDefaults(form);\n      });\n    }\n\n    function restoreDefaults(form) {\n      var _this11 = this;\n\n      if (!form.items) return;\n      form.items.forEach(function (item) {\n        if (item.key) {\n          if (item.schema) {\n            var key = cnFlexFormService.getKey(item.key).replace(/\\[\\d+]/g, '[]');\n            item.schema.default = _this11.defaults[key];\n          }\n        }\n        _this11.restoreDefaults(item);\n      });\n      setNoPlaceholder(form.items);\n    }\n\n    function setNoPlaceholder(items) {\n      _.each(items, function (item) {\n        item.placeholder = item._placeholder;\n        item.noBatchPlaceholder = true;\n        if (item.items) setNoPlaceholder(item.items);\n      });\n    }\n\n    function resetDefaults(form) {\n      var _this12 = this;\n\n      if (!form.items) return;\n      form.items.forEach(function (item) {\n        if (item.schema) {\n          item.schema.default = undefined;\n        }\n        _this12.resetDefaults(item);\n      });\n    }\n\n    function clearSchemaDefault(schema, key) {\n      // save for hydrating newly added array items\n      this.defaults[key] = schema.default;\n\n      // then remove because we don't want to override saved values with defaults\n      schema.default = undefined;\n\n      if (schema.type === 'object' && schema.properties) {\n        schema.required = undefined;\n        // _.each(schema.properties, this.clearSchemaDefault.bind(this));\n        for (var k in schema.properties) {\n          this.clearSchemaDefault(schema.properties[k], key + '.' + k);\n        }\n      } else if (schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items, key + '[]');\n      }\n    }\n\n    function showResults(results, config) {\n      var _this13 = this;\n\n      this.results = results;\n      this.resultsConfig = config;\n\n      if (this.modal) {\n        this.modal.close();\n      }\n\n      this.modal = cnModal.open({\n        controller: 'BatchResults',\n        controllerAs: 'vm',\n        templateUrl: 'cn-batch-forms/batch-results.html',\n        resolve: {\n          parent: function parent() {\n            return _this13;\n          }\n        }\n      });\n    }\n\n    function closeModal() {\n      this.modal.close();\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = '\\n          <div class=\"well\">\\n            <h5>Edit Modes</h5>\\n            <p>Some types of fields allow you to apply batch changes in\\n            different ways:</p>\\n            <dl>\\n              <dt>Replace:</dt>\\n              <dd>Replace all the original values\\n              with the new value. <em>(If you don\\'t see an <b>Edit Mode</b> option\\n              for a field, this will be the default)</em></dd>\\n            </dl>\\n            ' + this.getEditModeLegends() + '\\n          </div>';\n    }\n\n    function getEditModeLegends() {\n      var legends = '';\n\n      if (this.editModes.prepend) {\n        legends += '\\n            <dl>\\n              <dt>Prepend:</dt>\\n              <dd>Add the new value to the start of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.append) {\n        legends += '\\n            <dl>\\n              <dt>Append:</dt>\\n              <dd>Affix the new value at the end of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.decrease) {\n        legends += '\\n            <dl>\\n              <dt>Decrease:</dt>\\n              <dd>Subtract the given value from the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.increase) {\n        legends += '\\n            <dl>\\n              <dt>Increase:</dt>\\n              <dd>Add the given value to the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      return legends;\n    }\n  }\n})();\n\"use strict\";\n\nangular.module(\"cn.batch-forms\").run([\"$templateCache\", function ($templateCache) {\n  $templateCache.put(\"cn-batch-forms/batch-results.html\", \"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.submit(handler)\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list card-flex\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n\\n    <div class=\\\"padding-20\\\"\\n         ng-if=\\\"vm.text\\\">\\n      <p class=\\\"no-margin text-mute\\\"\\n         ng-bind-html=\\\"vm.text\\\">\\n      </p>\\n    </div>\\n\\n    <table class=\\\"table gutterless\\\">\\n      <tbody>\\n      <tr ng-repeat=\\\"result in vm.results\\\">\\n        <td class=\\\"col-sm-10\\\">\\n          <h6 ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{result.body.id}})</span>\\n          </h6>\\n          <h6 ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{vm.originals[$index].id}})</span>\\n          </h6>\\n          <p ng-class=\\\"{\\n               \\'text-danger\\': result.status != 200,\\n               \\'text-primary\\': result.status == 200\\n             }\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n            {{result.status == 200 ? \\'updated successfully\\' : result.body.message}}\\n          </p>\\n        </td>\\n        <td class=\\\"col-sm-2 text-center\\\">\\n          <a class=\\\"btn btn-sm btn-transparent\\\"\\n             ng-show=\\\"vm.showEdit(result)\\\"\\n             ui-sref=\\\"{{ result.editSref }}\\\">\\n            <i class=\\\"icn-edit\\\"></i>\\n          </a>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\");\n}]);","export default function BatchResults($state, parent, $stateParams) {\n  'ngInject';\n\n  var vm = this;\n  vm.parent = parent;\n  vm.results = vm.parent.results;\n  vm.originals = vm.parent.models;\n  vm.config = vm.parent.resultsConfig;\n  vm.displayName = vm.config && vm.config.displayName || 'name';\n  vm.formName = $state.current.name;\n  vm.text = vm.config.text;\n\n  vm.activate = activate;\n  vm.showEdit = showEdit;\n  vm.submit = submit;\n\n  vm.activate();\n\n  //////////\n\n  function activate() {\n    if (vm.config.idParam) {\n      vm.results.forEach((result, index) => {\n        if (_.isFunction(vm.config.buildEditSref)) {\n          result.editSref = vm.config.buildEditSref(result.body, index);\n        }\n        else {\n          const params = _.assign({}, $stateParams, {[vm.config.idParam]: vm.originals[index].id});\n          result.editSref = `${$state.current.name}(${angular.toJson(params)})`;\n        }\n      });\n    }\n\n    vm.headerConfig = {\n      title: {\n        main: 'Batch Results'\n      },\n      actionConfig: {\n        actions: [{\n          text: 'Continue Editing'\n        }, {\n          text: 'Done',\n          handler: () => {\n            if(vm.config && vm.config.returnState) {\n              $state.go(vm.config.returnState.name, vm.config.returnState.params);\n            }\n          }\n        }]\n      },\n      noData: true\n    };\n\n  }\n\n  function showEdit(result) {\n    return result.editSref && _.inRange(result.status, 200, 299);\n  }\n\n  function submit(handler) {\n    vm.parent.closeModal();\n    if(handler) {\n      handler();\n    }\n  }\n\n}\n","const TYPE = 'cn-dirty-check';\nconst TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\nexport function cnBatchFormsConfig(cnFlexFormServiceProvider) {\n  'ngInject';\n  cnFlexFormServiceProvider.registerField({\n    condition: (field) => field.type === TYPE,\n    handler: (field) => {/*console.log('field.readonly:', field.key, field.readonly)*/},\n    type: TYPE,\n    templateUrl: TEMPLATE_URL\n  });\n}\n\nexport function addTemplates($templateCache) {\n  'ngInject';\n  $templateCache.put(\n      TEMPLATE_URL,\n      '\\\n      <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n        <input type=\"checkbox\"\\\n               ng-model=\"$$value$$\"\\\n               ng-model-options=\"form.ngModelOptions\"\\\n               sf-changed=\"form\"\\\n               ng-disabled=\"form.readonly\"\\\n               name=\"{{form.key.slice(-1)[0]}}\"/>\\\n      </div>'\n  );\n}\n","import BatchResults from './batch-results';\nimport { cnBatchFormsConfig, addTemplates } from './cn-batch-forms.routes';\nimport cnBatchFormsProvider from './cn-batch-forms.service';\n\nangular\n  .module('cn.batch-forms', [\n    'schemaForm',\n    'cn.flex-form',\n    'cn.util',\n    'ui.router'\n  ])\n  .controller('BatchResults', BatchResults)\n  .provider('cnBatchForms', cnBatchFormsProvider)\n  .config(cnBatchFormsConfig)\n  .run(addTemplates);\n","(function() {\n  angular\n      .module('cn.batch-forms')\n      .provider('cnBatchForms', cnBatchFormsProvider);\n\n  let fieldTypeHandlers = {\n    'string': 'processDefault',\n    'number': 'processNumber',\n    'url': 'processDefault',\n    'array': 'processSelect',\n    'cn-autocomplete': 'processSelect',\n    'cn-currency': 'processNumber',\n    'cn-datetimepicker': 'processDate',\n    'cn-toggle': 'processToggle'\n  };\n\n  function cnBatchFormsProvider() {\n    return {\n      registerField,\n      $get: cnBatchForms\n    };\n\n    ///////////\n\n    function registerField(fieldType) {\n      if(fieldType.handler) {\n        fieldTypeHandlers[fieldType.type] = fieldType.handler;\n      }\n    }\n  }\n\n  cnBatchForms.$inject = [\n    'cnFlexFormConfig',\n    'cnFlexFormService',\n    'cnFlexFormTypes',\n    'sfPath',\n    '$rootScope',\n    '$timeout',\n    'cnModal'\n  ];\n  function cnBatchForms(\n      cnFlexFormConfig,\n      cnFlexFormService,\n      cnFlexFormTypes,\n      sfPath,\n      $rootScope,\n      $timeout,\n      cnModal) {\n\n    let instances = 0;\n\n    return {\n      augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if(!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor,\n        addMeta,\n        addToSchema,\n        clearSchemaDefault,\n        closeModal,\n        createDirtyCheck,\n        createBatchField,\n        getChangedModels,\n        getEditModeLegends,\n        getFormFromRegister,\n        getModelValues,\n        getSchemaDefault,\n        getTitleMap,\n        handleLinks,\n        onFieldScope,\n        onReprocessField,\n        processCondition,\n        processDiff,\n        processSchemaDiff,\n        processSchema,\n        processField,\n        processItems,\n        processDate,\n        processDefault,\n        processLinkList,\n        processLinks,\n        processNumber,\n        processSelect,\n        processToggle,\n        registerFieldWatch,\n        resetDefaults,\n        restoreDefaults,\n        setValidation,\n        setValue,\n        showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n\n      this.instance = instances;\n      //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.defaults = {};\n      this.editModes = {};\n      this.fieldRegister = {};\n\n      this.processSchema();\n      cnFlexFormConfig.onProcessDiff = this.processDiff.bind(this);\n\n      if(schema.forms) {\n        let i = schema.forms.length - 1;\n        while(i > -1) {\n          this.processItems(schema.forms[i].form);\n          if(!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n      }\n      else {\n        this.processItems(schema.form);\n      }\n\n      this.addMeta();\n      this.processLinks();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n      $rootScope.$on('cnFlexFormReprocessField', this.onReprocessField.bind(this));\n\n      console.info('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      let key = cnFlexFormService.getKey(scope.form.key);\n\n      if(!key.startsWith('__')) {\n        if(!this.fieldRegister[key]) this.fieldRegister[key] = {};\n        const register = this.fieldRegister[key];\n        register.ngModel = scope.ngModel;\n        register.scope = scope;\n\n        if(!this.fieldRegister[key].field) this.fieldRegister[key].field = scope.form;\n      }\n\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if(scope.form.key[0] === '__batchConfig') {\n        scope.ngModel.$pristine = false;\n      }\n    }\n\n    function processDiff(schema) {\n      const updateSchema = schema.params.updateSchema;\n      const links = _.filter(schema.batchConfig.links, ls => _.startsWith(ls, updateSchema));\n      const hardLinks = _.filter(schema.batchConfig.hardLinks, ls => _.startsWith(ls, updateSchema));\n      processSchemaDiff.call(this, schema.diff.schema, _.flatten(links.concat(hardLinks)));\n    }\n\n    function processSchemaDiff(properties, links) {\n      const props = _.keys(properties);\n      _.forEach(props, (prop) => {\n        if (_.has(properties[prop], \"properties\")) {\n          processSchemaDiff.call(this, properties[prop].properties, links);\n        } else if (_.has(properties[prop], \"items\")) {\n          processSchemaDiff.call(this, properties[prop].items, links);\n        } else if (_.every(links, l => !_.includes(l, prop))) {\n          clearSchemaDefault.call(this, properties[prop]);\n        }\n      });\n    }\n\n    function processItems(fields) {\n      let i = fields.length - 1;\n      while(i > -1) {\n        const child = this.processField(fields[i]);\n        if(child && child.batchConfig) {\n          if(child.type !== 'fieldset') {\n            child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n          }\n          let batchField = this.createBatchField(child);\n          let dirtyCheck = child.key && this.createDirtyCheck(child);\n          // add mode buttons after field\n          fields[i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n            condition: this.processCondition(child.condition)\n          };\n          delete child.condition;\n          if(child.key) {\n            if(!this.fieldRegister[child.key]) this.fieldRegister[child.key] = {};\n            this.fieldRegister[child.key].field = child;\n            this.fieldRegister[child.key].dirtyCheck = dirtyCheck;\n          }\n        }\n        if(!child) {\n          // remove field if batch isn't supported by it or children\n          fields.splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processCondition(condition) {\n      return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n    }\n\n    function processField(field) {\n      if(field.key) {\n        if(!field.batchConfig) return false;\n\n        field._key = field.key;\n        field._placeholder = field.placeholder;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n\n        delete field.required;\n        if(field.resolve) delete field.resolve.required;\n        if(field.conditionals) delete field.conditionals.required;\n\n        let fieldType = cnFlexFormTypes.getFieldType(field);\n        let handler = fieldTypeHandlers[fieldType];\n\n        if(handler) {\n          if(_.isString(handler)) handler = this[handler];\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          if(_.allEqual(field.batchConfig.ogValues)) {\n            let key = `__ogValues[\"${field.key}\"]`;\n            let first = _.first(field.batchConfig.ogValues);\n            cnFlexFormService.parseExpression(key, this.model).set(first);\n          }\n\n          return handler.bind(this)(field);\n        }\n        else return false;\n      }\n\n      if(field.items) {\n        if(field.batchConfig) {\n          field.items.forEach(child => {\n            child.batchConfig = _.clone(field.batchConfig);\n          });\n        }\n        this.processItems(field.items);\n        if(!field.items.length) return false;\n\n        if(field.batchConfig) {\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.key = `component_${_.uniqueId()}`;\n          field.batchConfig.watch = [];\n\n          field.items.forEach((item, i) => {\n            let child = item.items[0];\n            if(!i) {\n              field.batchConfig.editModes = child.batchConfig.editModes;\n              field.batchConfig.default = child.batchConfig.default;\n            }\n            field.batchConfig.watch.push({\n              resolution: `model.__batchConfig[\"${child.key}\"] = model.__batchConfig[\"${field.batchConfig.key}\"]`\n            });\n            //item.items[2].condition = 'false';\n            item.items[2].htmlClass = 'hide';\n          });\n        }\n      }\n      return field;\n    }\n\n    function getTitleMap(editModes) {\n      editModes = editModes || ['replace'];\n\n      return editModes.map(value => {\n        this.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      let batchConfig = field.batchConfig;\n      let key = `__batchConfig[\"${field.key || batchConfig.key}\"]`;\n\n      let batchField = {\n        key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check',\n        watch: batchConfig.watch || []\n      };\n\n      if(batchField.titleMap.length === 1) {\n        //batchField.condition = 'false';\n        batchField.htmlClass = 'hide';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(batchConfig.default)\n      });\n\n      if(batchConfig.onSelect) {\n        batchField.watch.push({\n          resolution: (val, prev) => {\n            if(!val) return;\n            batchConfig.onSelect[val](prev);\n          }\n        });\n      }\n\n      return batchField;\n    }\n\n    function setValidation(field, val) {\n      let key = cnFlexFormService.getKey(field.key);\n\n      if(field.schema && field.schema.type === 'array') {\n        if(_.isUndefined(field.schema._minItems)) field.schema._minItems = field.schema.minItems;\n        field.schema.minItems = val ? field.schema._minItems : 0;\n      }\n\n      let forms = key ? this.getFormFromRegister(key) : [];\n\n      forms.forEach(form => {\n        if(form.scope) {\n          form.scope.options = form.scope.options || {};\n          form.scope.options.tv4Validation = val;\n          Object.keys(form.ngModel.$error)\n              .filter(function(k) {\n                return k.indexOf('tv4-') === 0;\n              })\n              .forEach(function(k) {\n                form.ngModel.$setValidity(k, true);\n              });\n        }\n      });\n      if(field.items) {\n        field.items.forEach(i => this.setValidation(i, val));\n      }\n    }\n\n    function getFormFromRegister(key) {\n      if(key.includes('[]')) {\n        let re = new RegExp(key.replace('[]', '\\\\[\\\\d*\\\\]'));\n        return _.filter(this.fieldRegister, (form, k) => {\n          return re.test(k);\n        });\n      }\n      else if(this.fieldRegister[key]) {\n        return [this.fieldRegister[key]];\n      } else return [];\n    }\n\n    function createDirtyCheck(field) {\n      //let path = sfPath.parse(field.key);\n      let key = `__dirtyCheck[\"${field.key || field.batchConfig.key}\"]`;\n      //let child = path.length > 1;\n      let htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if(field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      let dirtyCheck = {\n        key,\n        htmlClass,\n        type: 'cn-dirty-check',\n        watch: [{\n          resolution: (val) => {\n            //$timeout(() => {\n              this.setValidation(field, val);\n              $rootScope.$broadcast('schemaFormValidate');\n            //});\n          }\n        }]\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      dirtyCheck.fieldWatch = {\n        resolution: (val) => {\n            const register = this.fieldRegister[field._key];\n            if(register) {\n              if(_.get(register, 'ngModel.$dirty')) {\n                cnFlexFormService.parseExpression(key, this.model).set(true);\n              }\n            }\n            // debug\n            else {\n              console.debug('no register:', field, this.fieldRegister);\n            }\n        }\n      };\n\n      this.registerFieldWatch(field, dirtyCheck.fieldWatch);\n\n      return dirtyCheck;\n    }\n\n    function registerFieldWatch(field, watch) {\n      if(field.watch) {\n        if(!_.isArray(field.watch)) field.watch = [field.watch];\n      }\n      else {\n        field.watch = [];\n      }\n\n      field.watch.push(watch);\n    }\n\n    function onReprocessField(e, key) {\n      let register = this.fieldRegister[key];\n      if(!register) return console.debug('no register:', key, this.fieldRegister);\n      if(register.dirtyCheck) this.registerFieldWatch(register.field, register.dirtyCheck.fieldWatch);\n    }\n\n    function handleLinks(list, hard) {\n      return val => {\n        list.forEach(key => {\n          if(!hard) {\n            const register = this.fieldRegister[key];\n            if(!_.get(register, 'ngModel.$dirty')) return;\n          }\n          cnFlexFormService.parseExpression(`__dirtyCheck[\"${key}\"]`, this.model).set(val);\n        });\n      };\n    }\n\n    function processLinkList(list, hard) {\n      list.forEach(keys => {\n        keys.forEach(key => {\n          let register = this.fieldRegister[key];\n          if(!register) {\n            console.debug('no register:', key);\n            return;\n          }\n          let {field, dirtyCheck} = register;\n          let handler = this.handleLinks(_.without(keys, key), hard);\n          field.watch = field.watch || [];\n          dirtyCheck.watch = dirtyCheck.watch || [];\n          field.watch.push({resolution() {handler(true);}});\n          dirtyCheck.watch.push({resolution: handler});\n        });\n      });\n    }\n\n    function processLinks() {\n      if(this.schema.batchConfig) {\n        if(this.schema.batchConfig.links) {\n          this.processLinkList(this.schema.batchConfig.links);\n        }\n        if(this.schema.batchConfig.hardLinks) {\n          this.processLinkList(this.schema.batchConfig.hardLinks, true);\n        }\n      }\n    }\n\n    function addToSchema(key, schema) {\n      let path = sfPath.parse(key);\n      let depth = this.schema.schema;\n\n      path.forEach((k, i) => {\n        if(i === path.length - 1) {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        }\n        else if(k === '') {\n          if(!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        }\n        else {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          if(!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(model => {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      let models = [];\n\n      _.each(this.fieldRegister, (register, key) => {\n        let dirty = cnFlexFormService\n            .parseExpression(`__dirtyCheck[\"${key}\"]`, this.model)\n            .get();\n\n        if(!dirty) return;\n\n        let mode = cnFlexFormService\n            .parseExpression(`__batchConfig[\"${key}\"]`, this.model)\n            .get();\n\n        this.models.forEach((model, i) => {\n          models[i] = models[i] || {};\n\n          let path = sfPath.parse(key);\n          // if column is json, we want to merge updates into model's current json value\n          // so we copy the current value if we haven't already (on a previous iteration)\n          if(path.length > 1 && !models[i][path[0]]) {\n            models[i][path[0]] = this.models[i][path[0]];\n          }\n\n          let assignable = cnFlexFormService\n              .parseExpression(key, this.models[i])\n              .getAssignable();\n\n          // if column is json and model's current value doesn't have parent property for\n          // key we're updating, just copy over entire key instead of using specific\n          // edit mode logic for new value\n          if(assignable.fullPath !== key) {\n            let val = cnFlexFormService\n                .parseExpression(assignable.fullPath, this.model)\n                .get();\n\n            cnFlexFormService\n                .parseExpression(assignable.fullPath, this.models[i])\n                .set(val);\n          }\n          else {\n            let val = cnFlexFormService.parseExpression(key, this.model).get();\n            let update = cnFlexFormService.parseExpression(key, models[i]);\n            let original = cnFlexFormService.parseExpression(key, this.models[i]);\n\n            this.setValue(val, update, original, mode);\n          }\n        });\n      });\n\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if(mode === 'replace') {\n        update.set(val);\n      }\n      else if(mode === 'append') {\n        let originalVal = original.get();\n        if(_.isArray(originalVal)) {\n          const uniqVal = _([])\n            .concat(originalVal, val)\n            .uniq((value) => value.key || angular.toJson(value))\n            .value();\n\n          update.set(uniqVal);\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${originalVal} ${val.trim()}`);\n        }\n        else {\n          update.set(val);\n        }\n      }\n      else if(mode === 'prepend') {\n        let originalVal = original.get();\n        if(_.isArray(originalVal)) {\n          update.set(val.concat(originalVal));\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${val.trim()} ${originalVal}`);\n        }\n        else {\n          update.set(val);\n        }\n      }\n      else if(mode === 'increase') {\n        update.set(_.add(original.get() || 0, val));\n      }\n      else if(mode === 'decrease') {\n        update.set(_.subtract(original.get() || 0, val));\n      }\n      else if(mode === 'stringReplace' && original.get()) {\n        let key = original.path().key;\n        let replaceString = cnFlexFormService.parseExpression(`_replace_${key}`, this.model);\n        let withString = cnFlexFormService.parseExpression(`_with_${key}`, this.model);\n        let expression = new RegExp(_.escapeRegExp(replaceString.get()), \"gi\");\n        update.set(original.get().replace(expression, withString.get()));\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function setPlaceholder(field, val) {\n      if(field.noBatchPlaceholder) return;\n      field.placeholder = val;\n    }\n\n    function processDefault(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append', 'stringReplace'];\n\n      config.default = config.default || 'append';\n\n      if(!config.editModes.includes(config.default)) {\n        config.default = config.editModes[0];\n      }\n\n      config.onSelect = {\n        replace: () => {\n          if(_.allEqual(config.ogValues)) {\n            cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues), { silent: true });\n          }\n          else {\n            setPlaceholder(field, '—');\n          }\n        },\n        append: () => {\n          setPlaceholder(field, '');\n        },\n        prepend: () => {\n          setPlaceholder(field, '');\n        },\n        stringReplace: () => {}\n      };\n\n      if(config.editModes.includes(config.default)) {\n        config.onSelect[config.default]();\n      }\n\n      if(config.editModes.includes('stringReplace')) {\n        const dirtyCheck = this.createDirtyCheck(field);\n        let configKey = `__batchConfig[\"${field.key || field.batchConfig.key}\"]`;\n        let replaceKey = `_replace_${field.key || field.batchConfig.key}`;\n        let withKey = `_with_${field.key || field.batchConfig.key}`;\n        let stringReplaceField = {\n          type: 'component',\n          items: [\n          {\n            key: replaceKey,\n            title: 'Replace',\n            watch: {\n              resolution: `model.${dirtyCheck.key} = true`\n            }\n          }, {\n            key: withKey,\n            title: 'With',\n            watch: {\n              resolution: `model.${dirtyCheck.key} = true`\n            }\n          }],\n          condition: `model.${configKey} === 'stringReplace'`\n        };\n\n        config.key = field.key;\n\n        this.addToSchema(replaceKey, { type: 'string' });\n        this.addToSchema(withKey, { type: 'string' });\n\n\n        return {\n          type: 'section',\n          condition: field.condition,\n          batchConfig: config,\n          schema: field.schema,\n          items: [_.extend(field, {condition: `model.${configKey} !== 'stringReplace'`}), stringReplaceField, dirtyCheck]\n        };\n      }\n\n      return field;\n    }\n\n    function processNumber(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues), { silent: true });\n      }\n      else {\n        field.placeholder = '—';\n      }\n      return field;\n    }\n\n    function setNestedPlaceholder(field) {\n      if(field.items) {\n        //field.items.forEach(setNestedPlaceholder);\n      }\n      else {\n        setPlaceholder(field, '—');\n      }\n    }\n\n    function processSelect(field) {\n      let type = field.schema.type;\n      let config = field.batchConfig;\n\n      if(type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'replace';\n\n        if(_.allEqual(config.ogValues)) {\n          // fucking angular infdigs\n          $timeout(() =>\n            cnFlexFormService.parseExpression(field.key, this.model).set(_.first(angular.copy(config.ogValues)), { silent: true })\n          );\n        }\n        else {\n          setNestedPlaceholder(field);\n        }\n\n        config.onSelect = {\n          replace: (prev) => {\n            if(prev && prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          append: (prev) => {\n            if(prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          remove: () => {\n            let val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, this.model).set(val, { silent: true });\n          }\n        };\n      }\n      else {\n\n        let first = _.first(config.ogValues);\n        //TODO: dynamically send back data\n        if(first && _.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(first, { silent: true });\n        }\n\n        if(!field.placeholder) {\n          setPlaceholder(field, '—');\n        }\n      }\n      return field;\n    }\n\n    function processDate(field) {\n      let config = field.batchConfig;\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues, { silent: true }));\n      }\n      else {\n        setPlaceholder(field, '—');\n      }\n      return field;\n    }\n\n    function processToggle(field) {\n      let config = field.batchConfig;\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues, { silent: true }));\n      }\n      return field;\n    }\n\n    function processSchema() {\n      this.schema.schema.required = undefined;\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n\n      $rootScope.$on('schemaFormBeforeAppendToArray', (e, form) => this.restoreDefaults(form));\n      $rootScope.$on('schemaFormAfterAppendToArray', (e, form) => this.resetDefaults(form));\n    }\n\n    function restoreDefaults(form) {\n      if(!form.items) return;\n      form.items.forEach(item => {\n        if(item.key) {\n          if(item.schema) {\n            let key = cnFlexFormService.getKey(item.key).replace(/\\[\\d+]/g, '[]');\n            item.schema.default = this.defaults[key];\n          }\n        }\n        this.restoreDefaults(item);\n      });\n      setNoPlaceholder(form.items);\n    }\n\n    function setNoPlaceholder(items) {\n      _.each(items, (item) => {\n        item.placeholder = item._placeholder;\n        item.noBatchPlaceholder = true;\n        if(item.items) setNoPlaceholder(item.items);\n      });\n    }\n\n    function resetDefaults(form) {\n      if(!form.items) return;\n      form.items.forEach(item => {\n        if(item.schema) {\n          item.schema.default = undefined;\n        }\n        this.resetDefaults(item);\n      });\n    }\n\n    function clearSchemaDefault(schema, key) {\n      // save for hydrating newly added array items\n      this.defaults[key] = schema.default;\n\n      // then remove because we don't want to override saved values with defaults\n      schema.default = undefined;\n\n      if(schema.type === 'object' && schema.properties) {\n        schema.required = undefined;\n        // _.each(schema.properties, this.clearSchemaDefault.bind(this));\n        for(let k in schema.properties) {\n          this.clearSchemaDefault(schema.properties[k], `${key}.${k}`);\n        }\n      }\n      else if(schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items, `${key}[]`);\n      }\n    }\n    \n    function showResults(results, config) {\n      this.results = results;\n      this.resultsConfig = config;\n\n      if(this.modal) {\n        this.modal.close();\n      }\n\n      this.modal = cnModal.open({\n        controller: 'BatchResults',\n        controllerAs: 'vm',\n        templateUrl: 'cn-batch-forms/batch-results.html',\n        resolve: {\n          parent: () => this\n        }\n      });\n    }\n\n    function closeModal() {\n      this.modal.close();\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = `\n          <div class=\"well\">\n            <h5>Edit Modes</h5>\n            <p>Some types of fields allow you to apply batch changes in\n            different ways:</p>\n            <dl>\n              <dt>Replace:</dt>\n              <dd>Replace all the original values\n              with the new value. <em>(If you don't see an <b>Edit Mode</b> option\n              for a field, this will be the default)</em></dd>\n            </dl>\n            ${this.getEditModeLegends()}\n          </div>`;\n    }\n\n    function getEditModeLegends() {\n      let legends = '';\n\n      if(this.editModes.prepend) {\n        legends += `\n            <dl>\n              <dt>Prepend:</dt>\n              <dd>Add the new value to the start of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.append) {\n        legends += `\n            <dl>\n              <dt>Append:</dt>\n              <dd>Affix the new value at the end of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.decrease) {\n        legends += `\n            <dl>\n              <dt>Decrease:</dt>\n              <dd>Subtract the given value from the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.increase) {\n        legends += `\n            <dl>\n              <dt>Increase:</dt>\n              <dd>Add the given value to the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      return legends;\n    }\n  }\n\n})();\n","angular.module(\"cn.batch-forms\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"cn-batch-forms/batch-results.html\",\"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.submit(handler)\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list card-flex\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n\\n    <div class=\\\"padding-20\\\"\\n         ng-if=\\\"vm.text\\\">\\n      <p class=\\\"no-margin text-mute\\\"\\n         ng-bind-html=\\\"vm.text\\\">\\n      </p>\\n    </div>\\n\\n    <table class=\\\"table gutterless\\\">\\n      <tbody>\\n      <tr ng-repeat=\\\"result in vm.results\\\">\\n        <td class=\\\"col-sm-10\\\">\\n          <h6 ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{result.body.id}})</span>\\n          </h6>\\n          <h6 ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{vm.originals[$index].id}})</span>\\n          </h6>\\n          <p ng-class=\\\"{\\n               \\'text-danger\\': result.status != 200,\\n               \\'text-primary\\': result.status == 200\\n             }\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n            {{result.status == 200 ? \\'updated successfully\\' : result.body.message}}\\n          </p>\\n        </td>\\n        <td class=\\\"col-sm-2 text-center\\\">\\n          <a class=\\\"btn btn-sm btn-transparent\\\"\\n             ng-show=\\\"vm.showEdit(result)\\\"\\n             ui-sref=\\\"{{ result.editSref }}\\\">\\n            <i class=\\\"icn-edit\\\"></i>\\n          </a>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\");}]);"]}