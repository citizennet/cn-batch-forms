{"version":3,"sources":["all.min.js","_.cn-batch-forms.module.js","batch-results.js","cn-batch-forms.routes.js","cn-batch-forms.service.js","templates.js"],"names":["angular","module","BatchResults","$state","parent","$timeout","activate","console","log","vm","results","cancel","headerConfig","title","main","actionConfig","actions","text","noData","go","this","originals","models","config","resultsConfig","displayName","done","controller","$inject","cnBatchFormsConfig","cnFlexFormServiceProvider","cnFlexFormModalLoaderServiceProvider","registerField","condition","field","type","TYPE","handler","templateUrl","TEMPLATE_URL","addMapping","controllerAs","addTemplates","$templateCache","put","run","cnBatchForms","cnFlexFormService","cnFlexFormTypes","sfPath","$rootScope","cnFlexFormModalLoaderService","augmentSchema","schema","model","length","service","BatchForms","Object","create","constructor","addToSchema","clearDefaults","clearSchemaDefault","closeModal","createDirtyCheck","createBatchField","onFieldScope","processForm","processField","processItems","processDate","processString","processSelect","getModelValues","getChangedModels","setValue","showResults","resolveMapping","fieldRegister","forms","i","form","splice","$on","bind","event","scope","key","_key","ngModel","children","arguments","undefined","child","show","batchConfig","htmlClass","batchField","dirtyCheck","items","getSchema","properties","fieldType","getFieldType","fieldTypeHandlers","_","isObject","ogValues","titleMap","default","onSelect","watch","resolution","val","prev","_this","notitle","isArray","push","equals","register","$dirty","parseExpression","set","start","path","parse","depth","forEach","k","map","get","_this2","each","dirty","mode","update","original","originalVal","concat","isString","trim","name","value","replace","uniq","placeholder","first","_this3","remove","chain","flatten","every","displayProperty","required","__batchConfig","__dirtyCheck","current","modal","modalId","onCloseModal","e","toState","toParams","returnState","params","string","cn-autocomplete","cn-datetimepicker","factory"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  angular.module('cn.batch-forms', ['schemaForm', 'cn.flex-form', 'cn.util', 'ui.router']);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$timeout'];\n\n  function BatchResults($state, parent, $timeout) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n\n    vm.activate = activate;\n    vm.cancel = cancel;\n    vm.done = cancel;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      console.log('vm.parent:', vm.parent);\n\n      if (!vm.results) {\n        // the modal doesn't go away without the timeout\n        $timeout(vm.cancel);\n      }\n\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Cool'\n          }]\n        },\n        noData: true\n      };\n    }\n\n    function cancel() {\n      $state.go('^');\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').config(cnBatchFormsConfig).run(addTemplates);\n\n  var TYPE = 'cn-dirty-check';\n  var TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = ['cnFlexFormServiceProvider', 'cnFlexFormModalLoaderServiceProvider'];\n\n  function cnBatchFormsConfig(cnFlexFormServiceProvider, cnFlexFormModalLoaderServiceProvider) {\n\n    cnFlexFormServiceProvider.registerField({\n      condition: function condition(field) {\n        return field.type === TYPE;\n      },\n      handler: function handler(field) {},\n\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n\n    cnFlexFormModalLoaderServiceProvider.addMapping('results', {\n      controller: 'BatchResults',\n      controllerAs: 'vm',\n      templateUrl: 'cn-batch-forms/batch-results.html'\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(TEMPLATE_URL, '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>');\n  }\n})();\n'use strict';\n\n(function () {\n  angular.module('cn.batch-forms').factory('cnBatchForms', cnBatchForms);\n\n  cnBatchForms.$inject = ['cnFlexFormService', 'cnFlexFormTypes', 'sfPath', '$rootScope', '$state', '$timeout', 'cnFlexFormModalLoaderService'];\n  function cnBatchForms(cnFlexFormService, cnFlexFormTypes, sfPath, $rootScope, $state, $timeout, cnFlexFormModalLoaderService) {\n\n    var fieldTypeHandlers = {\n      'string': processString,\n      'cn-autocomplete': processSelect,\n      'cn-datetimepicker': processDate\n    };\n\n    return {\n      augmentSchema: augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if (!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor: constructor,\n        addToSchema: addToSchema,\n        clearDefaults: clearDefaults,\n        clearSchemaDefault: clearSchemaDefault,\n        closeModal: closeModal,\n        createDirtyCheck: createDirtyCheck,\n        createBatchField: createBatchField,\n        onFieldScope: onFieldScope,\n        processForm: processForm,\n        processField: processField,\n        processItems: processItems,\n        processDate: processDate,\n        processString: processString,\n        processSelect: processSelect,\n        getModelValues: getModelValues,\n        getChangedModels: getChangedModels,\n        setValue: setValue,\n        showResults: showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n      console.log('BatchForms:', schema, model, models);\n\n      cnFlexFormModalLoaderService.resolveMapping('results', 0, this);\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.fieldRegister = {};\n\n      this.clearDefaults();\n\n      if (schema.forms) {\n        var i = schema.forms.length - 1;\n        while (i > -1) {\n          this.processForm(schema.forms[i]);\n          if (!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n        //schema.forms.forEach(this.processForm.bind(this));\n      } else {\n          this.processForm(schema.form);\n        }\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n\n      console.log('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      //console.log('onFieldScope:', scope.form.key, scope);\n      var key = scope.form._key;\n      if (key) {\n        this.fieldRegister[key].ngModel = scope.ngModel;\n      }\n    }\n\n    function processForm(form) {\n      this.processItems(form, 'form');\n    }\n\n    function processItems(field) {\n      var children = arguments.length <= 1 || arguments[1] === undefined ? 'items' : arguments[1];\n\n      //console.log('processItems:', field, children);\n      var i = field[children].length - 1;\n      while (i > -1) {\n        var child = field[children][i];\n        var show = this.processField(child);\n        if (child.batchConfig) {\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field';\n          var batchField = this.createBatchField(child);\n          var dirtyCheck = this.createDirtyCheck(child);\n          // add mode buttons after field\n          field[children][i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: [child, dirtyCheck, batchField]\n          };\n          this.fieldRegister[child.key] = {\n            field: child\n          };\n        }\n        if (!show) {\n          // remove field if batch isn't supported by it or children\n          field[children].splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processField(field) {\n      //console.log('processField:', field.batchConfig, field);\n      if (field.key) {\n        if (!field.batchConfig) return false;\n\n        field._key = field.key;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n        //field.required = false;\n\n        var fieldType = cnFlexFormTypes.getFieldType(field);\n        var handler = fieldTypeHandlers[fieldType];\n\n        if (handler) {\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          handler.bind(this)(field);\n        } else return false;\n      } else if (field.items) {\n        this.processItems(field);\n        if (!field.items.length) return false;\n      }\n      return true;\n    }\n\n    function createBatchField(field) {\n      var batchField = {\n        type: 'radiobuttons',\n        titleMap: field.batchConfig.titleMap,\n        key: '__batchConfig.' + field.key\n      };\n\n      if (batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(field.key, '__batchConfig', {\n        type: 'string',\n        title: 'Edit Mode',\n        default: field.batchConfig.default\n      });\n\n      if (field.batchConfig.onSelect) {\n        batchField.watch = {\n          resolution: function resolution(val, prev) {\n            field.batchConfig.onSelect[val](prev);\n          }\n        };\n      }\n\n      return batchField;\n    }\n\n    function createDirtyCheck(field) {\n      var _this = this;\n\n      var dirtyCheck = {\n        type: 'cn-dirty-check',\n        htmlClass: field.notitle || !field.schema.title ? 'notitle' : '',\n        key: '__dirtyCheck.' + field.key\n      };\n\n      this.addToSchema(field.key, '__dirtyCheck', {\n        type: 'boolean',\n        notitle: true\n      });\n\n      if (field.watch) {\n        if (!_.isArray(field.watch)) field.watch = [field.watch];\n      } else {\n        field.watch = [];\n      }\n\n      field.watch.push({\n        resolution: function resolution(val, prev) {\n          if (!angular.equals(val, prev)) {\n            var register = _this.fieldRegister[field.key];\n            if (register && register.ngModel.$dirty) {\n              cnFlexFormService.parseExpression(dirtyCheck.key, _this.model).set(true);\n            }\n          }\n        }\n      });\n\n      return dirtyCheck;\n    }\n\n    function addToSchema(key, start, schema) {\n      var path = sfPath.parse(key);\n      var depth = this.schema.schema.properties[start];\n\n      path.forEach(function (k, i) {\n        if (i === path.length - 1) {\n          depth.properties[k] = schema;\n        } else if (k === '') {\n          if (!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        } else {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          if (!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(function (model) {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      var _this2 = this;\n\n      var models = [];\n\n      _.each(this.fieldRegister, function (register, key) {\n        var dirty = cnFlexFormService.parseExpression('__dirtyCheck.' + key, _this2.model).get();\n\n        console.log('key, dirty:', key, dirty, register);\n        if (!dirty) return;\n\n        var mode = cnFlexFormService.parseExpression('__batchConfig.' + key, _this2.model).get();\n\n        _this2.models.forEach(function (model, i) {\n          if (!models[i]) models[i] = {};\n\n          var val = cnFlexFormService.parseExpression(key, _this2.model).get();\n          var update = cnFlexFormService.parseExpression(key, models[i]);\n          var original = cnFlexFormService.parseExpression(key, _this2.models[i]);\n\n          _this2.setValue(val, update, original, mode);\n        });\n      });\n\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if (mode === 'replace') {\n        update.set(val);\n      } else if (mode === 'push') {\n        var originalVal = original.get();\n        if (_.isArray(originalVal)) {\n          update.set(originalVal.concat(val));\n        } else if (_.isString(originalVal)) {\n          update.set(originalVal + ' ' + val.trim());\n        }\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function processString(field) {\n      var config = field.batchConfig;\n\n      config.titleMap = config.titleMap || [{\n        name: 'Replace',\n        value: 'replace'\n      }, {\n        name: 'Append',\n        value: 'push'\n      }];\n\n      config.default = config.default || 'push';\n\n      config.onSelect = {\n        replace: function replace() {\n          if (_.uniq(config.ogValues).length === 1) {\n            field.placeholder = _.first(config.ogValues);\n          } else {\n            field.placeholder = '—';\n          }\n        },\n        push: function push() {\n          field.placeholder = '';\n        }\n      };\n    }\n\n    function processSelect(field) {\n      var _this3 = this;\n\n      var type = field.schema.type;\n      var config = field.batchConfig;\n\n      if (type === 'array') {\n        config.titleMap = config.titleMap || [{\n          name: 'Replace',\n          value: 'replace'\n        }, {\n          name: 'Append',\n          value: 'push'\n        } /*, {\n           name: 'Remove',\n           value: 'remove'\n          }*/];\n\n        config.default = config.default || 'push';\n\n        config.onSelect = {\n          replace: function replace(prev) {\n            if (prev !== 'push') {\n              cnFlexFormService.parseExpression(field.key, _this3.model).set([]);\n            }\n          },\n          push: function push(prev) {\n            if (prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, _this3.model).set([]);\n            }\n          },\n          remove: function remove() {\n            var val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, _this3.model).set(val);\n          }\n        };\n      } else {\n        config.titleMap = config.titleMap || [{\n          name: 'Replace',\n          value: 'replace'\n        }];\n\n        config.default = config.default || 'replace';\n\n        config.onSelect = {\n          replace: function replace(prev) {\n            var first = _.first(config.ogValues);\n            if (_.every(config.ogValues, first)) {\n              field.placeholder = first[field.displayProperty || 'name'];\n            } else {\n              field.placeholder = '—';\n            }\n          }\n        };\n      }\n    }\n\n    function processDate(field) {\n      console.log('field.schema:', field.schema);\n      //field.schema.type = ['null', field.schema.type];\n\n      var config = field.batchConfig;\n\n      config.titleMap = config.titleMap || [{\n        name: 'Replace',\n        value: 'replace'\n      }];\n\n      config.default = config.default || 'replace';\n\n      if (_.uniq(config.ogValues).length === 1) {\n        field.placeholder = _.first(config.ogValues);\n      } else {\n        field.placeholder = '—';\n      }\n    }\n\n    function clearDefaults() {\n      this.schema.schema.required = [];\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n    }\n\n    function clearSchemaDefault(schema) {\n      schema.default = undefined;\n      if (schema.type === 'object' && schema.properties) {\n        _.each(schema.properties, this.clearSchemaDefault.bind(this));\n      } else if (schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items);\n      }\n    }\n\n    function showResults(results, config) {\n      console.log('showResults:', $state.current.name);\n      this.results = results;\n      this.resultsConfig = config;\n\n      $state.go('.modal', {\n        modal: 'results',\n        modalId: 0\n      });\n\n      this.onCloseModal = $rootScope.$on('$stateChangeStart', this.closeModal.bind(this));\n    }\n\n    function closeModal(e, toState, toParams) {\n      console.log('closeModal:', e, toState, toParams);\n      console.log('this.resultsConfig:', this.resultsConfig);\n      this.onCloseModal();\n      var config = this.resultsConfig;\n      if (config && config.returnState) {\n        //timeout needed so current state\n        $timeout(function () {\n          return $state.go(config.returnState.name, config.returnState.params);\n        });\n      }\n    }\n  }\n})();\n\"use strict\";\n\nangular.module(\"cn.batch-forms\").run([\"$templateCache\", function ($templateCache) {\n  $templateCache.put(\"cn-batch-forms/batch-results.html\", \"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header cn-heading row vertical-parent\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.done()\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n    <ul class=\\\"list-group gutterless\\\">\\n      <li ng-repeat=\\\"result in vm.results\\\"\\n          class=\\\"list-group-item\\\"\\n          ng-class=\\\"{\\n            \\'text-danger\\': result.status != 200,\\n            \\'text-primary\\': result.status == 200\\n          }\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-sm-1 text-center\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n          </div>\\n          <div class=\\\"col-sm-11\\\"\\n               ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}} ({{result.body.id}}):\\n            updated successfully\\n          </div>\\n          <div class=\\\"col-sm-11\\\"\\n               ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}} ({{vm.originals[$index].id}}):\\n            {{result.body.message}}\\n          </div>\\n        </div>\\n      </li>\\n    </ul>\\n  </div>\\n</div>\\n\");\n}]);","(function() {\n  angular.module('cn.batch-forms', [\n    'schemaForm',\n    'cn.flex-form',\n    'cn.util',\n    'ui.router'\n  ]);\n})();","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$timeout'];\n\n  function BatchResults($state, parent, $timeout) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n\n    vm.activate = activate;\n    vm.cancel = cancel;\n    vm.done = cancel;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      console.log('vm.parent:', vm.parent);\n\n      if(!vm.results) {\n        // the modal doesn't go away without the timeout\n        $timeout(vm.cancel);\n      }\n\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Cool'\n          }]\n        },\n        noData: true\n      };\n    }\n\n    function cancel() {\n      $state.go('^');\n    }\n\n  }\n\n})();","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .config(cnBatchFormsConfig)\n      .run(addTemplates);\n\n  const TYPE = 'cn-dirty-check';\n  const TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = [\n    'cnFlexFormServiceProvider',\n    'cnFlexFormModalLoaderServiceProvider'\n  ];\n\n  function cnBatchFormsConfig(\n      cnFlexFormServiceProvider,\n      cnFlexFormModalLoaderServiceProvider) {\n\n    cnFlexFormServiceProvider.registerField({\n      condition(field) {\n        return field.type === TYPE;\n      },\n      handler(field) {\n\n      },\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n\n    cnFlexFormModalLoaderServiceProvider.addMapping('results', {\n      controller: 'BatchResults',\n      controllerAs: 'vm',\n      templateUrl: 'cn-batch-forms/batch-results.html'\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(\n        TEMPLATE_URL,\n        '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>'\n    );\n  }\n\n})();","(function() {\n  angular\n      .module('cn.batch-forms')\n      .factory('cnBatchForms', cnBatchForms);\n\n  cnBatchForms.$inject = [\n    'cnFlexFormService',\n    'cnFlexFormTypes',\n    'sfPath',\n    '$rootScope',\n    '$state',\n    '$timeout',\n    'cnFlexFormModalLoaderService'\n  ];\n  function cnBatchForms(\n      cnFlexFormService,\n      cnFlexFormTypes,\n      sfPath,\n      $rootScope,\n      $state,\n      $timeout,\n      cnFlexFormModalLoaderService) {\n\n    var fieldTypeHandlers = {\n      'string': processString,\n      'cn-autocomplete': processSelect,\n      'cn-datetimepicker': processDate\n    };\n\n    return {\n      augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if(!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor,\n        addToSchema,\n        clearDefaults,\n        clearSchemaDefault,\n        closeModal,\n        createDirtyCheck,\n        createBatchField,\n        onFieldScope,\n        processForm,\n        processField,\n        processItems,\n        processDate,\n        processString,\n        processSelect,\n        getModelValues,\n        getChangedModels,\n        setValue,\n        showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n      console.log('BatchForms:', schema, model, models);\n\n      cnFlexFormModalLoaderService.resolveMapping('results', 0, this);\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.fieldRegister = {};\n\n      this.clearDefaults();\n\n      if(schema.forms) {\n        let i = schema.forms.length - 1;\n        while(i > -1) {\n          this.processForm(schema.forms[i]);\n          if(!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n        //schema.forms.forEach(this.processForm.bind(this));\n      }\n      else {\n        this.processForm(schema.form);\n      }\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n\n      console.log('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      //console.log('onFieldScope:', scope.form.key, scope);\n      let key = scope.form._key;\n      if(key) {\n        this.fieldRegister[key].ngModel = scope.ngModel;\n      }\n    }\n\n    function processForm(form) {\n      this.processItems(form, 'form');\n    }\n\n    function processItems(field, children = 'items') {\n      //console.log('processItems:', field, children);\n      let i = field[children].length - 1;\n      while(i > -1) {\n        let child = field[children][i];\n        let show = this.processField(child);\n        if(child.batchConfig) {\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field';\n          let batchField = this.createBatchField(child);\n          let dirtyCheck = this.createDirtyCheck(child);\n          // add mode buttons after field\n          field[children][i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: [child, dirtyCheck, batchField]\n          };\n          this.fieldRegister[child.key] = {\n            field: child\n          };\n        }\n        if(!show) {\n          // remove field if batch isn't supported by it or children\n          field[children].splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processField(field) {\n      //console.log('processField:', field.batchConfig, field);\n      if(field.key) {\n        if(!field.batchConfig) return false;\n\n        field._key = field.key;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n        //field.required = false;\n\n        let fieldType = cnFlexFormTypes.getFieldType(field);\n        let handler = fieldTypeHandlers[fieldType];\n\n        if(handler) {\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          handler.bind(this)(field);\n        }\n        else return false;\n      }\n      else if(field.items) {\n        this.processItems(field);\n        if(!field.items.length) return false;\n      }\n      return true;\n    }\n\n    function createBatchField(field) {\n      let batchField = {\n        type: 'radiobuttons',\n        titleMap: field.batchConfig.titleMap,\n        key: `__batchConfig.${field.key}`\n      };\n\n      if(batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(field.key, '__batchConfig', {\n        type: 'string',\n        title: 'Edit Mode',\n        default: field.batchConfig.default\n      });\n\n      if(field.batchConfig.onSelect) {\n        batchField.watch = {\n          resolution: (val, prev) => {\n            field.batchConfig.onSelect[val](prev);\n          }\n        };\n      }\n\n      return batchField;\n    }\n\n    function createDirtyCheck(field) {\n      let dirtyCheck = {\n        type: 'cn-dirty-check',\n        htmlClass: (field.notitle || !field.schema.title) ? 'notitle' : '',\n        key: `__dirtyCheck.${field.key}`\n      };\n\n      this.addToSchema(field.key, '__dirtyCheck', {\n        type: 'boolean',\n        notitle: true\n      });\n\n      if(field.watch) {\n        if(!_.isArray(field.watch)) field.watch = [field.watch];\n      }\n      else {\n        field.watch = [];\n      }\n\n      field.watch.push({\n        resolution: (val, prev) => {\n          if(!angular.equals(val, prev)) {\n            let register = this.fieldRegister[field.key];\n            if(register && register.ngModel.$dirty) {\n              cnFlexFormService.parseExpression(dirtyCheck.key, this.model).set(true);\n            }\n          }\n        }\n      });\n\n      return dirtyCheck;\n    }\n\n    function addToSchema(key, start, schema) {\n      let path = sfPath.parse(key);\n      let depth = this.schema.schema.properties[start];\n\n      path.forEach((k, i) => {\n        if(i === path.length - 1) {\n          depth.properties[k] = schema;\n        }\n        else if(k === '') {\n          if(!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        }\n        else {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          if(!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(model => {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      let models = [];\n\n      _.each(this.fieldRegister, (register, key) => {\n        let dirty = cnFlexFormService\n            .parseExpression(`__dirtyCheck.${key}`, this.model)\n            .get();\n\n        console.log('key, dirty:', key, dirty, register);\n        if(!dirty) return;\n\n        let mode = cnFlexFormService\n            .parseExpression(`__batchConfig.${key}`, this.model)\n            .get();\n\n        this.models.forEach((model, i) => {\n          if(!models[i]) models[i] = {};\n\n          let val = cnFlexFormService\n              .parseExpression(key, this.model)\n              .get();\n          let update = cnFlexFormService\n              .parseExpression(key, models[i]);\n          let original = cnFlexFormService\n              .parseExpression(key, this.models[i]);\n\n          this.setValue(val, update, original, mode);\n        });\n      });\n\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if(mode === 'replace') {\n        update.set(val);\n      }\n      else if(mode === 'push') {\n        let originalVal = original.get();\n        if(_.isArray(originalVal)) {\n          update.set(originalVal.concat(val));\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${originalVal} ${val.trim()}`);\n        }\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function processString(field) {\n      let config = field.batchConfig;\n\n      config.titleMap = config.titleMap || [{\n        name: 'Replace',\n        value: 'replace'\n      }, {\n        name: 'Append',\n        value: 'push'\n      }];\n\n      config.default = config.default || 'push';\n\n      config.onSelect = {\n        replace: () => {\n          if(_.uniq(config.ogValues).length === 1) {\n            field.placeholder = _.first(config.ogValues);\n          }\n          else {\n            field.placeholder = '—';\n          }\n        },\n        push: () => {\n          field.placeholder = '';\n        }\n      };\n    }\n\n    function processSelect(field) {\n      let type = field.schema.type;\n      let config = field.batchConfig;\n\n      if(type === 'array') {\n        config.titleMap = config.titleMap || [{\n          name: 'Replace',\n          value: 'replace'\n        }, {\n          name: 'Append',\n          value: 'push'\n        }/*, {\n          name: 'Remove',\n          value: 'remove'\n        }*/];\n\n        config.default = config.default || 'push';\n\n        config.onSelect = {\n          replace: (prev) => {\n            if(prev !== 'push') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          push: (prev) => {\n            if(prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          remove: () => {\n            let val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, this.model).set(val);\n          }\n        };\n      }\n      else {\n        config.titleMap = config.titleMap || [{\n          name: 'Replace',\n          value: 'replace'\n        }];\n\n        config.default = config.default || 'replace';\n\n        config.onSelect = {\n          replace: (prev) => {\n            let first = _.first(config.ogValues);\n            if(_.every(config.ogValues, first)) {\n              field.placeholder = first[field.displayProperty || 'name'];\n            }\n            else {\n              field.placeholder = '—';\n            }\n          }\n        };\n      }\n    }\n\n    function processDate(field) {\n      console.log('field.schema:', field.schema);\n      //field.schema.type = ['null', field.schema.type];\n\n      let config = field.batchConfig;\n\n      config.titleMap = config.titleMap || [{\n            name: 'Replace',\n            value: 'replace'\n          }];\n\n      config.default = config.default || 'replace';\n\n      if(_.uniq(config.ogValues).length === 1) {\n        field.placeholder = _.first(config.ogValues);\n      }\n      else {\n        field.placeholder = '—';\n      }\n    }\n\n    function clearDefaults() {\n      this.schema.schema.required = [];\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n    }\n\n    function clearSchemaDefault(schema) {\n      schema.default = undefined;\n      if(schema.type === 'object' && schema.properties) {\n        _.each(schema.properties, this.clearSchemaDefault.bind(this));\n      }\n      else if(schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items);\n      }\n    }\n\n    function showResults(results, config) {\n      console.log('showResults:', $state.current.name);\n      this.results = results;\n      this.resultsConfig = config;\n\n      $state.go('.modal', {\n        modal: 'results',\n        modalId: 0\n      });\n\n      this.onCloseModal = $rootScope.$on('$stateChangeStart', this.closeModal.bind(this));\n    }\n\n    function closeModal(e, toState, toParams) {\n      console.log('closeModal:', e, toState, toParams);\n      console.log('this.resultsConfig:', this.resultsConfig);\n      this.onCloseModal();\n      let config = this.resultsConfig;\n      if(config && config.returnState) {\n        //timeout needed so current state\n        $timeout(() => $state.go(config.returnState.name, config.returnState.params));\n      }\n    }\n  }\n\n})();","angular.module(\"cn.batch-forms\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"cn-batch-forms/batch-results.html\",\"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header cn-heading row vertical-parent\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.done()\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n    <ul class=\\\"list-group gutterless\\\">\\n      <li ng-repeat=\\\"result in vm.results\\\"\\n          class=\\\"list-group-item\\\"\\n          ng-class=\\\"{\\n            \\'text-danger\\': result.status != 200,\\n            \\'text-primary\\': result.status == 200\\n          }\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-sm-1 text-center\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n          </div>\\n          <div class=\\\"col-sm-11\\\"\\n               ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}} ({{result.body.id}}):\\n            updated successfully\\n          </div>\\n          <div class=\\\"col-sm-11\\\"\\n               ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}} ({{vm.originals[$index].id}}):\\n            {{result.body.message}}\\n          </div>\\n        </div>\\n      </li>\\n    </ul>\\n  </div>\\n</div>\\n\");}]);"],"sourceRoot":"/source/"}