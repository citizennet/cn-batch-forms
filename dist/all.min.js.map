{"version":3,"sources":["all.min.js","_.cn-batch-forms.module.js","batch-results.js","cn-batch-forms.routes.js","cn-batch-forms.service.js","templates.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","angular","module","BatchResults","$state","parent","$stateParams","activate","console","log","vm","config","idParam","results","forEach","result","i","params","_","assign","originals","id","editSref","current","name","toJson","headerConfig","title","main","actionConfig","actions","text","handler","returnState","go","noData","submit","closeModal","this","models","resultsConfig","displayName","formName","controller","$inject","cnBatchFormsConfig","cnFlexFormServiceProvider","registerField","condition","field","type","TYPE","templateUrl","TEMPLATE_URL","addTemplates","$templateCache","put","run","_typeof","Symbol","iterator","constructor","prototype","cnBatchFormsProvider","fieldType","fieldTypeHandlers","$get","cnBatchForms","cnFlexFormService","cnFlexFormTypes","sfPath","$rootScope","$timeout","cnModal","augmentSchema","schema","model","length","service","BatchForms","create","addMeta","addToSchema","buildModelDefault","clearSchemaDefault","createDirtyCheck","createBatchField","getChangedModels","getEditModeLegends","getFormFromRegister","getModelValues","getSchemaDefault","getTitleMap","handleLinks","onFieldScope","onReprocessField","processCondition","processSchema","processForm","processField","processItems","processDate","processDefault","processLinkList","processLinks","processNumber","processSelect","processToggle","registerFieldWatch","resetDefaults","restoreDefaults","setValidation","setValue","showResults","instance","instances","defaults","editModes","fieldRegister","forms","form","splice","$on","bind","event","scope","getKey","startsWith","ngModel","$pristine","children","arguments","undefined","child","batchConfig","htmlClass","batchField","dirtyCheck","items","replace","_key","_placeholder","placeholder","getSchema","properties","required","conditionals","getFieldType","isString","isObject","ogValues","allEqual","first","parseExpression","set","clone","uniqueId","watch","item","push","resolution","_this","map","capitalize","def","titleMap","btnClass","default","onSelect","val","prev","_this2","isUndefined","_minItems","minItems","options","tv4Validation","keys","$error","filter","k","indexOf","$setValidity","_this3","includes","_ret","re","RegExp","v","test","_this4","notitle","$broadcast","fieldWatch","equals","register","$dirty","initiated","isArray","e","list","hard","_this5","_this6","error","without","links","hardLinks","_ret2","each","path","parse","depth","get","_this7","dirty","mode","assignable","getAssignable","fullPath","update","original","originalVal","uniqVal","concat","uniq","trim","add","subtract","replaceString","withString","expression","setPlaceholder","noBatchPlaceholder","_this8","append","prepend","stringReplace","configKey","replaceKey","withKey","stringReplaceField","extend","setNestedPlaceholder","_this9","remove","chain","flatten","_this10","__batchConfig","__dirtyCheck","_this11","_this12","_this13","modal","close","open","controllerAs","resolve","meta","legends","decrease","increase","provider","string","number","url","array","cn-autocomplete","cn-currency","cn-datetimepicker","cn-toggle"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  angular.module('cn.batch-forms', ['schemaForm', 'cn.flex-form', 'cn.util', 'ui.router']);\n})();\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$stateParams'];\n\n  function BatchResults($state, parent, $stateParams) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    //vm.errors = _.reject(vm.results, {status: 200});\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n    vm.formName = $state.current.name;\n    vm.text = vm.config.text;\n\n    vm.activate = activate;\n    vm.submit = submit;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      console.log('vm.parent:', vm.parent);\n      if (vm.config.idParam) {\n        vm.results.forEach(function (result, i) {\n          var params = _.assign({}, $stateParams, _defineProperty({}, vm.config.idParam, vm.originals[i].id));\n          result.editSref = $state.current.name + '(' + angular.toJson(params) + ')';\n          console.log('result.editSref:', result);\n        });\n      }\n\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Continue Editing'\n          }, {\n            text: 'Done',\n            handler: function handler() {\n              if (vm.config && vm.config.returnState) {\n                $state.go(vm.config.returnState.name, vm.config.returnState.params);\n              }\n            }\n          }]\n        },\n        noData: true\n      };\n    }\n\n    function submit(handler) {\n      console.log('submit:', handler);\n      vm.parent.closeModal();\n      if (handler) {\n        handler();\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').config(cnBatchFormsConfig).run(addTemplates);\n\n  var TYPE = 'cn-dirty-check';\n  var TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function cnBatchFormsConfig(cnFlexFormServiceProvider) {\n    cnFlexFormServiceProvider.registerField({\n      condition: function condition(field) {\n        return field.type === TYPE;\n      },\n      handler: function handler(field) {/*console.log('field.readonly:', field.key, field.readonly)*/},\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(TEMPLATE_URL, '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 ng-disabled=\"form.readonly\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>');\n  }\n})();\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n(function () {\n  angular.module('cn.batch-forms').provider('cnBatchForms', cnBatchFormsProvider);\n\n  var fieldTypeHandlers = {\n    'string': 'processDefault',\n    'number': 'processNumber',\n    'url': 'processDefault',\n    'array': 'processSelect',\n    'cn-autocomplete': 'processSelect',\n    'cn-currency': 'processNumber',\n    'cn-datetimepicker': 'processDate',\n    'cn-toggle': 'processToggle'\n  };\n\n  function cnBatchFormsProvider() {\n    return {\n      registerField: registerField,\n      $get: cnBatchForms\n    };\n\n    ///////////\n\n    function registerField(fieldType) {\n      if (fieldType.handler) {\n        fieldTypeHandlers[fieldType.type] = fieldType.handler;\n      }\n    }\n  }\n\n  cnBatchForms.$inject = ['cnFlexFormService', 'cnFlexFormTypes', 'sfPath', '$rootScope', '$timeout', 'cnModal'];\n  function cnBatchForms(cnFlexFormService, cnFlexFormTypes, sfPath, $rootScope, $timeout, cnModal) {\n\n    var instances = 0;\n\n    return {\n      augmentSchema: augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if (!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor: constructor,\n        addMeta: addMeta,\n        addToSchema: addToSchema,\n        buildModelDefault: buildModelDefault,\n        clearSchemaDefault: clearSchemaDefault,\n        closeModal: closeModal,\n        createDirtyCheck: createDirtyCheck,\n        createBatchField: createBatchField,\n        getChangedModels: getChangedModels,\n        getEditModeLegends: getEditModeLegends,\n        getFormFromRegister: getFormFromRegister,\n        getModelValues: getModelValues,\n        getSchemaDefault: getSchemaDefault,\n        getTitleMap: getTitleMap,\n        handleLinks: handleLinks,\n        onFieldScope: onFieldScope,\n        onReprocessField: onReprocessField,\n        processCondition: processCondition,\n        processSchema: processSchema,\n        processForm: processForm,\n        processField: processField,\n        processItems: processItems,\n        processDate: processDate,\n        processDefault: processDefault,\n        processLinkList: processLinkList,\n        processLinks: processLinks,\n        processNumber: processNumber,\n        processSelect: processSelect,\n        processToggle: processToggle,\n        registerFieldWatch: registerFieldWatch,\n        resetDefaults: resetDefaults,\n        restoreDefaults: restoreDefaults,\n        setValidation: setValidation,\n        setValue: setValue,\n        showResults: showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n      console.log('BatchForms:', schema, model, models);\n\n      this.instance = instances;\n      //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.defaults = {};\n      this.editModes = {};\n      this.fieldRegister = {};\n\n      this.processSchema();\n\n      if (schema.forms) {\n        var i = schema.forms.length - 1;\n        while (i > -1) {\n          this.processForm(schema.forms[i]);\n          if (!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n        //schema.forms.forEach(this.processForm.bind(this));\n      } else {\n        this.processForm(schema.form);\n      }\n\n      this.addMeta();\n      this.processLinks();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n      $rootScope.$on('cnFlexFormReprocessField', this.onReprocessField.bind(this));\n\n      console.log('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      var key = cnFlexFormService.getKey(scope.form.key);\n\n      //console.log('onFieldScope:', key, scope.form.key, scope);\n      if (!key.startsWith('__')) {\n        if (!this.fieldRegister[key]) this.fieldRegister[key] = {};\n        this.fieldRegister[key].ngModel = scope.ngModel;\n        this.fieldRegister[key].scope = scope;\n      }\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if (scope.form.key[0] === '__batchConfig') {\n          scope.ngModel.$pristine = false;\n        }\n    }\n\n    function processForm(form) {\n      this.processItems(form, 'form');\n    }\n\n    function processItems(field) {\n      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'items';\n\n      //console.log('processItems:', field, children);\n      var i = field[children].length - 1;\n      while (i > -1) {\n        var child = this.processField(field[children][i]);\n        if (child && child.batchConfig) {\n          //console.log('child:', child);\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n          var batchField = this.createBatchField(child);\n          var dirtyCheck = child.key && this.createDirtyCheck(child);\n          // add mode buttons after field\n          field[children][i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n            condition: this.processCondition(child.condition)\n          };\n          delete child.condition;\n          if (child.key) {\n            if (!this.fieldRegister[child.key]) this.fieldRegister[child.key] = {};\n            this.fieldRegister[child.key].field = child;\n            this.fieldRegister[child.key].dirtyCheck = dirtyCheck;\n          }\n        }\n        if (!child) {\n          // remove field if batch isn't supported by it or children\n          field[children].splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processCondition(condition) {\n      return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n    }\n\n    function processField(field) {\n      //console.log('processField:', field.batchConfig, field);\n      if (field.key) {\n        if (!field.batchConfig) return false;\n\n        field._key = field.key;\n        field._placeholder = field.placeholder;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n\n        delete field.required;\n        if (field.conditionals) delete field.conditionals.required;\n\n        var fieldType = cnFlexFormTypes.getFieldType(field);\n        var handler = fieldTypeHandlers[fieldType];\n\n        if (handler) {\n          if (_.isString(handler)) handler = this[handler];\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          if (_.allEqual(field.batchConfig.ogValues)) {\n            var key = '__ogValues[\"' + field.key + '\"]';\n            var first = _.first(field.batchConfig.ogValues);\n            cnFlexFormService.parseExpression(key, this.model).set(first);\n          }\n\n          return handler.bind(this)(field);\n        } else return false;\n      } else if (field.items) {\n        if (field.batchConfig) {\n          field.items.forEach(function (child) {\n            child.batchConfig = _.clone(field.batchConfig);\n          });\n        }\n        this.processItems(field);\n        if (!field.items.length) return false;\n\n        if (field.batchConfig) {\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.key = 'component_' + _.uniqueId();\n          field.batchConfig.watch = [];\n\n          field.items.forEach(function (item, i) {\n            var child = item.items[0];\n            if (!i) {\n              field.batchConfig.editModes = child.batchConfig.editModes;\n              field.batchConfig.default = child.batchConfig.default;\n            }\n            field.batchConfig.watch.push({\n              resolution: 'model.__batchConfig[\"' + child.key + '\"] = model.__batchConfig[\"' + field.batchConfig.key + '\"]'\n            });\n            item.items[2].condition = 'false';\n          });\n        }\n      }\n      return field;\n    }\n\n    function getTitleMap(editModes) {\n      var _this = this;\n\n      editModes = editModes || ['replace'];\n\n      return editModes.map(function (value) {\n        _this.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value: value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      var batchConfig = field.batchConfig;\n      var key = '__batchConfig[\"' + (field.key || batchConfig.key) + '\"]';\n\n      var batchField = {\n        key: key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check',\n        watch: batchConfig.watch || []\n      };\n\n      if (batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(batchConfig.default)\n      });\n\n      if (batchConfig.onSelect) {\n        batchField.watch.push({\n          resolution: function resolution(val, prev) {\n            if (!val) return;\n            batchConfig.onSelect[val](prev);\n          }\n        });\n      }\n\n      return batchField;\n    }\n\n    function setValidation(field, val) {\n      var _this2 = this;\n\n      var key = cnFlexFormService.getKey(field.key);\n\n      if (field.schema && field.schema.type === 'array') {\n        if (_.isUndefined(field.schema._minItems)) field.schema._minItems = field.schema.minItems;\n        field.schema.minItems = val ? field.schema._minItems : 0;\n      }\n\n      var forms = key ? this.getFormFromRegister(key) : [];\n\n      forms.forEach(function (form) {\n        if (form.scope) {\n          form.scope.options = {\n            tv4Validation: val\n          };\n          Object.keys(form.ngModel.$error).filter(function (k) {\n            return k.indexOf('tv4-') === 0;\n          }).forEach(function (k) {\n            form.ngModel.$setValidity(k, true);\n          });\n        }\n      });\n      if (field.items) {\n        field.items.forEach(function (i) {\n          return _this2.setValidation(i, val);\n        });\n      }\n    }\n\n    function getFormFromRegister(key) {\n      var _this3 = this;\n\n      if (key.includes('[]')) {\n        var _ret = function () {\n          var re = new RegExp(key.replace('[]', '\\\\[\\\\d*\\\\]'));\n          return {\n            v: _.filter(_this3.fieldRegister, function (form, k) {\n              return re.test(k);\n            })\n          };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n      } else if (this.fieldRegister[key]) {\n        return [this.fieldRegister[key]];\n      } else return [];\n    }\n\n    function createDirtyCheck(field) {\n      var _this4 = this;\n\n      //let path = sfPath.parse(field.key);\n      var key = '__dirtyCheck[\"' + (field.key || field.batchConfig.key) + '\"]';\n      //let child = path.length > 1;\n      var htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if (field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      var dirtyCheck = {\n        key: key,\n        htmlClass: htmlClass,\n        type: 'cn-dirty-check',\n        watch: [{\n          resolution: function resolution(val) {\n            //$timeout(() => {\n            _this4.setValidation(field, val);\n            $rootScope.$broadcast('schemaFormValidate');\n            //});\n          }\n        }]\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      var model = this.buildModelDefault(field.key, field.schema) || {};\n\n      dirtyCheck.fieldWatch = {\n        resolution: function resolution(val) {\n          if (!angular.equals(val, model[field._key])) {\n            var register = _this4.fieldRegister[field._key];\n            if (register) {\n              if (register.ngModel && register.ngModel.$dirty || register.initiated) {\n                //console.log('dirtyCheck.key:', key);\n                cnFlexFormService.parseExpression(key, _this4.model).set(true);\n              } else {\n                register.initiated = true;\n              }\n            }\n            // debug\n            else {\n                console.log('noregister:', field, _this4.fieldRegister);\n              }\n          }\n        }\n      };\n\n      this.registerFieldWatch(field, dirtyCheck.fieldWatch);\n\n      return dirtyCheck;\n    }\n\n    function registerFieldWatch(field, watch) {\n      if (field.watch) {\n        if (!_.isArray(field.watch)) field.watch = [field.watch];\n      } else {\n        field.watch = [];\n      }\n\n      field.watch.push(watch);\n    }\n\n    function onReprocessField(e, key) {\n      var register = this.fieldRegister[key];\n      if (register) {\n        this.registerFieldWatch(register.field, register.dirtyCheck.fieldWatch);\n      }\n    }\n\n    function handleLinks(list, hard) {\n      var _this5 = this;\n\n      return function (val) {\n        //console.log('val:', list);\n        list.forEach(function (key) {\n          if (!hard) {\n            var register = _this5.fieldRegister[key];\n            if (!register.ngModel || !register.ngModel.$dirty) return;\n          }\n          cnFlexFormService.parseExpression('__dirtyCheck[\"' + key + '\"]', _this5.model).set(val);\n        });\n      };\n    }\n\n    function processLinkList(list, hard) {\n      var _this6 = this;\n\n      list.forEach(function (keys) {\n        keys.forEach(function (key) {\n          var register = _this6.fieldRegister[key];\n          if (!register) {\n            console.error('noRegister:', key);\n            return;\n          }\n          var field = register.field,\n              dirtyCheck = register.dirtyCheck;\n\n          var handler = _this6.handleLinks(_.without(keys, key), hard);\n          field.watch = field.watch || [];\n          dirtyCheck.watch = dirtyCheck.watch || [];\n          field.watch.push({\n            resolution: function resolution() {\n              handler(true);\n            }\n          });\n          dirtyCheck.watch.push({ resolution: handler });\n        });\n      });\n    }\n\n    function processLinks() {\n      console.log('this.schema.batchConfig:', this.schema.batchConfig);\n      if (this.schema.batchConfig) {\n        if (this.schema.batchConfig.links) {\n          this.processLinkList(this.schema.batchConfig.links);\n        }\n        if (this.schema.batchConfig.hardLinks) {\n          this.processLinkList(this.schema.batchConfig.hardLinks, true);\n        }\n      }\n    }\n\n    function buildModelDefault(key, schema) {\n      if (schema.type === 'array') {\n        var _ret2 = function () {\n          var model = _defineProperty({}, key, []);\n          if (schema.items) {\n            _.each(schema.items.properties, function (v, k) {\n              if (v.type === 'array') {\n                model[key].push(buildModelDefault(k, v));\n              }\n            });\n          }\n          return {\n            v: model\n          };\n        }();\n\n        if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === \"object\") return _ret2.v;\n      }\n    }\n\n    function addToSchema(key, schema) {\n      var path = sfPath.parse(key);\n      var depth = this.schema.schema;\n\n      path.forEach(function (k, i) {\n        if (i === path.length - 1) {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        } else if (k === '') {\n          if (!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        } else {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          if (!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(function (model) {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      var _this7 = this;\n\n      var models = [];\n\n      _.each(this.fieldRegister, function (register, key) {\n        var dirty = cnFlexFormService.parseExpression('__dirtyCheck[\"' + key + '\"]', _this7.model).get();\n\n        if (!dirty) return;\n\n        var mode = cnFlexFormService.parseExpression('__batchConfig[\"' + key + '\"]', _this7.model).get();\n\n        _this7.models.forEach(function (model, i) {\n          models[i] = models[i] || {};\n\n          var path = sfPath.parse(key);\n          // if column is json, we want to merge updates into model's current json value\n          // so we copy the current value if we haven't already (on a previous iteration)\n          if (path.length > 1 && !models[i][path[0]]) {\n            models[i][path[0]] = _this7.models[i][path[0]];\n          }\n\n          var assignable = cnFlexFormService.parseExpression(key, _this7.models[i]).getAssignable();\n\n          // if column is json and model's current value doesn't have parent property for\n          // key we're updating, just copy over entire key instead of using specific\n          // edit mode logic for new value\n          if (assignable.fullPath !== key) {\n            var val = cnFlexFormService.parseExpression(assignable.fullPath, _this7.model).get();\n\n            cnFlexFormService.parseExpression(assignable.fullPath, _this7.models[i]).set(val);\n          } else {\n            var _val = cnFlexFormService.parseExpression(key, _this7.model).get();\n            var update = cnFlexFormService.parseExpression(key, models[i]);\n            var original = cnFlexFormService.parseExpression(key, _this7.models[i]);\n\n            //console.log('val, update, original:', val, update.get(), original.get(), key);\n            _this7.setValue(_val, update, original, mode);\n          }\n        });\n      });\n\n      //console.log('models:', models);\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if (mode === 'replace') {\n        update.set(val);\n      } else if (mode === 'append') {\n        var originalVal = original.get();\n        if (_.isArray(originalVal)) {\n          var uniqVal = _([]).concat(originalVal, val).uniq(function (value) {\n            return value.key || value;\n          }).value();\n\n          update.set(uniqVal);\n        } else if (_.isString(originalVal)) {\n          update.set(originalVal + ' ' + val.trim());\n        } else {\n          update.set(val);\n        }\n      } else if (mode === 'prepend') {\n        var _originalVal = original.get();\n        if (_.isArray(_originalVal)) {\n          update.set(val.concat(_originalVal));\n        } else if (_.isString(_originalVal)) {\n          update.set(val.trim() + ' ' + _originalVal);\n        } else {\n          update.set(val);\n        }\n      } else if (mode === 'increase') {\n        update.set(_.add(original.get() || 0, val));\n      } else if (mode === 'decrease') {\n        update.set(_.subtract(original.get() || 0, val));\n      } else if (mode === 'stringReplace' && original.get()) {\n        var key = original.path().key;\n        var replaceString = cnFlexFormService.parseExpression('_replace_' + key, this.model);\n        var withString = cnFlexFormService.parseExpression('_with_' + key, this.model);\n        var expression = new RegExp(replaceString.get(), \"gi\");\n        update.set(original.get().replace(expression, withString.get()));\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function setPlaceholder(field, val) {\n      if (!field.noBatchPlaceholder) {\n        field._placeholder = val;\n      }\n    }\n\n    function processDefault(field) {\n      var _this8 = this;\n\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append', 'stringReplace'];\n\n      config.default = config.default || 'append';\n\n      if (!config.editModes.includes(config.default)) {\n        config.default = config.editModes[0];\n      }\n\n      config.onSelect = {\n        replace: function replace() {\n          if (_.allEqual(config.ogValues)) {\n            cnFlexFormService.parseExpression(field.key, _this8.model).set(_.first(config.ogValues));\n          } else {\n            setPlaceholder(field, '—');\n          }\n        },\n        append: function append() {\n          setPlaceholder(field, '');\n        },\n        prepend: function prepend() {\n          setPlaceholder(field, '');\n        },\n        stringReplace: function stringReplace() {}\n      };\n\n      if (config.editModes.includes('stringReplace')) {\n        var dirtyCheck = '__dirtyCheck[\"' + (field.key || field.batchConfig.key) + '\"]';\n        var configKey = '__batchConfig[\"' + (field.key || field.batchConfig.key) + '\"]';\n        var replaceKey = '_replace_' + (field.key || field.batchConfig.key);\n        var withKey = '_with_' + (field.key || field.batchConfig.key);\n        var stringReplaceField = {\n          type: 'component',\n          items: [{\n            key: replaceKey,\n            title: 'Replace',\n            watch: {\n              resolution: 'model.' + dirtyCheck + ' = true'\n            }\n          }, {\n            key: withKey,\n            title: 'With',\n            watch: {\n              resolution: 'model.' + dirtyCheck + ' = true'\n            }\n          }],\n          condition: 'model.' + configKey + ' === \\'stringReplace\\''\n        };\n\n        config.key = field.key;\n\n        field = {\n          type: 'section',\n          condition: field.condition,\n          batchConfig: config,\n          schema: field.schema,\n          key: field.key,\n          items: [_.extend(field, { condition: 'model.' + configKey + ' !== \\'stringReplace\\'' }), stringReplaceField]\n        };\n\n        this.addToSchema(replaceKey, { type: 'string' });\n        this.addToSchema(withKey, { type: 'string' });\n      }\n      return field;\n    }\n\n    function processNumber(field) {\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      } else {\n        field.placeholder = '—';\n      }\n      return field;\n    }\n\n    function setNestedPlaceholder(field) {\n      if (field.items) {\n        field.items.forEach(setNestedPlaceholder);\n      } else {\n        setPlaceholder(field, '—');\n      }\n    }\n\n    function processSelect(field) {\n      var _this9 = this;\n\n      var type = field.schema.type;\n      var config = field.batchConfig;\n\n      if (type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'replace';\n\n        if (_.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n        } else {\n          setNestedPlaceholder(field);\n        }\n\n        config.onSelect = {\n          replace: function replace(prev) {\n            if (prev && prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, _this9.model).set([]);\n            }\n          },\n          append: function append(prev) {\n            if (prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, _this9.model).set([]);\n            }\n          },\n          remove: function remove() {\n            var val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, _this9.model).set(val);\n          }\n        };\n      } else {\n\n        var first = _.first(config.ogValues);\n        //TODO: dynamically send back data\n        if (first && _.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(first);\n        }\n\n        if (!field.placeholder) {\n          setPlaceholder(field, '—');\n        }\n      }\n      return field;\n    }\n\n    function processDate(field) {\n      var config = field.batchConfig;\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      } else {\n        setPlaceholder(field, '—');\n      }\n      return field;\n    }\n\n    function processToggle(field) {\n      var config = field.batchConfig;\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n      return field;\n    }\n\n    function processSchema() {\n      var _this10 = this;\n\n      this.schema.schema.required = undefined;\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n      console.log('this.defaults:', this.defaults);\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n\n      $rootScope.$on('schemaFormBeforeAppendToArray', function (e, form) {\n        return _this10.restoreDefaults(form);\n      });\n      $rootScope.$on('schemaFormAfterAppendToArray', function (e, form) {\n        return _this10.resetDefaults(form);\n      });\n    }\n\n    function restoreDefaults(form) {\n      var _this11 = this;\n\n      if (!form.items) return;\n      form.items.forEach(function (item) {\n        if (item.key) {\n          if (item.schema) {\n            var key = cnFlexFormService.getKey(item.key).replace(/\\[\\d+]/g, '[]');\n            item.schema.default = _this11.defaults[key];\n          }\n          item.placeholder = item._placeholder;\n          item.noBatchPlaceholder = true;\n        }\n        _this11.restoreDefaults(item);\n      });\n    }\n\n    function resetDefaults(form) {\n      var _this12 = this;\n\n      if (!form.items) return;\n      form.items.forEach(function (item) {\n        if (item.schema) {\n          item.schema.default = undefined;\n        }\n        _this12.resetDefaults(item);\n      });\n    }\n\n    function clearSchemaDefault(schema, key) {\n      // save for hydrating newly added array items\n      this.defaults[key] = schema.default;\n\n      // then remove because we don't want to override saved values with defaults\n      schema.default = undefined;\n\n      if (schema.type === 'object' && schema.properties) {\n        schema.required = undefined;\n        // _.each(schema.properties, this.clearSchemaDefault.bind(this));\n        for (var k in schema.properties) {\n          this.clearSchemaDefault(schema.properties[k], key + '.' + k);\n        }\n      } else if (schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items, key + '[]');\n      }\n    }\n\n    function showResults(results, config) {\n      var _this13 = this;\n\n      this.results = results;\n      this.resultsConfig = config;\n\n      if (this.modal) {\n        this.modal.close();\n      }\n\n      this.modal = cnModal.open({\n        controller: 'BatchResults',\n        controllerAs: 'vm',\n        templateUrl: 'cn-batch-forms/batch-results.html',\n        resolve: {\n          parent: function parent() {\n            return _this13;\n          }\n        }\n      });\n    }\n\n    function closeModal() {\n      this.modal.close();\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = '\\n          <div class=\"well\">\\n            <h5>Edit Modes</h5>\\n            <p>Some types of fields allow you to apply batch changes in\\n            different ways:</p>\\n            <dl>\\n              <dt>Replace:</dt>\\n              <dd>Replace all the original values\\n              with the new value. <em>(If you don\\'t see an <b>Edit Mode</b> option\\n              for a field, this will be the default)</em></dd>\\n            </dl>\\n            ' + this.getEditModeLegends() + '\\n          </div>';\n    }\n\n    function getEditModeLegends() {\n      var legends = '';\n\n      if (this.editModes.prepend) {\n        legends += '\\n            <dl>\\n              <dt>Prepend:</dt>\\n              <dd>Add the new value to the start of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.append) {\n        legends += '\\n            <dl>\\n              <dt>Append:</dt>\\n              <dd>Affix the new value at the end of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.decrease) {\n        legends += '\\n            <dl>\\n              <dt>Decrease:</dt>\\n              <dd>Subtract the given value from the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.increase) {\n        legends += '\\n            <dl>\\n              <dt>Increase:</dt>\\n              <dd>Add the given value to the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      return legends;\n    }\n  }\n})();\n\"use strict\";\n\nangular.module(\"cn.batch-forms\").run([\"$templateCache\", function ($templateCache) {\n  $templateCache.put(\"cn-batch-forms/batch-results.html\", \"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.submit(handler)\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list card-flex\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n\\n    <div class=\\\"padding-20\\\"\\n         ng-if=\\\"vm.text\\\">\\n      <p class=\\\"no-margin text-mute\\\"\\n         ng-bind-html=\\\"vm.text\\\">\\n      </p>\\n    </div>\\n\\n    <table class=\\\"table gutterless\\\">\\n      <tbody>\\n      <tr ng-repeat=\\\"result in vm.results\\\">\\n        <td class=\\\"col-sm-10\\\">\\n          <h6 ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{result.body.id}})</span>\\n          </h6>\\n          <h6 ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{vm.originals[$index].id}})</span>\\n          </h6>\\n          <p ng-class=\\\"{\\n               \\'text-danger\\': result.status != 200,\\n               \\'text-primary\\': result.status == 200\\n             }\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n            {{result.status == 200 ? \\'updated successfully\\' : result.body.message}}\\n          </p>\\n        </td>\\n        <td class=\\\"col-sm-2 text-center\\\">\\n          <a ng-show=\\\"result.editSref\\\"\\n             class=\\\"btn btn-sm btn-transparent\\\"\\n             ui-sref=\\\"{{result.editSref}}\\\">\\n            <i class=\\\"icn-edit\\\"></i>\\n          </a>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\");\n}]);","(function() {\n  angular.module('cn.batch-forms', [\n    'schemaForm',\n    'cn.flex-form',\n    'cn.util',\n    'ui.router'\n  ]);\n})();","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$stateParams'];\n\n  function BatchResults($state, parent, $stateParams) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    //vm.errors = _.reject(vm.results, {status: 200});\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n    vm.formName = $state.current.name;\n    vm.text = vm.config.text;\n\n    vm.activate = activate;\n    vm.submit = submit;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      console.log('vm.parent:', vm.parent);\n      if(vm.config.idParam) {\n        vm.results.forEach((result, i) => {\n          let params = _.assign({}, $stateParams, {[vm.config.idParam]: vm.originals[i].id});\n          result.editSref = `${$state.current.name}(${angular.toJson(params)})`;\n          console.log('result.editSref:', result);\n        });\n      }\n\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Continue Editing'\n          }, {\n            text: 'Done',\n            handler: () => {\n              if(vm.config && vm.config.returnState) {\n                $state.go(vm.config.returnState.name, vm.config.returnState.params);\n              }\n            }\n          }]\n        },\n        noData: true\n      };\n\n    }\n\n    function submit(handler) {\n      console.log('submit:', handler);\n      vm.parent.closeModal();\n      if(handler) {\n        handler();\n      }\n    }\n\n  }\n\n})();","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .config(cnBatchFormsConfig)\n      .run(addTemplates);\n\n  const TYPE = 'cn-dirty-check';\n  const TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function cnBatchFormsConfig(cnFlexFormServiceProvider) {\n    cnFlexFormServiceProvider.registerField({\n      condition: (field) => field.type === TYPE,\n      handler: (field) => {/*console.log('field.readonly:', field.key, field.readonly)*/},\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(\n        TEMPLATE_URL,\n        '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 ng-disabled=\"form.readonly\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>'\n    );\n  }\n\n})();","(function() {\n  angular\n      .module('cn.batch-forms')\n      .provider('cnBatchForms', cnBatchFormsProvider);\n\n  let fieldTypeHandlers = {\n    'string': 'processDefault',\n    'number': 'processNumber',\n    'url': 'processDefault',\n    'array': 'processSelect',\n    'cn-autocomplete': 'processSelect',\n    'cn-currency': 'processNumber',\n    'cn-datetimepicker': 'processDate',\n    'cn-toggle': 'processToggle'\n  };\n\n  function cnBatchFormsProvider() {\n    return {\n      registerField,\n      $get: cnBatchForms\n    };\n\n    ///////////\n\n    function registerField(fieldType) {\n      if(fieldType.handler) {\n        fieldTypeHandlers[fieldType.type] = fieldType.handler;\n      }\n    }\n  }\n\n  cnBatchForms.$inject = [\n    'cnFlexFormService',\n    'cnFlexFormTypes',\n    'sfPath',\n    '$rootScope',\n    '$timeout',\n    'cnModal'\n  ];\n  function cnBatchForms(\n      cnFlexFormService,\n      cnFlexFormTypes,\n      sfPath,\n      $rootScope,\n      $timeout,\n      cnModal) {\n\n    let instances = 0;\n\n    return {\n      augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if(!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor,\n        addMeta,\n        addToSchema,\n        buildModelDefault,\n        clearSchemaDefault,\n        closeModal,\n        createDirtyCheck,\n        createBatchField,\n        getChangedModels,\n        getEditModeLegends,\n        getFormFromRegister,\n        getModelValues,\n        getSchemaDefault,\n        getTitleMap,\n        handleLinks,\n        onFieldScope,\n        onReprocessField,\n        processCondition,\n        processSchema,\n        processForm,\n        processField,\n        processItems,\n        processDate,\n        processDefault,\n        processLinkList,\n        processLinks,\n        processNumber,\n        processSelect,\n        processToggle,\n        registerFieldWatch,\n        resetDefaults,\n        restoreDefaults,\n        setValidation,\n        setValue,\n        showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n      console.log('BatchForms:', schema, model, models);\n\n      this.instance = instances;\n      //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.defaults = {};\n      this.editModes = {};\n      this.fieldRegister = {};\n\n      this.processSchema();\n\n      if(schema.forms) {\n        let i = schema.forms.length - 1;\n        while(i > -1) {\n          this.processForm(schema.forms[i]);\n          if(!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n        //schema.forms.forEach(this.processForm.bind(this));\n      }\n      else {\n        this.processForm(schema.form);\n      }\n\n      this.addMeta();\n      this.processLinks();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n      $rootScope.$on('cnFlexFormReprocessField', this.onReprocessField.bind(this));\n\n      console.log('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      let key = cnFlexFormService.getKey(scope.form.key);\n\n      //console.log('onFieldScope:', key, scope.form.key, scope);\n      if(!key.startsWith('__')) {\n        if (!this.fieldRegister[key]) this.fieldRegister[key] = {};\n        this.fieldRegister[key].ngModel = scope.ngModel;\n        this.fieldRegister[key].scope = scope;\n      }\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if(scope.form.key[0] === '__batchConfig') {\n        scope.ngModel.$pristine = false;\n      }\n    }\n\n    function processForm(form) {\n      this.processItems(form, 'form');\n    }\n\n    function processItems(field, children = 'items') {\n      //console.log('processItems:', field, children);\n      let i = field[children].length - 1;\n      while(i > -1) {\n        let child = this.processField(field[children][i]);\n        if(child && child.batchConfig) {\n          //console.log('child:', child);\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n          let batchField = this.createBatchField(child);\n          let dirtyCheck = child.key && this.createDirtyCheck(child);\n          // add mode buttons after field\n          field[children][i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n            condition: this.processCondition(child.condition)\n          };\n          delete child.condition;\n          if(child.key) {\n            if (!this.fieldRegister[child.key]) this.fieldRegister[child.key] = {};\n            this.fieldRegister[child.key].field = child;\n            this.fieldRegister[child.key].dirtyCheck = dirtyCheck;\n          }\n        }\n        if(!child) {\n          // remove field if batch isn't supported by it or children\n          field[children].splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processCondition(condition) {\n      return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n    }\n\n    function processField(field) {\n      //console.log('processField:', field.batchConfig, field);\n      if(field.key) {\n        if(!field.batchConfig) return false;\n\n        field._key = field.key;\n        field._placeholder = field.placeholder;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n\n        delete field.required;\n        if(field.conditionals) delete field.conditionals.required;\n\n        let fieldType = cnFlexFormTypes.getFieldType(field);\n        let handler = fieldTypeHandlers[fieldType];\n\n        if(handler) {\n          if(_.isString(handler)) handler = this[handler];\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          if(_.allEqual(field.batchConfig.ogValues)) {\n            let key = `__ogValues[\"${field.key}\"]`;\n            let first = _.first(field.batchConfig.ogValues);\n            cnFlexFormService.parseExpression(key, this.model).set(first);\n          }\n\n          return handler.bind(this)(field);\n        }\n        else return false;\n      }\n      else if(field.items) {\n        if(field.batchConfig) {\n          field.items.forEach(child => {\n            child.batchConfig = _.clone(field.batchConfig);\n          });\n        }\n        this.processItems(field);\n        if(!field.items.length) return false;\n\n        if(field.batchConfig) {\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.key = `component_${_.uniqueId()}`;\n          field.batchConfig.watch = [];\n\n          field.items.forEach((item, i) => {\n            let child = item.items[0];\n            if(!i) {\n              field.batchConfig.editModes = child.batchConfig.editModes;\n              field.batchConfig.default = child.batchConfig.default;\n            }\n            field.batchConfig.watch.push({\n              resolution: `model.__batchConfig[\"${child.key}\"] = model.__batchConfig[\"${field.batchConfig.key}\"]`\n            });\n            item.items[2].condition = 'false';\n          });\n        }\n      }\n      return field;\n    }\n\n    function getTitleMap(editModes) {\n      editModes = editModes || ['replace'];\n\n      return editModes.map(value => {\n        this.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      let batchConfig = field.batchConfig;\n      let key = `__batchConfig[\"${field.key || batchConfig.key}\"]`;\n\n      let batchField = {\n        key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check',\n        watch: batchConfig.watch || []\n      };\n\n      if(batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(batchConfig.default)\n      });\n\n      if(batchConfig.onSelect) {\n        batchField.watch.push({\n          resolution: (val, prev) => {\n            if(!val) return;\n            batchConfig.onSelect[val](prev);\n          }\n        });\n      }\n\n      return batchField;\n    }\n\n    function setValidation(field, val) {\n      let key = cnFlexFormService.getKey(field.key);\n\n      if (field.schema && field.schema.type === 'array') {\n        if (_.isUndefined(field.schema._minItems)) field.schema._minItems = field.schema.minItems;\n        field.schema.minItems = val ? field.schema._minItems : 0;\n      }\n\n      let forms = key ? this.getFormFromRegister(key) : [];\n\n      forms.forEach(form => {\n        if(form.scope) {\n          form.scope.options = {\n            tv4Validation: val\n          };\n          Object.keys(form.ngModel.$error)\n              .filter(function(k) {\n                return k.indexOf('tv4-') === 0;\n              })\n              .forEach(function(k) {\n                form.ngModel.$setValidity(k, true);\n              });\n        }\n      });\n      if (field.items) {\n        field.items.forEach(i => this.setValidation(i, val));\n      }\n    }\n\n    function getFormFromRegister(key) {\n      if (key.includes('[]')) {\n        let re = new RegExp(key.replace('[]', '\\\\[\\\\d*\\\\]'));\n        return _.filter(this.fieldRegister, (form, k) => {\n          return re.test(k);\n        });\n      } else if (this.fieldRegister[key]) {\n        return [this.fieldRegister[key]];\n      } else return [];\n    }\n\n    function createDirtyCheck(field) {\n      //let path = sfPath.parse(field.key);\n      let key = `__dirtyCheck[\"${field.key || field.batchConfig.key}\"]`;\n      //let child = path.length > 1;\n      let htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if(field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      let dirtyCheck = {\n        key,\n        htmlClass,\n        type: 'cn-dirty-check',\n        watch: [{\n          resolution: (val) => {\n            //$timeout(() => {\n              this.setValidation(field, val);\n              $rootScope.$broadcast('schemaFormValidate');\n            //});\n          }\n        }]\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      let model = this.buildModelDefault(field.key, field.schema) || {};\n\n      dirtyCheck.fieldWatch = {\n        resolution: val => {\n          if(!angular.equals(val, model[field._key])) {\n            let register = this.fieldRegister[field._key];\n            if(register) {\n              if((register.ngModel && register.ngModel.$dirty) || register.initiated) {\n                //console.log('dirtyCheck.key:', key);\n                cnFlexFormService.parseExpression(key, this.model).set(true);\n              }\n              else {\n                register.initiated = true;\n              }\n            }\n            // debug\n            else {\n              console.log('noregister:', field, this.fieldRegister);\n            }\n          }\n        }\n      };\n\n      this.registerFieldWatch(field, dirtyCheck.fieldWatch);\n\n      return dirtyCheck;\n    }\n\n    function registerFieldWatch(field, watch) {\n      if(field.watch) {\n        if(!_.isArray(field.watch)) field.watch = [field.watch];\n      }\n      else {\n        field.watch = [];\n      }\n\n      field.watch.push(watch);\n    }\n\n    function onReprocessField(e, key) {\n      let register = this.fieldRegister[key];\n      if (register) {\n        this.registerFieldWatch(register.field, register.dirtyCheck.fieldWatch);\n      }\n    }\n\n    function handleLinks(list, hard) {\n      return val => {\n        //console.log('val:', list);\n        list.forEach(key => {\n          if(!hard) {\n            let register = this.fieldRegister[key];\n            if(!register.ngModel || !register.ngModel.$dirty) return;\n          }\n          cnFlexFormService.parseExpression(`__dirtyCheck[\"${key}\"]`, this.model).set(val);\n        });\n      };\n    }\n\n    function processLinkList(list, hard) {\n      list.forEach(keys => {\n        keys.forEach(key => {\n          let register = this.fieldRegister[key];\n          if(!register) {\n            console.error('noRegister:', key);\n            return;\n          }\n          let {field, dirtyCheck} = register;\n          let handler = this.handleLinks(_.without(keys, key), hard);\n          field.watch = field.watch || [];\n          dirtyCheck.watch = dirtyCheck.watch || [];\n          field.watch.push({resolution() {handler(true);}});\n          dirtyCheck.watch.push({resolution: handler});\n        });\n      });\n    }\n\n    function processLinks() {\n      console.log('this.schema.batchConfig:', this.schema.batchConfig);\n      if(this.schema.batchConfig) {\n        if(this.schema.batchConfig.links) {\n          this.processLinkList(this.schema.batchConfig.links);\n        }\n        if(this.schema.batchConfig.hardLinks) {\n          this.processLinkList(this.schema.batchConfig.hardLinks, true);\n        }\n      }\n    }\n\n    function buildModelDefault(key, schema) {\n      if (schema.type === 'array') {\n        let model = {[key]: []};\n        if (schema.items) {\n          _.each(schema.items.properties, (v, k) => {\n            if (v.type === 'array') {\n              model[key].push(buildModelDefault(k, v));\n            }\n          });\n        }\n        return model;\n      }\n    }\n\n    function addToSchema(key, schema) {\n      let path = sfPath.parse(key);\n      let depth = this.schema.schema;\n\n      path.forEach((k, i) => {\n        if(i === path.length - 1) {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        }\n        else if(k === '') {\n          if(!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        }\n        else {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          if(!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(model => {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      let models = [];\n\n      _.each(this.fieldRegister, (register, key) => {\n        let dirty = cnFlexFormService\n            .parseExpression(`__dirtyCheck[\"${key}\"]`, this.model)\n            .get();\n\n        if(!dirty) return;\n\n        let mode = cnFlexFormService\n            .parseExpression(`__batchConfig[\"${key}\"]`, this.model)\n            .get();\n\n        this.models.forEach((model, i) => {\n          models[i] = models[i] || {};\n\n          let path = sfPath.parse(key);\n          // if column is json, we want to merge updates into model's current json value\n          // so we copy the current value if we haven't already (on a previous iteration)\n          if(path.length > 1 && !models[i][path[0]]) {\n            models[i][path[0]] = this.models[i][path[0]];\n          }\n\n          let assignable = cnFlexFormService\n              .parseExpression(key, this.models[i])\n              .getAssignable();\n\n          // if column is json and model's current value doesn't have parent property for\n          // key we're updating, just copy over entire key instead of using specific\n          // edit mode logic for new value\n          if(assignable.fullPath !== key) {\n            let val = cnFlexFormService\n                .parseExpression(assignable.fullPath, this.model)\n                .get();\n\n            cnFlexFormService\n                .parseExpression(assignable.fullPath, this.models[i])\n                .set(val);\n          }\n          else {\n            let val = cnFlexFormService.parseExpression(key, this.model).get();\n            let update = cnFlexFormService.parseExpression(key, models[i]);\n            let original = cnFlexFormService.parseExpression(key, this.models[i]);\n\n            //console.log('val, update, original:', val, update.get(), original.get(), key);\n            this.setValue(val, update, original, mode);\n          }\n        });\n      });\n\n      //console.log('models:', models);\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if(mode === 'replace') {\n        update.set(val);\n      }\n      else if(mode === 'append') {\n        let originalVal = original.get();\n        if (_.isArray(originalVal)) {\n          const uniqVal = _([])\n            .concat(originalVal, val)\n            .uniq((value) => value.key || value)\n            .value();\n\n          update.set(uniqVal);\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${originalVal} ${val.trim()}`);\n        }\n        else {\n          update.set(val);\n        }\n      }\n      else if(mode === 'prepend') {\n        let originalVal = original.get();\n        if(_.isArray(originalVal)) {\n          update.set(val.concat(originalVal));\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${val.trim()} ${originalVal}`);\n        }\n        else {\n          update.set(val);\n        }\n      }\n      else if(mode === 'increase') {\n        update.set(_.add(original.get() || 0, val));\n      }\n      else if(mode === 'decrease') {\n        update.set(_.subtract(original.get() || 0, val));\n      }\n      else if(mode === 'stringReplace' && original.get()) {\n        let key = original.path().key;\n        let replaceString = cnFlexFormService.parseExpression(`_replace_${key}`, this.model);\n        let withString = cnFlexFormService.parseExpression(`_with_${key}`, this.model);\n        let expression = new RegExp(replaceString.get(), \"gi\");\n        update.set(original.get().replace(expression, withString.get()));\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function setPlaceholder(field, val) {\n      if(!field.noBatchPlaceholder) {\n        field._placeholder = val;\n      }\n    }\n\n    function processDefault(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append', 'stringReplace'];\n\n      config.default = config.default || 'append';\n\n      if(!config.editModes.includes(config.default)) {\n        config.default = config.editModes[0];\n      }\n\n      config.onSelect = {\n        replace: () => {\n          if(_.allEqual(config.ogValues)) {\n            cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n          }\n          else {\n            setPlaceholder(field, '—');\n          }\n        },\n        append: () => {\n          setPlaceholder(field, '');\n        },\n        prepend: () => {\n          setPlaceholder(field, '');\n        },\n        stringReplace: () => {\n        }\n      };\n\n      if(config.editModes.includes('stringReplace')) {\n        let dirtyCheck = `__dirtyCheck[\"${field.key || field.batchConfig.key}\"]`;\n        let configKey = `__batchConfig[\"${field.key || field.batchConfig.key}\"]`;\n        let replaceKey = `_replace_${field.key || field.batchConfig.key}`;\n        let withKey = `_with_${field.key || field.batchConfig.key}`;\n        let stringReplaceField = {\n          type: 'component',\n          items: [\n          {\n            key: replaceKey,\n            title: 'Replace',\n            watch: {\n              resolution: `model.${dirtyCheck} = true`\n            }\n          }, {\n            key: withKey,\n            title: 'With',\n            watch: {\n              resolution: `model.${dirtyCheck} = true`\n            }\n          }],\n          condition: `model.${configKey} === 'stringReplace'`\n        };\n\n        config.key = field.key;\n\n        field = {\n          type: 'section',\n          condition: field.condition,\n          batchConfig: config,\n          schema: field.schema,\n          key: field.key,\n          items: [_.extend(field, {condition: `model.${configKey} !== 'stringReplace'`}), stringReplaceField]\n        };\n\n        this.addToSchema(replaceKey, { type: 'string' });\n        this.addToSchema(withKey, { type: 'string' });\n      }\n        return field;\n    }\n\n    function processNumber(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n      else {\n        field.placeholder = '—';\n      }\n      return field;\n    }\n\n    function setNestedPlaceholder(field) {\n      if (field.items) {\n        field.items.forEach(setNestedPlaceholder);\n      } else {\n        setPlaceholder(field, '—');\n      }\n    }\n\n    function  processSelect(field) {\n      let type = field.schema.type;\n      let config = field.batchConfig;\n\n      if(type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'replace';\n\n        if (_.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n        } else {\n          setNestedPlaceholder(field);\n        }\n\n        config.onSelect = {\n          replace: (prev) => {\n            if(prev && prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          append: (prev) => {\n            if(prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          remove: () => {\n            let val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, this.model).set(val);\n          }\n        };\n      }\n      else {\n\n        let first = _.first(config.ogValues);\n        //TODO: dynamically send back data\n        if(first && _.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(first);\n        }\n\n        if(!field.placeholder) {\n          setPlaceholder(field, '—');\n        }\n      }\n      return field;\n    }\n\n    function processDate(field) {\n      let config = field.batchConfig;\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n      else {\n        setPlaceholder(field, '—');\n      }\n      return field;\n    }\n\n    function processToggle(field) {\n      let config = field.batchConfig;\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n      return field;\n    }\n\n    function processSchema() {\n      this.schema.schema.required = undefined;\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n      console.log('this.defaults:', this.defaults);\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n\n      $rootScope.$on('schemaFormBeforeAppendToArray', (e, form) => this.restoreDefaults(form));\n      $rootScope.$on('schemaFormAfterAppendToArray', (e, form) => this.resetDefaults(form));\n    }\n\n    function restoreDefaults(form) {\n      if(!form.items) return;\n      form.items.forEach(item => {\n        if(item.key) {\n          if(item.schema) {\n            let key = cnFlexFormService.getKey(item.key).replace(/\\[\\d+]/g, '[]');\n            item.schema.default = this.defaults[key];\n          }\n          item.placeholder = item._placeholder;\n          item.noBatchPlaceholder = true;\n        }\n        this.restoreDefaults(item);\n      });\n    }\n\n    function resetDefaults(form) {\n      if(!form.items) return;\n      form.items.forEach(item => {\n        if(item.schema) {\n          item.schema.default = undefined;\n        }\n        this.resetDefaults(item);\n      });\n    }\n\n    function clearSchemaDefault(schema, key) {\n      // save for hydrating newly added array items\n      this.defaults[key] = schema.default;\n\n      // then remove because we don't want to override saved values with defaults\n      schema.default = undefined;\n\n      if(schema.type === 'object' && schema.properties) {\n        schema.required = undefined;\n        // _.each(schema.properties, this.clearSchemaDefault.bind(this));\n        for(let k in schema.properties) {\n          this.clearSchemaDefault(schema.properties[k], `${key}.${k}`);\n        }\n      }\n      else if(schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items, `${key}[]`);\n      }\n    }\n\n    function showResults(results, config) {\n      this.results = results;\n      this.resultsConfig = config;\n\n      if(this.modal) {\n        this.modal.close();\n      }\n\n      this.modal = cnModal.open({\n        controller: 'BatchResults',\n        controllerAs: 'vm',\n        templateUrl: 'cn-batch-forms/batch-results.html',\n        resolve: {\n          parent: () => this\n        }\n      });\n    }\n\n    function closeModal() {\n      this.modal.close();\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = `\n          <div class=\"well\">\n            <h5>Edit Modes</h5>\n            <p>Some types of fields allow you to apply batch changes in\n            different ways:</p>\n            <dl>\n              <dt>Replace:</dt>\n              <dd>Replace all the original values\n              with the new value. <em>(If you don't see an <b>Edit Mode</b> option\n              for a field, this will be the default)</em></dd>\n            </dl>\n            ${this.getEditModeLegends()}\n          </div>`;\n    }\n\n    function getEditModeLegends() {\n      let legends = '';\n\n      if(this.editModes.prepend) {\n        legends += `\n            <dl>\n              <dt>Prepend:</dt>\n              <dd>Add the new value to the start of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.append) {\n        legends += `\n            <dl>\n              <dt>Append:</dt>\n              <dd>Affix the new value at the end of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.decrease) {\n        legends += `\n            <dl>\n              <dt>Decrease:</dt>\n              <dd>Subtract the given value from the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.increase) {\n        legends += `\n            <dl>\n              <dt>Increase:</dt>\n              <dd>Add the given value to the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      return legends;\n    }\n  }\n\n})();\n","angular.module(\"cn.batch-forms\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"cn-batch-forms/batch-results.html\",\"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.submit(handler)\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list card-flex\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n\\n    <div class=\\\"padding-20\\\"\\n         ng-if=\\\"vm.text\\\">\\n      <p class=\\\"no-margin text-mute\\\"\\n         ng-bind-html=\\\"vm.text\\\">\\n      </p>\\n    </div>\\n\\n    <table class=\\\"table gutterless\\\">\\n      <tbody>\\n      <tr ng-repeat=\\\"result in vm.results\\\">\\n        <td class=\\\"col-sm-10\\\">\\n          <h6 ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{result.body.id}})</span>\\n          </h6>\\n          <h6 ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{vm.originals[$index].id}})</span>\\n          </h6>\\n          <p ng-class=\\\"{\\n               \\'text-danger\\': result.status != 200,\\n               \\'text-primary\\': result.status == 200\\n             }\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n            {{result.status == 200 ? \\'updated successfully\\' : result.body.message}}\\n          </p>\\n        </td>\\n        <td class=\\\"col-sm-2 text-center\\\">\\n          <a ng-show=\\\"result.editSref\\\"\\n             class=\\\"btn btn-sm btn-transparent\\\"\\n             ui-sref=\\\"{{result.editSref}}\\\">\\n            <i class=\\\"icn-edit\\\"></i>\\n          </a>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\");}]);"]}