{"version":3,"sources":["all.min.js","_.cn-batch-forms.module.js","batch-results.js","cn-batch-forms.routes.js","cn-batch-forms.service.js","templates.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","angular","module","BatchResults","$state","parent","$timeout","activate","console","log","vm","results","cancel","headerConfig","title","main","actionConfig","actions","text","noData","go","this","originals","models","config","resultsConfig","displayName","done","controller","$inject","cnBatchFormsConfig","cnFlexFormServiceProvider","cnFlexFormModalLoaderServiceProvider","registerField","condition","field","type","TYPE","handler","templateUrl","TEMPLATE_URL","addMapping","controllerAs","addTemplates","$templateCache","put","run","cnBatchForms","cnFlexFormService","cnFlexFormTypes","sfPath","$rootScope","cnFlexFormModalLoaderService","augmentSchema","schema","model","length","service","BatchForms","create","constructor","addMeta","addToSchema","clearDefaults","clearSchemaDefault","closeModal","createDirtyCheck","createBatchField","getChangedModels","getEditModeLegends","getModelValues","getSchemaDefault","getTitleMap","onFieldScope","processForm","processField","processItems","processDate","processDefault","processNumber","processSelect","processToggle","setValue","showResults","instance","instances","resolveMapping","editModes","fieldRegister","forms","i","form","splice","$on","bind","event","scope","_key","ngModel","$pristine","children","arguments","undefined","child","show","batchConfig","htmlClass","batchField","dirtyCheck","items","getSchema","properties","fieldType","getFieldType","fieldTypeHandlers","_","isObject","ogValues","_this","map","name","capitalize","def","titleMap","btnClass","default","onSelect","watch","resolution","val","prev","_this2","path","parse","notitle","readonly","isArray","push","equals","register","$dirty","initiated","parseExpression","set","depth","forEach","k","get","_this3","each","dirty","mode","update","original","originalVal","concat","isString","trim","replace","uniq","placeholder","first","append","prepend","_this4","remove","chain","flatten","every","displayProperty","find","valueProperty","moment","format","onValue","undefinedClass","required","__batchConfig","__dirtyCheck","modal","modalId","onCloseModal","e","toState","toParams","returnState","params","meta","legends","decrease","increase","string","number","cn-autocomplete","cn-currency","cn-datetimepicker","cn-toggle","factory"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  angular.module('cn.batch-forms', ['schemaForm', 'cn.flex-form', 'cn.util', 'ui.router']);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$timeout'];\n\n  function BatchResults($state, parent, $timeout) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n\n    vm.activate = activate;\n    vm.cancel = cancel;\n    vm.done = cancel;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      console.log('vm.parent:', vm.parent);\n\n      if (!vm.results) {\n        // the modal doesn't go away without the timeout\n        $timeout(vm.cancel);\n      }\n\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Cool'\n          }]\n        },\n        noData: true\n      };\n    }\n\n    function cancel() {\n      $state.go('^');\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').config(cnBatchFormsConfig).run(addTemplates);\n\n  var TYPE = 'cn-dirty-check';\n  var TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = ['cnFlexFormServiceProvider', 'cnFlexFormModalLoaderServiceProvider'];\n\n  function cnBatchFormsConfig(cnFlexFormServiceProvider, cnFlexFormModalLoaderServiceProvider) {\n\n    cnFlexFormServiceProvider.registerField({\n      condition: function condition(field) {\n        return field.type === TYPE;\n      },\n      handler: function handler(field) {/*console.log('field.readonly:', field.key, field.readonly)*/},\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n\n    cnFlexFormModalLoaderServiceProvider.addMapping('results', {\n      controller: 'BatchResults',\n      controllerAs: 'vm',\n      templateUrl: 'cn-batch-forms/batch-results.html'\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(TEMPLATE_URL, '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 ng-disabled=\"form.readonly\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>');\n  }\n})();\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n(function () {\n  angular.module('cn.batch-forms').factory('cnBatchForms', cnBatchForms);\n\n  cnBatchForms.$inject = ['cnFlexFormService', 'cnFlexFormTypes', 'sfPath', '$rootScope', '$state', '$timeout', 'cnFlexFormModalLoaderService'];\n  function cnBatchForms(cnFlexFormService, cnFlexFormTypes, sfPath, $rootScope, $state, $timeout, cnFlexFormModalLoaderService) {\n\n    var instances = 0;\n\n    var fieldTypeHandlers = {\n      'string': processDefault,\n      'number': processNumber,\n      'cn-autocomplete': processSelect,\n      'cn-currency': processNumber,\n      'cn-datetimepicker': processDate,\n      'cn-toggle': processToggle\n    };\n\n    return {\n      augmentSchema: augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if (!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor: constructor,\n        addMeta: addMeta,\n        addToSchema: addToSchema,\n        clearDefaults: clearDefaults,\n        clearSchemaDefault: clearSchemaDefault,\n        closeModal: closeModal,\n        createDirtyCheck: createDirtyCheck,\n        createBatchField: createBatchField,\n        getChangedModels: getChangedModels,\n        getEditModeLegends: getEditModeLegends,\n        getModelValues: getModelValues,\n        getSchemaDefault: getSchemaDefault,\n        getTitleMap: getTitleMap,\n        onFieldScope: onFieldScope,\n        processForm: processForm,\n        processField: processField,\n        processItems: processItems,\n        processDate: processDate,\n        processDefault: processDefault,\n        processNumber: processNumber,\n        processSelect: processSelect,\n        processToggle: processToggle,\n        setValue: setValue,\n        showResults: showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n      console.log('BatchForms:', schema, model, models);\n\n      this.instance = instances;\n      cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.editModes = {};\n      this.fieldRegister = {};\n\n      this.clearDefaults();\n\n      if (schema.forms) {\n        var i = schema.forms.length - 1;\n        while (i > -1) {\n          this.processForm(schema.forms[i]);\n          if (!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n        //schema.forms.forEach(this.processForm.bind(this));\n      } else {\n          this.processForm(schema.form);\n        }\n\n      this.addMeta();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n\n      console.log('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      var key = scope.form._key;\n      //console.log('onFieldScope:', key, scope.form.key, scope);\n      if (key) {\n        this.fieldRegister[key].ngModel = scope.ngModel;\n      }\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if (scope.form.key[0] === '__batchConfig') {\n          scope.ngModel.$pristine = false;\n        }\n    }\n\n    function processForm(form) {\n      this.processItems(form, 'form');\n    }\n\n    function processItems(field) {\n      var children = arguments.length <= 1 || arguments[1] === undefined ? 'items' : arguments[1];\n\n      //console.log('processItems:', field, children);\n      var i = field[children].length - 1;\n      while (i > -1) {\n        var child = field[children][i];\n        var show = this.processField(child);\n        if (child.batchConfig && show) {\n          //console.log('child:', child);\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field';\n          var batchField = this.createBatchField(child);\n          var dirtyCheck = this.createDirtyCheck(child);\n          // add mode buttons after field\n          field[children][i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: [child, dirtyCheck, batchField],\n            condition: child.condition\n          };\n          delete child.condition;\n          this.fieldRegister[child.key] = {\n            field: child\n          };\n        }\n        if (!show) {\n          // remove field if batch isn't supported by it or children\n          field[children].splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processField(field) {\n      //console.log('processField:', field.batchConfig, field);\n      if (field.key) {\n        if (!field.batchConfig) return false;\n\n        field._key = field.key;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n        //field.required = false;\n\n        var fieldType = cnFlexFormTypes.getFieldType(field);\n        var handler = fieldTypeHandlers[fieldType];\n\n        if (handler) {\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          handler.bind(this)(field);\n        } else return false;\n      } else if (field.items) {\n        this.processItems(field);\n        if (!field.items.length) return false;\n      }\n      return true;\n    }\n\n    function getTitleMap(editModes) {\n      var _this = this;\n\n      editModes = editModes || ['replace'];\n\n      return editModes.map(function (value) {\n        _this.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value: value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      var key = '__batchConfig[\"' + field.key + '\"]';\n\n      var batchField = {\n        key: key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(field.batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check'\n      };\n\n      if (batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(field.batchConfig.default)\n      });\n\n      if (field.batchConfig.onSelect) {\n        batchField.watch = {\n          resolution: function resolution(val, prev) {\n            console.log('field.batchConfig.onSelect, val, prev:', field.batchConfig.onSelect, val, prev);\n            field.batchConfig.onSelect[val](prev);\n          }\n        };\n      }\n\n      return batchField;\n    }\n\n    function createDirtyCheck(field) {\n      var _this2 = this;\n\n      var path = sfPath.parse(field.key);\n      var key = '__dirtyCheck[\"' + path[0] + '\"]';\n      var child = path.length > 1;\n      var htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if (field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      var dirtyCheck = {\n        key: key,\n        htmlClass: htmlClass,\n        type: 'cn-dirty-check'\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      console.log('dirtyCheck:', field.key, dirtyCheck.readonly);\n\n      if (!child) {\n        if (field.watch) {\n          if (!_.isArray(field.watch)) field.watch = [field.watch];\n        } else {\n          field.watch = [];\n        }\n\n        field.watch.push({\n          resolution: function resolution(val, prev) {\n            if (!angular.equals(val, prev)) {\n              var register = _this2.fieldRegister[field.key];\n              if (register) {\n                if (register.ngModel && register.ngModel.$dirty || register.initiated) {\n                  console.log('dirtyCheck.key:', dirtyCheck.key);\n                  cnFlexFormService.parseExpression(dirtyCheck.key, _this2.model).set(true);\n                } else {\n                  console.log('initiated:', register);\n                  register.initiated = true;\n                }\n              }\n              // debug\n              else {\n                  console.log('noregister:', register);\n                }\n            }\n          }\n        });\n      }\n\n      return dirtyCheck;\n    }\n\n    function addToSchema(key, schema) {\n      var path = sfPath.parse(key);\n      var depth = this.schema.schema;\n\n      path.forEach(function (k, i) {\n        if (i === path.length - 1) {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        } else if (k === '') {\n          if (!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        } else {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          if (!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(function (model) {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      var _this3 = this;\n\n      var models = [];\n\n      _.each(this.fieldRegister, function (register, key) {\n        var dirty = cnFlexFormService.parseExpression('__dirtyCheck[\"' + key + '\"]', _this3.model).get();\n\n        console.log('key, dirty:', key, dirty, register);\n        if (!dirty) return;\n\n        var mode = cnFlexFormService.parseExpression('__batchConfig[\"' + key + '\"]', _this3.model).get();\n\n        _this3.models.forEach(function (model, i) {\n          if (!models[i]) models[i] = {};\n\n          var val = cnFlexFormService.parseExpression(key, _this3.model).get();\n          var update = cnFlexFormService.parseExpression(key, models[i]);\n          var original = cnFlexFormService.parseExpression(key, _this3.models[i]);\n\n          _this3.setValue(val, update, original, mode);\n        });\n      });\n\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if (mode === 'replace') {\n        update.set(val);\n      } else if (mode === 'append') {\n        var originalVal = original.get();\n        if (_.isArray(originalVal)) {\n          update.set(originalVal.concat(val));\n        } else if (_.isString(originalVal)) {\n          update.set(originalVal + ' ' + val.trim());\n        }\n      } else if (mode === 'prepend') {\n        var originalVal = original.get();\n        if (_.isArray(originalVal)) {\n          update.set(val.concat(originalVal));\n        } else if (_.isString(originalVal)) {\n          update.set(val.trim() + ' ' + originalVal);\n        }\n      } else if (mode === 'increase') {\n        update.set(original.get() + val);\n      } else if (mode === 'decrease') {\n        update.set(original.get() - val);\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function processDefault(field) {\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append'];\n\n      config.default = config.default || 'append';\n\n      config.onSelect = {\n        replace: function replace() {\n          if (_.uniq(config.ogValues).length === 1) {\n            field.placeholder = _.first(config.ogValues);\n          } else {\n            field.placeholder = '—';\n          }\n        },\n        append: function append() {\n          field.placeholder = '';\n        },\n        prepend: function prepend() {\n          field.placeholder = '';\n        }\n      };\n    }\n\n    function processNumber(field) {\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if (_.uniq(config.ogValues).length === 1) {\n        field.placeholder = _.first(config.ogValues);\n      } else {\n        field.placeholder = '—';\n      }\n    }\n\n    function processSelect(field) {\n      var _this4 = this;\n\n      var type = field.schema.type;\n      var config = field.batchConfig;\n\n      if (type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'append';\n\n        config.onSelect = {\n          replace: function replace(prev) {\n            if (prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, _this4.model).set([]);\n            }\n          },\n          append: function append(prev) {\n            if (prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, _this4.model).set([]);\n            }\n          },\n          remove: function remove() {\n            var val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, _this4.model).set(val);\n          }\n        };\n      } else {\n\n        var first = _.first(config.ogValues);\n        if (first && _.isObject(first)) {\n          if (_.every(config.ogValues, first)) {\n            field.placeholder = first[field.displayProperty || 'name'];\n          }\n        } else if (first && _.uniq(config.ogValues).length === 1) {\n          if (field.titleMap) {\n            first = _.find(field.titleMap, _defineProperty({}, field.valueProperty || 'value', first));\n          }\n          field.placeholder = first[field.displayProperty || 'name'];\n        }\n\n        if (!field.placeholder) {\n          field.placeholder = '—';\n        }\n      }\n    }\n\n    function processDate(field) {\n      var config = field.batchConfig;\n\n      if (_.uniq(config.ogValues).length === 1) {\n        field.placeholder = moment(_.first(config.ogValues)).format('M/DD/YYYY h:mm a');\n      } else {\n        field.placeholder = '—';\n      }\n    }\n\n    function processToggle(field) {\n      var config = field.batchConfig;\n\n      if (_.uniq(config.ogValues).length === 1) {\n        if (_.first(config.ogValues) == field.onValue) {\n          field.undefinedClass = 'semi-transparent';\n        } else {\n          field.undefinedClass = 'disabled semi-transparent';\n        }\n      }\n    }\n\n    function clearDefaults() {\n      this.schema.schema.required = [];\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n    }\n\n    function clearSchemaDefault(schema) {\n      schema.default = undefined;\n      if (schema.type === 'object' && schema.properties) {\n        _.each(schema.properties, this.clearSchemaDefault.bind(this));\n      } else if (schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items);\n      }\n    }\n\n    function showResults(results, config) {\n      console.log('showResults:', results, this);\n      this.results = results;\n      this.resultsConfig = config;\n\n      $state.go('.modal', {\n        modal: 'results',\n        modalId: this.instance\n      });\n\n      this.onCloseModal = $rootScope.$on('$stateChangeStart', this.closeModal.bind(this));\n    }\n\n    function closeModal(e, toState, toParams) {\n      console.log('closeModal:', e, toState, toParams);\n      console.log('this.resultsConfig:', this.resultsConfig);\n      this.onCloseModal();\n\n      var config = this.resultsConfig;\n      if (config && config.returnState) {\n        //timeout needed so current state\n        $timeout(function () {\n          return $state.go(config.returnState.name, config.returnState.params);\n        });\n      }\n\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = '\\n          <div class=\"well\">\\n            <h5>Edit Modes</h5>\\n            <p>Some types of fields allow you to apply batch changes in\\n            different ways:</p>\\n            <dl>\\n              <dt>Replace:</dt>\\n              <dd>Replace all the original values\\n              with the new value. <em>(If you don\\'t see an <b>Edit Mode</b> option\\n              for a field, this will be the default)</em></dd>\\n            </dl>\\n            ' + this.getEditModeLegends() + '\\n          </div>';\n    }\n\n    function getEditModeLegends() {\n      var legends = '';\n\n      if (this.editModes.prepend) {\n        legends += '\\n            <dl>\\n              <dt>Prepend:</dt>\\n              <dd>Add the new value to the start of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.append) {\n        legends += '\\n            <dl>\\n              <dt>Append:</dt>\\n              <dd>Affix the new value at the end of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.decrease) {\n        legends += '\\n            <dl>\\n              <dt>Decrease:</dt>\\n              <dd>Subtract the given value from the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.increase) {\n        legends += '\\n            <dl>\\n              <dt>Increase:</dt>\\n              <dd>Add the given value to the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      return legends;\n    }\n  }\n})();\n\"use strict\";\n\nangular.module(\"cn.batch-forms\").run([\"$templateCache\", function ($templateCache) {\n  $templateCache.put(\"cn-batch-forms/batch-results.html\", \"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.done()\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n    <ul class=\\\"list-group gutterless\\\">\\n      <li ng-repeat=\\\"result in vm.results\\\"\\n          class=\\\"list-group-item\\\"\\n          ng-class=\\\"{\\n            \\'text-danger\\': result.status != 200,\\n            \\'text-primary\\': result.status == 200\\n          }\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-sm-1 text-center\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n          </div>\\n          <div class=\\\"col-sm-11\\\"\\n               ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}} ({{result.body.id}}):\\n            updated successfully\\n          </div>\\n          <div class=\\\"col-sm-11\\\"\\n               ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}} ({{vm.originals[$index].id}}):\\n            {{result.body.message}}\\n          </div>\\n        </div>\\n      </li>\\n    </ul>\\n  </div>\\n</div>\\n\");\n}]);","(function() {\n  angular.module('cn.batch-forms', [\n    'schemaForm',\n    'cn.flex-form',\n    'cn.util',\n    'ui.router'\n  ]);\n})();","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$timeout'];\n\n  function BatchResults($state, parent, $timeout) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n\n    vm.activate = activate;\n    vm.cancel = cancel;\n    vm.done = cancel;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      console.log('vm.parent:', vm.parent);\n\n      if(!vm.results) {\n        // the modal doesn't go away without the timeout\n        $timeout(vm.cancel);\n      }\n\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Cool'\n          }]\n        },\n        noData: true\n      };\n    }\n\n    function cancel() {\n      $state.go('^');\n    }\n\n  }\n\n})();","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .config(cnBatchFormsConfig)\n      .run(addTemplates);\n\n  const TYPE = 'cn-dirty-check';\n  const TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = [\n    'cnFlexFormServiceProvider',\n    'cnFlexFormModalLoaderServiceProvider'\n  ];\n\n  function cnBatchFormsConfig(\n      cnFlexFormServiceProvider,\n      cnFlexFormModalLoaderServiceProvider) {\n\n    cnFlexFormServiceProvider.registerField({\n      condition: (field) => field.type === TYPE,\n      handler: (field) => {/*console.log('field.readonly:', field.key, field.readonly)*/},\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n\n    cnFlexFormModalLoaderServiceProvider.addMapping('results', {\n      controller: 'BatchResults',\n      controllerAs: 'vm',\n      templateUrl: 'cn-batch-forms/batch-results.html'\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(\n        TEMPLATE_URL,\n        '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 ng-disabled=\"form.readonly\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>'\n    );\n  }\n\n})();","(function() {\n  angular\n      .module('cn.batch-forms')\n      .factory('cnBatchForms', cnBatchForms);\n\n  cnBatchForms.$inject = [\n    'cnFlexFormService',\n    'cnFlexFormTypes',\n    'sfPath',\n    '$rootScope',\n    '$state',\n    '$timeout',\n    'cnFlexFormModalLoaderService'\n  ];\n  function cnBatchForms(\n      cnFlexFormService,\n      cnFlexFormTypes,\n      sfPath,\n      $rootScope,\n      $state,\n      $timeout,\n      cnFlexFormModalLoaderService) {\n\n    let instances = 0;\n\n    let fieldTypeHandlers = {\n      'string': processDefault,\n      'number': processNumber,\n      'cn-autocomplete': processSelect,\n      'cn-currency': processNumber,\n      'cn-datetimepicker': processDate,\n      'cn-toggle': processToggle\n    };\n\n    return {\n      augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if(!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor,\n        addMeta,\n        addToSchema,\n        clearDefaults,\n        clearSchemaDefault,\n        closeModal,\n        createDirtyCheck,\n        createBatchField,\n        getChangedModels,\n        getEditModeLegends,\n        getModelValues,\n        getSchemaDefault,\n        getTitleMap,\n        onFieldScope,\n        processForm,\n        processField,\n        processItems,\n        processDate,\n        processDefault,\n        processNumber,\n        processSelect,\n        processToggle,\n        setValue,\n        showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n      console.log('BatchForms:', schema, model, models);\n\n      this.instance = instances;\n      cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.editModes = {};\n      this.fieldRegister = {};\n\n      this.clearDefaults();\n\n      if(schema.forms) {\n        let i = schema.forms.length - 1;\n        while(i > -1) {\n          this.processForm(schema.forms[i]);\n          if(!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n        //schema.forms.forEach(this.processForm.bind(this));\n      }\n      else {\n        this.processForm(schema.form);\n      }\n\n      this.addMeta();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n\n      console.log('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      let key = scope.form._key;\n      //console.log('onFieldScope:', key, scope.form.key, scope);\n      if(key) {\n        this.fieldRegister[key].ngModel = scope.ngModel;\n      }\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if(scope.form.key[0] === '__batchConfig') {\n        scope.ngModel.$pristine = false;\n      }\n\n    }\n\n    function processForm(form) {\n      this.processItems(form, 'form');\n    }\n\n    function processItems(field, children = 'items') {\n      //console.log('processItems:', field, children);\n      let i = field[children].length - 1;\n      while(i > -1) {\n        let child = field[children][i];\n        let show = this.processField(child);\n        if(child.batchConfig && show) {\n          //console.log('child:', child);\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field';\n          let batchField = this.createBatchField(child);\n          let dirtyCheck = this.createDirtyCheck(child);\n          // add mode buttons after field\n          field[children][i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: [child, dirtyCheck, batchField],\n            condition: child.condition\n          };\n          delete child.condition;\n          this.fieldRegister[child.key] = {\n            field: child\n          };\n        }\n        if(!show) {\n          // remove field if batch isn't supported by it or children\n          field[children].splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processField(field) {\n      //console.log('processField:', field.batchConfig, field);\n      if(field.key) {\n        if(!field.batchConfig) return false;\n\n        field._key = field.key;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n        //field.required = false;\n\n        let fieldType = cnFlexFormTypes.getFieldType(field);\n        let handler = fieldTypeHandlers[fieldType];\n\n        if(handler) {\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          handler.bind(this)(field);\n        }\n        else return false;\n      }\n      else if(field.items) {\n        this.processItems(field);\n        if(!field.items.length) return false;\n      }\n      return true;\n    }\n\n    function getTitleMap(editModes) {\n      editModes = editModes || ['replace'];\n\n      return editModes.map(value => {\n        this.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      let key = `__batchConfig[\"${field.key}\"]`;\n\n      let batchField = {\n        key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(field.batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check'\n      };\n\n      if(batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(field.batchConfig.default)\n      });\n\n      if(field.batchConfig.onSelect) {\n        batchField.watch = {\n          resolution: (val, prev) => {\n            console.log('field.batchConfig.onSelect, val, prev:', field.batchConfig.onSelect, val, prev);\n            field.batchConfig.onSelect[val](prev);\n          }\n        };\n      }\n\n      return batchField;\n    }\n\n    function createDirtyCheck(field) {\n      let path = sfPath.parse(field.key);\n      let key = `__dirtyCheck[\"${path[0]}\"]`;\n      let child = path.length > 1;\n      let htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if(field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      let dirtyCheck = {\n        key,\n        htmlClass,\n        type: 'cn-dirty-check'\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      console.log('dirtyCheck:', field.key, dirtyCheck.readonly);\n\n      if(!child) {\n        if(field.watch) {\n          if(!_.isArray(field.watch)) field.watch = [field.watch];\n        }\n        else {\n          field.watch = [];\n        }\n\n        field.watch.push({\n          resolution: (val, prev) => {\n            if(!angular.equals(val, prev)) {\n              let register = this.fieldRegister[field.key];\n              if(register) {\n                if((register.ngModel && register.ngModel.$dirty) || register.initiated) {\n                  console.log('dirtyCheck.key:', dirtyCheck.key);\n                  cnFlexFormService.parseExpression(dirtyCheck.key, this.model).set(true);\n                }\n                else {\n                  console.log('initiated:', register);\n                  register.initiated = true;\n                }\n              }\n              // debug\n              else {\n                console.log('noregister:', register);\n              }\n            }\n          }\n        });\n      }\n\n      return dirtyCheck;\n    }\n\n    function addToSchema(key, schema) {\n      let path = sfPath.parse(key);\n      let depth = this.schema.schema;\n\n      path.forEach((k, i) => {\n        if(i === path.length - 1) {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        }\n        else if(k === '') {\n          if(!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        }\n        else {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          if(!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(model => {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      let models = [];\n\n      _.each(this.fieldRegister, (register, key) => {\n        let dirty = cnFlexFormService\n            .parseExpression(`__dirtyCheck[\"${key}\"]`, this.model)\n            .get();\n\n        console.log('key, dirty:', key, dirty, register);\n        if(!dirty) return;\n\n        let mode = cnFlexFormService\n            .parseExpression(`__batchConfig[\"${key}\"]`, this.model)\n            .get();\n\n        this.models.forEach((model, i) => {\n          if(!models[i]) models[i] = {};\n\n          let val = cnFlexFormService\n              .parseExpression(key, this.model)\n              .get();\n          let update = cnFlexFormService\n              .parseExpression(key, models[i]);\n          let original = cnFlexFormService\n              .parseExpression(key, this.models[i]);\n\n          this.setValue(val, update, original, mode);\n        });\n      });\n\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if(mode === 'replace') {\n        update.set(val);\n      }\n      else if(mode === 'append') {\n        let originalVal = original.get();\n        if(_.isArray(originalVal)) {\n          update.set(originalVal.concat(val));\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${originalVal} ${val.trim()}`);\n        }\n      }\n      else if(mode === 'prepend') {\n        let originalVal = original.get();\n        if(_.isArray(originalVal)) {\n          update.set(val.concat(originalVal));\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${val.trim()} ${originalVal}`);\n        }\n      }\n      else if(mode === 'increase') {\n        update.set(original.get() + val);\n      }\n      else if(mode === 'decrease') {\n        update.set(original.get() - val);\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function processDefault(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append'];\n\n      config.default = config.default || 'append';\n\n      config.onSelect = {\n        replace: () => {\n          if(_.uniq(config.ogValues).length === 1) {\n            field.placeholder = _.first(config.ogValues);\n          }\n          else {\n            field.placeholder = '—';\n          }\n        },\n        append: () => {\n          field.placeholder = '';\n        },\n        prepend: () => {\n          field.placeholder = '';\n        }\n      };\n    }\n\n    function processNumber(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if(_.uniq(config.ogValues).length === 1) {\n        field.placeholder = _.first(config.ogValues);\n      }\n      else {\n        field.placeholder = '—';\n      }\n    }\n\n    function  processSelect(field) {\n      let type = field.schema.type;\n      let config = field.batchConfig;\n\n      if(type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'append';\n\n        config.onSelect = {\n          replace: (prev) => {\n            if(prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          append: (prev) => {\n            if(prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          remove: () => {\n            let val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, this.model).set(val);\n          }\n        };\n      }\n      else {\n\n        let first = _.first(config.ogValues);\n        if(first && _.isObject(first)) {\n          if(_.every(config.ogValues, first)) {\n            field.placeholder = first[field.displayProperty || 'name'];\n          }\n        }\n        else if(first && _.uniq(config.ogValues).length === 1) {\n          if(field.titleMap) {\n            first = _.find(field.titleMap, {[field.valueProperty || 'value']: first});\n          }\n          field.placeholder = first[field.displayProperty || 'name'];\n        }\n\n        if(!field.placeholder) {\n          field.placeholder = '—';\n        }\n      }\n    }\n\n    function processDate(field) {\n      let config = field.batchConfig;\n\n      if(_.uniq(config.ogValues).length === 1) {\n        field.placeholder = moment(_.first(config.ogValues)).format('M/DD/YYYY h:mm a');\n      }\n      else {\n        field.placeholder = '—';\n      }\n    }\n\n    function processToggle(field) {\n      let config = field.batchConfig;\n\n      if(_.uniq(config.ogValues).length === 1) {\n        if(_.first(config.ogValues) == field.onValue) {\n          field.undefinedClass = 'semi-transparent';\n        }\n        else {\n          field.undefinedClass = 'disabled semi-transparent';\n        }\n      }\n    }\n\n    function clearDefaults() {\n      this.schema.schema.required = [];\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n    }\n\n    function clearSchemaDefault(schema) {\n      schema.default = undefined;\n      if(schema.type === 'object' && schema.properties) {\n        _.each(schema.properties, this.clearSchemaDefault.bind(this));\n      }\n      else if(schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items);\n      }\n    }\n\n    function showResults(results, config) {\n      console.log('showResults:', results, this);\n      this.results = results;\n      this.resultsConfig = config;\n\n      $state.go('.modal', {\n        modal: 'results',\n        modalId: this.instance\n      });\n\n      this.onCloseModal = $rootScope.$on('$stateChangeStart', this.closeModal.bind(this));\n    }\n\n    function closeModal(e, toState, toParams) {\n      console.log('closeModal:', e, toState, toParams);\n      console.log('this.resultsConfig:', this.resultsConfig);\n      this.onCloseModal();\n\n      let config = this.resultsConfig;\n      if(config && config.returnState) {\n        //timeout needed so current state\n        $timeout(() => $state.go(config.returnState.name, config.returnState.params));\n      }\n\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = `\n          <div class=\"well\">\n            <h5>Edit Modes</h5>\n            <p>Some types of fields allow you to apply batch changes in\n            different ways:</p>\n            <dl>\n              <dt>Replace:</dt>\n              <dd>Replace all the original values\n              with the new value. <em>(If you don't see an <b>Edit Mode</b> option\n              for a field, this will be the default)</em></dd>\n            </dl>\n            ${this.getEditModeLegends()}\n          </div>`;\n    }\n\n    function getEditModeLegends() {\n      let legends = '';\n\n      if(this.editModes.prepend) {\n        legends += `\n            <dl>\n              <dt>Prepend:</dt>\n              <dd>Add the new value to the start of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.append) {\n        legends += `\n            <dl>\n              <dt>Append:</dt>\n              <dd>Affix the new value at the end of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.decrease) {\n        legends += `\n            <dl>\n              <dt>Decrease:</dt>\n              <dd>Subtract the given value from the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.increase) {\n        legends += `\n            <dl>\n              <dt>Increase:</dt>\n              <dd>Add the given value to the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      return legends;\n    }\n  }\n\n})();","angular.module(\"cn.batch-forms\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"cn-batch-forms/batch-results.html\",\"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.done()\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n    <ul class=\\\"list-group gutterless\\\">\\n      <li ng-repeat=\\\"result in vm.results\\\"\\n          class=\\\"list-group-item\\\"\\n          ng-class=\\\"{\\n            \\'text-danger\\': result.status != 200,\\n            \\'text-primary\\': result.status == 200\\n          }\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-sm-1 text-center\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n          </div>\\n          <div class=\\\"col-sm-11\\\"\\n               ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}} ({{result.body.id}}):\\n            updated successfully\\n          </div>\\n          <div class=\\\"col-sm-11\\\"\\n               ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}} ({{vm.originals[$index].id}}):\\n            {{result.body.message}}\\n          </div>\\n        </div>\\n      </li>\\n    </ul>\\n  </div>\\n</div>\\n\");}]);"],"sourceRoot":"/source/"}