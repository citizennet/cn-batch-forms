{"version":3,"sources":["all.min.js","_.cn-batch-forms.module.js","batch-results.js","cn-batch-forms.routes.js","cn-batch-forms.service.js","templates.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","angular","module","BatchResults","$state","parent","$stateParams","activate","vm","headerConfig","title","main","actionConfig","actions","text","handler","config","returnState","go","name","params","noData","handleEdit","result","_","isFunction","onEdit","body","assign","idParam","id","current","showEdit","inRange","status","submit","closeModal","this","results","originals","models","resultsConfig","displayName","formName","controller","$inject","cnBatchFormsConfig","cnFlexFormServiceProvider","registerField","condition","field","type","TYPE","templateUrl","TEMPLATE_URL","addTemplates","$templateCache","put","run","_typeof","Symbol","iterator","constructor","prototype","cnBatchFormsProvider","fieldType","fieldTypeHandlers","$get","cnBatchForms","cnFlexFormService","cnFlexFormTypes","sfPath","$rootScope","$timeout","cnModal","augmentSchema","schema","model","length","service","BatchForms","create","addMeta","addToSchema","buildModelDefault","clearSchemaDefault","createDirtyCheck","createBatchField","getChangedModels","getEditModeLegends","getFormFromRegister","getModelValues","getSchemaDefault","getTitleMap","handleLinks","onFieldScope","onReprocessField","processCondition","processSchema","processField","processItems","processDate","processDefault","processLinkList","processLinks","processNumber","processSelect","processToggle","registerFieldWatch","resetDefaults","restoreDefaults","setValidation","setValue","showResults","console","log","instance","instances","defaults","editModes","fieldRegister","forms","i","form","splice","$on","bind","event","scope","getKey","startsWith","ngModel","$pristine","fields","child","batchConfig","htmlClass","batchField","dirtyCheck","items","replace","_key","_placeholder","placeholder","getSchema","properties","required","conditionals","getFieldType","isString","isObject","ogValues","allEqual","first","parseExpression","set","forEach","clone","uniqueId","watch","item","push","resolution","_this","map","capitalize","def","titleMap","btnClass","default","onSelect","val","prev","_this2","isUndefined","_minItems","minItems","options","tv4Validation","keys","$error","filter","k","indexOf","$setValidity","_this3","includes","_ret","re","RegExp","v","test","_this4","notitle","$broadcast","fieldWatch","equals","register","$dirty","initiated","isArray","e","list","hard","_this5","_this6","error","without","links","hardLinks","_ret2","each","path","parse","depth","get","_this7","dirty","mode","assignable","getAssignable","fullPath","update","original","originalVal","uniqVal","concat","uniq","trim","add","subtract","replaceString","withString","expression","setPlaceholder","noBatchPlaceholder","_this8","append","prepend","stringReplace","configKey","replaceKey","withKey","stringReplaceField","extend","setNestedPlaceholder","_this9","remove","chain","flatten","_this10","undefined","__batchConfig","__dirtyCheck","_this11","_this12","_this13","modal","close","open","controllerAs","resolve","meta","legends","decrease","increase","provider","string","number","url","array","cn-autocomplete","cn-currency","cn-datetimepicker","cn-toggle"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  angular.module('cn.batch-forms', ['schemaForm', 'cn.flex-form', 'cn.util', 'ui.router']);\n})();\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$stateParams'];\n\n  function BatchResults($state, parent, $stateParams) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n    vm.formName = $state.current.name;\n    vm.onEdit = vm.config && vm.config.onEdit;\n    vm.text = vm.config.text;\n\n    vm.activate = activate;\n    vm.handleEdit = handleEdit;\n    vm.showEdit = showEdit;\n    vm.submit = submit;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Continue Editing'\n          }, {\n            text: 'Done',\n            handler: function handler() {\n              if (vm.config && vm.config.returnState) {\n                $state.go(vm.config.returnState.name, vm.config.returnState.params);\n              }\n            }\n          }]\n        },\n        noData: true\n      };\n    }\n\n    function handleEdit(config, result) {\n      if (_.isFunction(vm.onEdit)) {\n        vm.onEdit(result.body);\n      } else {\n        var params = _.assign({}, $stateParams, _defineProperty({}, config.idParam, result.body.id));\n        $state.go($state.current.name, params);\n      }\n    }\n\n    function showEdit(config, result) {\n      return config.idParam && _.inRange(result.status, 200, 299);\n    }\n\n    function submit(handler) {\n      vm.parent.closeModal();\n      if (handler) {\n        handler();\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').config(cnBatchFormsConfig).run(addTemplates);\n\n  var TYPE = 'cn-dirty-check';\n  var TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function cnBatchFormsConfig(cnFlexFormServiceProvider) {\n    cnFlexFormServiceProvider.registerField({\n      condition: function condition(field) {\n        return field.type === TYPE;\n      },\n      handler: function handler(field) {/*console.log('field.readonly:', field.key, field.readonly)*/},\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(TEMPLATE_URL, '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 ng-disabled=\"form.readonly\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>');\n  }\n})();\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n(function () {\n  angular.module('cn.batch-forms').provider('cnBatchForms', cnBatchFormsProvider);\n\n  var fieldTypeHandlers = {\n    'string': 'processDefault',\n    'number': 'processNumber',\n    'url': 'processDefault',\n    'array': 'processSelect',\n    'cn-autocomplete': 'processSelect',\n    'cn-currency': 'processNumber',\n    'cn-datetimepicker': 'processDate',\n    'cn-toggle': 'processToggle'\n  };\n\n  function cnBatchFormsProvider() {\n    return {\n      registerField: registerField,\n      $get: cnBatchForms\n    };\n\n    ///////////\n\n    function registerField(fieldType) {\n      if (fieldType.handler) {\n        fieldTypeHandlers[fieldType.type] = fieldType.handler;\n      }\n    }\n  }\n\n  cnBatchForms.$inject = ['cnFlexFormService', 'cnFlexFormTypes', 'sfPath', '$rootScope', '$timeout', 'cnModal'];\n  function cnBatchForms(cnFlexFormService, cnFlexFormTypes, sfPath, $rootScope, $timeout, cnModal) {\n\n    var instances = 0;\n\n    return {\n      augmentSchema: augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if (!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor: constructor,\n        addMeta: addMeta,\n        addToSchema: addToSchema,\n        buildModelDefault: buildModelDefault,\n        clearSchemaDefault: clearSchemaDefault,\n        closeModal: closeModal,\n        createDirtyCheck: createDirtyCheck,\n        createBatchField: createBatchField,\n        getChangedModels: getChangedModels,\n        getEditModeLegends: getEditModeLegends,\n        getFormFromRegister: getFormFromRegister,\n        getModelValues: getModelValues,\n        getSchemaDefault: getSchemaDefault,\n        getTitleMap: getTitleMap,\n        handleLinks: handleLinks,\n        onFieldScope: onFieldScope,\n        onReprocessField: onReprocessField,\n        processCondition: processCondition,\n        processSchema: processSchema,\n        processField: processField,\n        processItems: processItems,\n        processDate: processDate,\n        processDefault: processDefault,\n        processLinkList: processLinkList,\n        processLinks: processLinks,\n        processNumber: processNumber,\n        processSelect: processSelect,\n        processToggle: processToggle,\n        registerFieldWatch: registerFieldWatch,\n        resetDefaults: resetDefaults,\n        restoreDefaults: restoreDefaults,\n        setValidation: setValidation,\n        setValue: setValue,\n        showResults: showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n      console.log('BatchForms:', schema, model, models);\n\n      this.instance = instances;\n      //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.defaults = {};\n      this.editModes = {};\n      this.fieldRegister = {};\n\n      this.processSchema();\n\n      if (schema.forms) {\n        var i = schema.forms.length - 1;\n        while (i > -1) {\n          this.processItems(schema.forms[i].form);\n          if (!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n      } else {\n        this.processItems(schema.form);\n      }\n\n      this.addMeta();\n      this.processLinks();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n      $rootScope.$on('cnFlexFormReprocessField', this.onReprocessField.bind(this));\n\n      console.log('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      var key = cnFlexFormService.getKey(scope.form.key);\n      //console.log('onFieldScope:', key, scope.form.key, scope);\n      if (!key.startsWith('__')) {\n        if (!this.fieldRegister[key]) this.fieldRegister[key] = {};\n        this.fieldRegister[key].ngModel = scope.ngModel;\n        this.fieldRegister[key].scope = scope;\n      }\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if (scope.form.key[0] === '__batchConfig') {\n          scope.ngModel.$pristine = false;\n        }\n    }\n\n    function processItems(fields) {\n      //console.log('processItems:', field, children);\n      var i = fields.length - 1;\n      while (i > -1) {\n        var child = this.processField(fields[i]);\n        if (child && child.batchConfig) {\n          //console.log('child:', child);\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n          var batchField = this.createBatchField(child);\n          var dirtyCheck = child.key && this.createDirtyCheck(child);\n          // add mode buttons after field\n          fields[i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n            condition: this.processCondition(child.condition)\n          };\n          delete child.condition;\n          if (!this.fieldRegister[child.key]) this.fieldRegister[child.key] = {};\n          this.fieldRegister[child.key].field = child;\n          this.fieldRegister[child.key].dirtyCheck = dirtyCheck;\n        }\n        if (!child) {\n          // remove field if batch isn't supported by it or children\n          fields.splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processCondition(condition) {\n      return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n    }\n\n    function processField(field) {\n      if (field.key) {\n        if (!field.batchConfig) return false;\n\n        field._key = field.key;\n        field._placeholder = field.placeholder;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n\n        delete field.required;\n        if (field.conditionals) delete field.conditionals.required;\n\n        var fieldType = cnFlexFormTypes.getFieldType(field);\n        var handler = fieldTypeHandlers[fieldType];\n\n        if (handler) {\n          if (_.isString(handler)) handler = this[handler];\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          if (_.allEqual(field.batchConfig.ogValues)) {\n            var key = '__ogValues[\"' + field.key + '\"]';\n            var first = _.first(field.batchConfig.ogValues);\n            cnFlexFormService.parseExpression(key, this.model).set(first);\n          }\n\n          return handler.bind(this)(field);\n        } else return false;\n      } else if (field.items) {\n        if (field.batchConfig) {\n          field.items.forEach(function (child) {\n            child.batchConfig = _.clone(field.batchConfig);\n          });\n        }\n        this.processItems(field.items);\n        if (!field.items.length) return false;\n\n        if (field.batchConfig) {\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.key = 'component_' + _.uniqueId();\n          field.batchConfig.watch = [];\n\n          field.items.forEach(function (item, i) {\n            var child = item.items[0];\n            if (!i) {\n              field.batchConfig.editModes = child.batchConfig.editModes;\n              field.batchConfig.default = child.batchConfig.default;\n            }\n            field.batchConfig.watch.push({\n              resolution: 'model.__batchConfig[\"' + child.key + '\"] = model.__batchConfig[\"' + field.batchConfig.key + '\"]'\n            });\n            item.items[2].condition = 'false';\n          });\n        }\n      }\n      return field;\n    }\n\n    function getTitleMap(editModes) {\n      var _this = this;\n\n      editModes = editModes || ['replace'];\n\n      return editModes.map(function (value) {\n        _this.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value: value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      var batchConfig = field.batchConfig;\n      var key = '__batchConfig[\"' + (field.key || batchConfig.key) + '\"]';\n\n      var batchField = {\n        key: key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check',\n        watch: batchConfig.watch || []\n      };\n\n      if (batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(batchConfig.default)\n      });\n\n      if (batchConfig.onSelect) {\n        batchField.watch.push({\n          resolution: function resolution(val, prev) {\n            if (!val) return;\n            batchConfig.onSelect[val](prev);\n          }\n        });\n      }\n\n      return batchField;\n    }\n\n    function setValidation(field, val) {\n      var _this2 = this;\n\n      var key = cnFlexFormService.getKey(field.key);\n\n      if (field.schema && field.schema.type === 'array') {\n        if (_.isUndefined(field.schema._minItems)) field.schema._minItems = field.schema.minItems;\n        field.schema.minItems = val ? field.schema._minItems : 0;\n      }\n\n      var forms = key ? this.getFormFromRegister(key) : [];\n\n      forms.forEach(function (form) {\n        if (form.scope) {\n          form.scope.options = {\n            tv4Validation: val\n          };\n          Object.keys(form.ngModel.$error).filter(function (k) {\n            return k.indexOf('tv4-') === 0;\n          }).forEach(function (k) {\n            form.ngModel.$setValidity(k, true);\n          });\n        }\n      });\n      if (field.items) {\n        field.items.forEach(function (i) {\n          return _this2.setValidation(i, val);\n        });\n      }\n    }\n\n    function getFormFromRegister(key) {\n      var _this3 = this;\n\n      if (key.includes('[]')) {\n        var _ret = function () {\n          var re = new RegExp(key.replace('[]', '\\\\[\\\\d*\\\\]'));\n          return {\n            v: _.filter(_this3.fieldRegister, function (form, k) {\n              return re.test(k);\n            })\n          };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n      } else if (this.fieldRegister[key]) {\n        return [this.fieldRegister[key]];\n      } else return [];\n    }\n\n    function createDirtyCheck(field) {\n      var _this4 = this;\n\n      //let path = sfPath.parse(field.key);\n      var key = '__dirtyCheck[\"' + (field.key || field.batchConfig.key) + '\"]';\n      //let child = path.length > 1;\n      var htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if (field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      var dirtyCheck = {\n        key: key,\n        htmlClass: htmlClass,\n        type: 'cn-dirty-check',\n        watch: [{\n          resolution: function resolution(val) {\n            //$timeout(() => {\n            _this4.setValidation(field, val);\n            $rootScope.$broadcast('schemaFormValidate');\n            //});\n          }\n        }]\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      var model = this.buildModelDefault(field.key, field.schema) || {};\n\n      dirtyCheck.fieldWatch = {\n        resolution: function resolution(val) {\n          if (!angular.equals(val, model[field._key])) {\n            var register = _this4.fieldRegister[field._key];\n            if (register) {\n              if (register.ngModel && register.ngModel.$dirty || register.initiated) {\n                //console.log('dirtyCheck.key:', key);\n                cnFlexFormService.parseExpression(key, _this4.model).set(true);\n              } else {\n                register.initiated = true;\n              }\n            }\n            // debug\n            else {\n                console.log('noregister:', field, _this4.fieldRegister);\n              }\n          }\n        }\n      };\n\n      this.registerFieldWatch(field, dirtyCheck.fieldWatch);\n\n      return dirtyCheck;\n    }\n\n    function registerFieldWatch(field, watch) {\n      if (field.watch) {\n        if (!_.isArray(field.watch)) field.watch = [field.watch];\n      } else {\n        field.watch = [];\n      }\n\n      field.watch.push(watch);\n    }\n\n    function onReprocessField(e, key) {\n      var register = this.fieldRegister[key];\n      this.registerFieldWatch(register.field, register.dirtyCheck.fieldWatch);\n    }\n\n    function handleLinks(list, hard) {\n      var _this5 = this;\n\n      return function (val) {\n        //console.log('val:', list);\n        list.forEach(function (key) {\n          if (!hard) {\n            var register = _this5.fieldRegister[key];\n            if (!register.ngModel || !register.ngModel.$dirty) return;\n          }\n          cnFlexFormService.parseExpression('__dirtyCheck[\"' + key + '\"]', _this5.model).set(val);\n        });\n      };\n    }\n\n    function processLinkList(list, hard) {\n      var _this6 = this;\n\n      list.forEach(function (keys) {\n        keys.forEach(function (key) {\n          var register = _this6.fieldRegister[key];\n          if (!register) {\n            console.error('noRegister:', key);\n            return;\n          }\n          var field = register.field,\n              dirtyCheck = register.dirtyCheck;\n\n          var handler = _this6.handleLinks(_.without(keys, key), hard);\n          field.watch = field.watch || [];\n          dirtyCheck.watch = dirtyCheck.watch || [];\n          field.watch.push({\n            resolution: function resolution() {\n              handler(true);\n            }\n          });\n          dirtyCheck.watch.push({ resolution: handler });\n        });\n      });\n    }\n\n    function processLinks() {\n      console.log('this.schema.batchConfig:', this.schema.batchConfig);\n      if (this.schema.batchConfig) {\n        if (this.schema.batchConfig.links) {\n          this.processLinkList(this.schema.batchConfig.links);\n        }\n        if (this.schema.batchConfig.hardLinks) {\n          this.processLinkList(this.schema.batchConfig.hardLinks, true);\n        }\n      }\n    }\n\n    function buildModelDefault(key, schema) {\n      if (schema.type === 'array') {\n        var _ret2 = function () {\n          var model = _defineProperty({}, key, []);\n          if (schema.items) {\n            _.each(schema.items.properties, function (v, k) {\n              if (v.type === 'array') {\n                model[key].push(buildModelDefault(k, v));\n              }\n            });\n          }\n          return {\n            v: model\n          };\n        }();\n\n        if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === \"object\") return _ret2.v;\n      }\n    }\n\n    function addToSchema(key, schema) {\n      var path = sfPath.parse(key);\n      var depth = this.schema.schema;\n\n      path.forEach(function (k, i) {\n        if (i === path.length - 1) {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        } else if (k === '') {\n          if (!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        } else {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          if (!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(function (model) {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      var _this7 = this;\n\n      var models = [];\n\n      _.each(this.fieldRegister, function (register, key) {\n        var dirty = cnFlexFormService.parseExpression('__dirtyCheck[\"' + key + '\"]', _this7.model).get();\n\n        if (!dirty) return;\n\n        var mode = cnFlexFormService.parseExpression('__batchConfig[\"' + key + '\"]', _this7.model).get();\n\n        _this7.models.forEach(function (model, i) {\n          models[i] = models[i] || {};\n\n          var path = sfPath.parse(key);\n          // if column is json, we want to merge updates into model's current json value\n          // so we copy the current value if we haven't already (on a previous iteration)\n          if (path.length > 1 && !models[i][path[0]]) {\n            models[i][path[0]] = _this7.models[i][path[0]];\n          }\n\n          var assignable = cnFlexFormService.parseExpression(key, _this7.models[i]).getAssignable();\n\n          // if column is json and model's current value doesn't have parent property for\n          // key we're updating, just copy over entire key instead of using specific\n          // edit mode logic for new value\n          if (assignable.fullPath !== key) {\n            var val = cnFlexFormService.parseExpression(assignable.fullPath, _this7.model).get();\n\n            cnFlexFormService.parseExpression(assignable.fullPath, _this7.models[i]).set(val);\n          } else {\n            var _val = cnFlexFormService.parseExpression(key, _this7.model).get();\n            var update = cnFlexFormService.parseExpression(key, models[i]);\n            var original = cnFlexFormService.parseExpression(key, _this7.models[i]);\n\n            //console.log('val, update, original:', val, update.get(), original.get(), key);\n            _this7.setValue(_val, update, original, mode);\n          }\n        });\n      });\n\n      //console.log('models:', models);\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if (mode === 'replace') {\n        update.set(val);\n      } else if (mode === 'append') {\n        var originalVal = original.get();\n        if (_.isArray(originalVal)) {\n          var uniqVal = _([]).concat(originalVal, val).uniq(function (value) {\n            return value.key || value;\n          }).value();\n\n          update.set(uniqVal);\n        } else if (_.isString(originalVal)) {\n          update.set(originalVal + ' ' + val.trim());\n        } else {\n          update.set(val);\n        }\n      } else if (mode === 'prepend') {\n        var _originalVal = original.get();\n        if (_.isArray(_originalVal)) {\n          update.set(val.concat(_originalVal));\n        } else if (_.isString(_originalVal)) {\n          update.set(val.trim() + ' ' + _originalVal);\n        } else {\n          update.set(val);\n        }\n      } else if (mode === 'increase') {\n        update.set(_.add(original.get() || 0, val));\n      } else if (mode === 'decrease') {\n        update.set(_.subtract(original.get() || 0, val));\n      } else if (mode === 'stringReplace' && original.get()) {\n        var key = original.path().key;\n        var replaceString = cnFlexFormService.parseExpression('_replace_' + key, this.model);\n        var withString = cnFlexFormService.parseExpression('_with_' + key, this.model);\n        var expression = new RegExp(replaceString.get(), \"gi\");\n        update.set(original.get().replace(expression, withString.get()));\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function setPlaceholder(field, val) {\n      if (!field.noBatchPlaceholder) {\n        field._placeholder = val;\n      }\n    }\n\n    function processDefault(field) {\n      var _this8 = this;\n\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append', 'stringReplace'];\n\n      config.default = config.default || 'append';\n\n      if (!config.editModes.includes(config.default)) {\n        config.default = config.editModes[0];\n      }\n\n      config.onSelect = {\n        replace: function replace() {\n          if (_.allEqual(config.ogValues)) {\n            cnFlexFormService.parseExpression(field.key, _this8.model).set(_.first(config.ogValues));\n          } else {\n            setPlaceholder(field, '—');\n          }\n        },\n        append: function append() {\n          setPlaceholder(field, '');\n        },\n        prepend: function prepend() {\n          setPlaceholder(field, '');\n        },\n        stringReplace: function stringReplace() {}\n      };\n\n      if (config.editModes.includes('stringReplace')) {\n        var dirtyCheck = '__dirtyCheck[\"' + (field.key || field.batchConfig.key) + '\"]';\n        var configKey = '__batchConfig[\"' + (field.key || field.batchConfig.key) + '\"]';\n        var replaceKey = '_replace_' + (field.key || field.batchConfig.key);\n        var withKey = '_with_' + (field.key || field.batchConfig.key);\n        var stringReplaceField = {\n          type: 'component',\n          items: [{\n            key: replaceKey,\n            title: 'Replace',\n            watch: {\n              resolution: 'model.' + dirtyCheck + ' = true'\n            }\n          }, {\n            key: withKey,\n            title: 'With',\n            watch: {\n              resolution: 'model.' + dirtyCheck + ' = true'\n            }\n          }],\n          condition: 'model.' + configKey + ' === \\'stringReplace\\''\n        };\n\n        config.key = field.key;\n\n        field = {\n          type: 'section',\n          condition: field.condition,\n          batchConfig: config,\n          schema: field.schema,\n          key: field.key,\n          items: [_.extend(field, { condition: 'model.' + configKey + ' !== \\'stringReplace\\'' }), stringReplaceField]\n        };\n\n        this.addToSchema(replaceKey, { type: 'string' });\n        this.addToSchema(withKey, { type: 'string' });\n      }\n      return field;\n    }\n\n    function processNumber(field) {\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      } else {\n        field.placeholder = '—';\n      }\n      return field;\n    }\n\n    function setNestedPlaceholder(field) {\n      if (field.items) {\n        field.items.forEach(setNestedPlaceholder);\n      } else {\n        setPlaceholder(field, '—');\n      }\n    }\n\n    function processSelect(field) {\n      var _this9 = this;\n\n      var type = field.schema.type;\n      var config = field.batchConfig;\n\n      if (type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'replace';\n\n        if (_.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n        } else {\n          setNestedPlaceholder(field);\n        }\n\n        config.onSelect = {\n          replace: function replace(prev) {\n            if (prev && prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, _this9.model).set([]);\n            }\n          },\n          append: function append(prev) {\n            if (prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, _this9.model).set([]);\n            }\n          },\n          remove: function remove() {\n            var val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, _this9.model).set(val);\n          }\n        };\n      } else {\n\n        var first = _.first(config.ogValues);\n        //TODO: dynamically send back data\n        if (first && _.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(first);\n        }\n\n        if (!field.placeholder) {\n          setPlaceholder(field, '—');\n        }\n      }\n      return field;\n    }\n\n    function processDate(field) {\n      var config = field.batchConfig;\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      } else {\n        setPlaceholder(field, '—');\n      }\n      return field;\n    }\n\n    function processToggle(field) {\n      var config = field.batchConfig;\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n      return field;\n    }\n\n    function processSchema() {\n      var _this10 = this;\n\n      this.schema.schema.required = undefined;\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n      console.log('this.defaults:', this.defaults);\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n\n      $rootScope.$on('schemaFormBeforeAppendToArray', function (e, form) {\n        return _this10.restoreDefaults(form);\n      });\n      $rootScope.$on('schemaFormAfterAppendToArray', function (e, form) {\n        return _this10.resetDefaults(form);\n      });\n    }\n\n    function restoreDefaults(form) {\n      var _this11 = this;\n\n      if (!form.items) return;\n      form.items.forEach(function (item) {\n        if (item.key) {\n          if (item.schema) {\n            var key = cnFlexFormService.getKey(item.key).replace(/\\[\\d+]/g, '[]');\n            item.schema.default = _this11.defaults[key];\n          }\n          item.placeholder = item._placeholder;\n          item.noBatchPlaceholder = true;\n        }\n        _this11.restoreDefaults(item);\n      });\n    }\n\n    function resetDefaults(form) {\n      var _this12 = this;\n\n      if (!form.items) return;\n      form.items.forEach(function (item) {\n        if (item.schema) {\n          item.schema.default = undefined;\n        }\n        _this12.resetDefaults(item);\n      });\n    }\n\n    function clearSchemaDefault(schema, key) {\n      // save for hydrating newly added array items\n      this.defaults[key] = schema.default;\n\n      // then remove because we don't want to override saved values with defaults\n      schema.default = undefined;\n\n      if (schema.type === 'object' && schema.properties) {\n        schema.required = undefined;\n        // _.each(schema.properties, this.clearSchemaDefault.bind(this));\n        for (var k in schema.properties) {\n          this.clearSchemaDefault(schema.properties[k], key + '.' + k);\n        }\n      } else if (schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items, key + '[]');\n      }\n    }\n\n    function showResults(results, config) {\n      var _this13 = this;\n\n      this.results = results;\n      this.resultsConfig = config;\n\n      if (this.modal) {\n        this.modal.close();\n      }\n\n      this.modal = cnModal.open({\n        controller: 'BatchResults',\n        controllerAs: 'vm',\n        templateUrl: 'cn-batch-forms/batch-results.html',\n        resolve: {\n          parent: function parent() {\n            return _this13;\n          }\n        }\n      });\n    }\n\n    function closeModal() {\n      this.modal.close();\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = '\\n          <div class=\"well\">\\n            <h5>Edit Modes</h5>\\n            <p>Some types of fields allow you to apply batch changes in\\n            different ways:</p>\\n            <dl>\\n              <dt>Replace:</dt>\\n              <dd>Replace all the original values\\n              with the new value. <em>(If you don\\'t see an <b>Edit Mode</b> option\\n              for a field, this will be the default)</em></dd>\\n            </dl>\\n            ' + this.getEditModeLegends() + '\\n          </div>';\n    }\n\n    function getEditModeLegends() {\n      var legends = '';\n\n      if (this.editModes.prepend) {\n        legends += '\\n            <dl>\\n              <dt>Prepend:</dt>\\n              <dd>Add the new value to the start of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.append) {\n        legends += '\\n            <dl>\\n              <dt>Append:</dt>\\n              <dd>Affix the new value at the end of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.decrease) {\n        legends += '\\n            <dl>\\n              <dt>Decrease:</dt>\\n              <dd>Subtract the given value from the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.increase) {\n        legends += '\\n            <dl>\\n              <dt>Increase:</dt>\\n              <dd>Add the given value to the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      return legends;\n    }\n  }\n})();\n\"use strict\";\n\nangular.module(\"cn.batch-forms\").run([\"$templateCache\", function ($templateCache) {\n  $templateCache.put(\"cn-batch-forms/batch-results.html\", \"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.submit(handler)\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list card-flex\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n\\n    <div class=\\\"padding-20\\\"\\n         ng-if=\\\"vm.text\\\">\\n      <p class=\\\"no-margin text-mute\\\"\\n         ng-bind-html=\\\"vm.text\\\">\\n      </p>\\n    </div>\\n\\n    <table class=\\\"table gutterless\\\">\\n      <tbody>\\n      <tr ng-repeat=\\\"result in vm.results\\\">\\n        <td class=\\\"col-sm-10\\\">\\n          <h6 ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{result.body.id}})</span>\\n          </h6>\\n          <h6 ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{vm.originals[$index].id}})</span>\\n          </h6>\\n          <p ng-class=\\\"{\\n               \\'text-danger\\': result.status != 200,\\n               \\'text-primary\\': result.status == 200\\n             }\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n            {{result.status == 200 ? \\'updated successfully\\' : result.body.message}}\\n          </p>\\n        </td>\\n        <td class=\\\"col-sm-2 text-center\\\">\\n          <a ng-show=\\\"vm.showEdit(vm.config, result)\\\"\\n             class=\\\"btn btn-sm btn-transparent\\\"\\n             ng-click=\\\"vm.handleEdit(vm.config, result)\\\">\\n            <i class=\\\"icn-edit\\\"></i>\\n          </a>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\");\n}]);","(function() {\n  angular.module('cn.batch-forms', [\n    'schemaForm',\n    'cn.flex-form',\n    'cn.util',\n    'ui.router'\n  ]);\n})();","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$stateParams'];\n\n  function BatchResults($state, parent, $stateParams) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n    vm.formName = $state.current.name;\n    vm.onEdit  = vm.config && vm.config.onEdit;\n    vm.text = vm.config.text;\n\n    vm.activate = activate;\n    vm.handleEdit = handleEdit;\n    vm.showEdit = showEdit;\n    vm.submit = submit;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Continue Editing'\n          }, {\n            text: 'Done',\n            handler: () => {\n              if(vm.config && vm.config.returnState) {\n                $state.go(vm.config.returnState.name, vm.config.returnState.params);\n              }\n            }\n          }]\n        },\n        noData: true\n      };\n\n    }\n\n    function handleEdit(config, result) {\n      if (_.isFunction(vm.onEdit)) {\n        vm.onEdit(result.body);\n      }\n      else {\n        const params = _.assign({}, $stateParams, { [config.idParam]: result.body.id });\n        $state.go($state.current.name, params);\n      }\n    }\n\n    function showEdit(config, result) {\n      return config.idParam && _.inRange(result.status, 200, 299);\n    }\n\n    function submit(handler) {\n      vm.parent.closeModal();\n      if(handler) {\n        handler();\n      }\n    }\n\n  }\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .config(cnBatchFormsConfig)\n      .run(addTemplates);\n\n  const TYPE = 'cn-dirty-check';\n  const TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function cnBatchFormsConfig(cnFlexFormServiceProvider) {\n    cnFlexFormServiceProvider.registerField({\n      condition: (field) => field.type === TYPE,\n      handler: (field) => {/*console.log('field.readonly:', field.key, field.readonly)*/},\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(\n        TEMPLATE_URL,\n        '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 ng-disabled=\"form.readonly\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>'\n    );\n  }\n\n})();","(function() {\n  angular\n      .module('cn.batch-forms')\n      .provider('cnBatchForms', cnBatchFormsProvider);\n\n  let fieldTypeHandlers = {\n    'string': 'processDefault',\n    'number': 'processNumber',\n    'url': 'processDefault',\n    'array': 'processSelect',\n    'cn-autocomplete': 'processSelect',\n    'cn-currency': 'processNumber',\n    'cn-datetimepicker': 'processDate',\n    'cn-toggle': 'processToggle'\n  };\n\n  function cnBatchFormsProvider() {\n    return {\n      registerField,\n      $get: cnBatchForms\n    };\n\n    ///////////\n\n    function registerField(fieldType) {\n      if(fieldType.handler) {\n        fieldTypeHandlers[fieldType.type] = fieldType.handler;\n      }\n    }\n  }\n\n  cnBatchForms.$inject = [\n    'cnFlexFormService',\n    'cnFlexFormTypes',\n    'sfPath',\n    '$rootScope',\n    '$timeout',\n    'cnModal'\n  ];\n  function cnBatchForms(\n      cnFlexFormService,\n      cnFlexFormTypes,\n      sfPath,\n      $rootScope,\n      $timeout,\n      cnModal) {\n\n    let instances = 0;\n\n    return {\n      augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if(!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor,\n        addMeta,\n        addToSchema,\n        buildModelDefault,\n        clearSchemaDefault,\n        closeModal,\n        createDirtyCheck,\n        createBatchField,\n        getChangedModels,\n        getEditModeLegends,\n        getFormFromRegister,\n        getModelValues,\n        getSchemaDefault,\n        getTitleMap,\n        handleLinks,\n        onFieldScope,\n        onReprocessField,\n        processCondition,\n        processSchema,\n        processField,\n        processItems,\n        processDate,\n        processDefault,\n        processLinkList,\n        processLinks,\n        processNumber,\n        processSelect,\n        processToggle,\n        registerFieldWatch,\n        resetDefaults,\n        restoreDefaults,\n        setValidation,\n        setValue,\n        showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n      console.log('BatchForms:', schema, model, models);\n\n      this.instance = instances;\n      //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.defaults = {};\n      this.editModes = {};\n      this.fieldRegister = {};\n\n      this.processSchema();\n\n      if(schema.forms) {\n        let i = schema.forms.length - 1;\n        while(i > -1) {\n          this.processItems(schema.forms[i].form);\n          if(!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n      }\n      else {\n        this.processItems(schema.form);\n      }\n\n      this.addMeta();\n      this.processLinks();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n      $rootScope.$on('cnFlexFormReprocessField', this.onReprocessField.bind(this));\n\n      console.log('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      let key = cnFlexFormService.getKey(scope.form.key);\n      //console.log('onFieldScope:', key, scope.form.key, scope);\n      if(!key.startsWith('__')) {\n        if (!this.fieldRegister[key]) this.fieldRegister[key] = {};\n        this.fieldRegister[key].ngModel = scope.ngModel;\n        this.fieldRegister[key].scope = scope;\n      }\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if(scope.form.key[0] === '__batchConfig') {\n        scope.ngModel.$pristine = false;\n      }\n\n    }\n\n    function processItems(fields) {\n      //console.log('processItems:', field, children);\n      let i = fields.length - 1;\n      while(i > -1) {\n        let child = this.processField(fields[i]);\n        if(child && child.batchConfig) {\n          //console.log('child:', child);\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n          let batchField = this.createBatchField(child);\n          let dirtyCheck = child.key && this.createDirtyCheck(child);\n          // add mode buttons after field\n          fields[i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n            condition: this.processCondition(child.condition)\n          };\n          delete child.condition;\n          if (!this.fieldRegister[child.key]) this.fieldRegister[child.key] = {};\n          this.fieldRegister[child.key].field = child;\n          this.fieldRegister[child.key].dirtyCheck = dirtyCheck;\n        }\n        if(!child) {\n          // remove field if batch isn't supported by it or children\n          fields.splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processCondition(condition) {\n      return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n    }\n\n    function processField(field) {\n      if(field.key) {\n        if(!field.batchConfig) return false;\n\n        field._key = field.key;\n        field._placeholder = field.placeholder;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n\n        delete field.required;\n        if(field.conditionals) delete field.conditionals.required;\n\n        let fieldType = cnFlexFormTypes.getFieldType(field);\n        let handler = fieldTypeHandlers[fieldType];\n\n        if(handler) {\n          if(_.isString(handler)) handler = this[handler];\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          if(_.allEqual(field.batchConfig.ogValues)) {\n            let key = `__ogValues[\"${field.key}\"]`;\n            let first = _.first(field.batchConfig.ogValues);\n            cnFlexFormService.parseExpression(key, this.model).set(first);\n          }\n\n          return handler.bind(this)(field);\n        }\n        else return false;\n      }\n      else if(field.items) {\n        if(field.batchConfig) {\n          field.items.forEach(child => {\n            child.batchConfig = _.clone(field.batchConfig);\n          });\n        }\n        this.processItems(field.items);\n        if(!field.items.length) return false;\n\n        if(field.batchConfig) {\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.key = `component_${_.uniqueId()}`;\n          field.batchConfig.watch = [];\n\n          field.items.forEach((item, i) => {\n            let child = item.items[0];\n            if(!i) {\n              field.batchConfig.editModes = child.batchConfig.editModes;\n              field.batchConfig.default = child.batchConfig.default;\n            }\n            field.batchConfig.watch.push({\n              resolution: `model.__batchConfig[\"${child.key}\"] = model.__batchConfig[\"${field.batchConfig.key}\"]`\n            });\n            item.items[2].condition = 'false';\n          });\n        }\n      }\n      return field;\n    }\n\n    function getTitleMap(editModes) {\n      editModes = editModes || ['replace'];\n\n      return editModes.map(value => {\n        this.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      let batchConfig = field.batchConfig;\n      let key = `__batchConfig[\"${field.key || batchConfig.key}\"]`;\n\n      let batchField = {\n        key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check',\n        watch: batchConfig.watch || []\n      };\n\n      if(batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(batchConfig.default)\n      });\n\n      if(batchConfig.onSelect) {\n        batchField.watch.push({\n          resolution: (val, prev) => {\n            if(!val) return;\n            batchConfig.onSelect[val](prev);\n          }\n        });\n      }\n\n      return batchField;\n    }\n\n    function setValidation(field, val) {\n      let key = cnFlexFormService.getKey(field.key);\n\n      if (field.schema && field.schema.type === 'array') {\n        if (_.isUndefined(field.schema._minItems)) field.schema._minItems = field.schema.minItems;\n        field.schema.minItems = val ? field.schema._minItems : 0;\n      }\n\n      let forms = key ? this.getFormFromRegister(key) : [];\n\n      forms.forEach(form => {\n        if(form.scope) {\n          form.scope.options = {\n            tv4Validation: val\n          };\n          Object.keys(form.ngModel.$error)\n              .filter(function(k) {\n                return k.indexOf('tv4-') === 0;\n              })\n              .forEach(function(k) {\n                form.ngModel.$setValidity(k, true);\n              });\n        }\n      });\n      if (field.items) {\n        field.items.forEach(i => this.setValidation(i, val));\n      }\n    }\n\n    function getFormFromRegister(key) {\n      if (key.includes('[]')) {\n        let re = new RegExp(key.replace('[]', '\\\\[\\\\d*\\\\]'));\n        return _.filter(this.fieldRegister, (form, k) => {\n          return re.test(k);\n        });\n      } else if (this.fieldRegister[key]) {\n        return [this.fieldRegister[key]];\n      } else return [];\n    }\n\n    function createDirtyCheck(field) {\n      //let path = sfPath.parse(field.key);\n      let key = `__dirtyCheck[\"${field.key || field.batchConfig.key}\"]`;\n      //let child = path.length > 1;\n      let htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if(field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      let dirtyCheck = {\n        key,\n        htmlClass,\n        type: 'cn-dirty-check',\n        watch: [{\n          resolution: (val) => {\n            //$timeout(() => {\n              this.setValidation(field, val);\n              $rootScope.$broadcast('schemaFormValidate');\n            //});\n          }\n        }]\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      let model = this.buildModelDefault(field.key, field.schema) || {};\n\n      dirtyCheck.fieldWatch = {\n        resolution: val => {\n          if(!angular.equals(val, model[field._key])) {\n            let register = this.fieldRegister[field._key];\n            if(register) {\n              if((register.ngModel && register.ngModel.$dirty) || register.initiated) {\n                //console.log('dirtyCheck.key:', key);\n                cnFlexFormService.parseExpression(key, this.model).set(true);\n              }\n              else {\n                register.initiated = true;\n              }\n            }\n            // debug\n            else {\n              console.log('noregister:', field, this.fieldRegister);\n            }\n          }\n        }\n      };\n\n      this.registerFieldWatch(field, dirtyCheck.fieldWatch);\n\n      return dirtyCheck;\n    }\n\n    function registerFieldWatch(field, watch) {\n      if(field.watch) {\n        if(!_.isArray(field.watch)) field.watch = [field.watch];\n      }\n      else {\n        field.watch = [];\n      }\n\n      field.watch.push(watch);\n    }\n\n    function onReprocessField(e, key) {\n      let register = this.fieldRegister[key];\n      this.registerFieldWatch(register.field, register.dirtyCheck.fieldWatch);\n    }\n\n    function handleLinks(list, hard) {\n      return val => {\n        //console.log('val:', list);\n        list.forEach(key => {\n          if(!hard) {\n            let register = this.fieldRegister[key];\n            if(!register.ngModel || !register.ngModel.$dirty) return;\n          }\n          cnFlexFormService.parseExpression(`__dirtyCheck[\"${key}\"]`, this.model).set(val);\n        });\n      };\n    }\n\n    function processLinkList(list, hard) {\n      list.forEach(keys => {\n        keys.forEach(key => {\n          let register = this.fieldRegister[key];\n          if(!register) {\n            console.error('noRegister:', key);\n            return;\n          }\n          let {field, dirtyCheck} = register;\n          let handler = this.handleLinks(_.without(keys, key), hard);\n          field.watch = field.watch || [];\n          dirtyCheck.watch = dirtyCheck.watch || [];\n          field.watch.push({resolution() {handler(true);}});\n          dirtyCheck.watch.push({resolution: handler});\n        });\n      });\n    }\n\n    function processLinks() {\n      console.log('this.schema.batchConfig:', this.schema.batchConfig);\n      if(this.schema.batchConfig) {\n        if(this.schema.batchConfig.links) {\n          this.processLinkList(this.schema.batchConfig.links);\n        }\n        if(this.schema.batchConfig.hardLinks) {\n          this.processLinkList(this.schema.batchConfig.hardLinks, true);\n        }\n      }\n    }\n\n    function buildModelDefault(key, schema) {\n      if (schema.type === 'array') {\n        let model = {[key]: []};\n        if (schema.items) {\n          _.each(schema.items.properties, (v, k) => {\n            if (v.type === 'array') {\n              model[key].push(buildModelDefault(k, v));\n            }\n          });\n        }\n        return model;\n      }\n    }\n\n    function addToSchema(key, schema) {\n      let path = sfPath.parse(key);\n      let depth = this.schema.schema;\n\n      path.forEach((k, i) => {\n        if(i === path.length - 1) {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        }\n        else if(k === '') {\n          if(!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        }\n        else {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          if(!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(model => {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      let models = [];\n\n      _.each(this.fieldRegister, (register, key) => {\n        let dirty = cnFlexFormService\n            .parseExpression(`__dirtyCheck[\"${key}\"]`, this.model)\n            .get();\n\n        if(!dirty) return;\n\n        let mode = cnFlexFormService\n            .parseExpression(`__batchConfig[\"${key}\"]`, this.model)\n            .get();\n\n        this.models.forEach((model, i) => {\n          models[i] = models[i] || {};\n\n          let path = sfPath.parse(key);\n          // if column is json, we want to merge updates into model's current json value\n          // so we copy the current value if we haven't already (on a previous iteration)\n          if(path.length > 1 && !models[i][path[0]]) {\n            models[i][path[0]] = this.models[i][path[0]];\n          }\n\n          let assignable = cnFlexFormService\n              .parseExpression(key, this.models[i])\n              .getAssignable();\n\n          // if column is json and model's current value doesn't have parent property for\n          // key we're updating, just copy over entire key instead of using specific\n          // edit mode logic for new value\n          if(assignable.fullPath !== key) {\n            let val = cnFlexFormService\n                .parseExpression(assignable.fullPath, this.model)\n                .get();\n\n            cnFlexFormService\n                .parseExpression(assignable.fullPath, this.models[i])\n                .set(val);\n          }\n          else {\n            let val = cnFlexFormService.parseExpression(key, this.model).get();\n            let update = cnFlexFormService.parseExpression(key, models[i]);\n            let original = cnFlexFormService.parseExpression(key, this.models[i]);\n\n            //console.log('val, update, original:', val, update.get(), original.get(), key);\n            this.setValue(val, update, original, mode);\n          }\n        });\n      });\n\n      //console.log('models:', models);\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if(mode === 'replace') {\n        update.set(val);\n      }\n      else if(mode === 'append') {\n        let originalVal = original.get();\n        if (_.isArray(originalVal)) {\n          const uniqVal = _([])\n            .concat(originalVal, val)\n            .uniq((value) => value.key || value)\n            .value();\n\n          update.set(uniqVal);\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${originalVal} ${val.trim()}`);\n        }\n        else {\n          update.set(val);\n        }\n      }\n      else if(mode === 'prepend') {\n        let originalVal = original.get();\n        if(_.isArray(originalVal)) {\n          update.set(val.concat(originalVal));\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${val.trim()} ${originalVal}`);\n        }\n        else {\n          update.set(val);\n        }\n      }\n      else if(mode === 'increase') {\n        update.set(_.add(original.get() || 0, val));\n      }\n      else if(mode === 'decrease') {\n        update.set(_.subtract(original.get() || 0, val));\n      }\n      else if(mode === 'stringReplace' && original.get()) {\n        let key = original.path().key;\n        let replaceString = cnFlexFormService.parseExpression(`_replace_${key}`, this.model);\n        let withString = cnFlexFormService.parseExpression(`_with_${key}`, this.model);\n        let expression = new RegExp(replaceString.get(), \"gi\");\n        update.set(original.get().replace(expression, withString.get()));\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function setPlaceholder(field, val) {\n      if(!field.noBatchPlaceholder) {\n        field._placeholder = val;\n      }\n    }\n\n    function processDefault(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append', 'stringReplace'];\n\n      config.default = config.default || 'append';\n\n      if(!config.editModes.includes(config.default)) {\n        config.default = config.editModes[0];\n      }\n\n      config.onSelect = {\n        replace: () => {\n          if(_.allEqual(config.ogValues)) {\n            cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n          }\n          else {\n            setPlaceholder(field, '—');\n          }\n        },\n        append: () => {\n          setPlaceholder(field, '');\n        },\n        prepend: () => {\n          setPlaceholder(field, '');\n        },\n        stringReplace: () => {\n        }\n      };\n\n      if(config.editModes.includes('stringReplace')) {\n        let dirtyCheck = `__dirtyCheck[\"${field.key || field.batchConfig.key}\"]`;\n        let configKey = `__batchConfig[\"${field.key || field.batchConfig.key}\"]`;\n        let replaceKey = `_replace_${field.key || field.batchConfig.key}`;\n        let withKey = `_with_${field.key || field.batchConfig.key}`;\n        let stringReplaceField = {\n          type: 'component',\n          items: [\n          {\n            key: replaceKey,\n            title: 'Replace',\n            watch: {\n              resolution: `model.${dirtyCheck} = true`\n            }\n          }, {\n            key: withKey,\n            title: 'With',\n            watch: {\n              resolution: `model.${dirtyCheck} = true`\n            }\n          }],\n          condition: `model.${configKey} === 'stringReplace'`\n        };\n\n        config.key = field.key;\n\n        field = {\n          type: 'section',\n          condition: field.condition,\n          batchConfig: config,\n          schema: field.schema,\n          key: field.key,\n          items: [_.extend(field, {condition: `model.${configKey} !== 'stringReplace'`}), stringReplaceField]\n        };\n\n        this.addToSchema(replaceKey, { type: 'string' });\n        this.addToSchema(withKey, { type: 'string' });\n      }\n        return field;\n    }\n\n    function processNumber(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n      else {\n        field.placeholder = '—';\n      }\n      return field;\n    }\n\n    function setNestedPlaceholder(field) {\n      if (field.items) {\n        field.items.forEach(setNestedPlaceholder);\n      } else {\n        setPlaceholder(field, '—');\n      }\n    }\n\n    function  processSelect(field) {\n      let type = field.schema.type;\n      let config = field.batchConfig;\n\n      if(type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'replace';\n\n        if (_.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n        } else {\n          setNestedPlaceholder(field);\n        }\n\n        config.onSelect = {\n          replace: (prev) => {\n            if(prev && prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          append: (prev) => {\n            if(prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          remove: () => {\n            let val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, this.model).set(val);\n          }\n        };\n      }\n      else {\n\n        let first = _.first(config.ogValues);\n        //TODO: dynamically send back data\n        if(first && _.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(first);\n        }\n\n        if(!field.placeholder) {\n          setPlaceholder(field, '—');\n        }\n      }\n      return field;\n    }\n\n    function processDate(field) {\n      let config = field.batchConfig;\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n      else {\n        setPlaceholder(field, '—');\n      }\n      return field;\n    }\n\n    function processToggle(field) {\n      let config = field.batchConfig;\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n      return field;\n    }\n\n    function processSchema() {\n      this.schema.schema.required = undefined;\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n      console.log('this.defaults:', this.defaults);\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n\n      $rootScope.$on('schemaFormBeforeAppendToArray', (e, form) => this.restoreDefaults(form));\n      $rootScope.$on('schemaFormAfterAppendToArray', (e, form) => this.resetDefaults(form));\n    }\n\n    function restoreDefaults(form) {\n      if(!form.items) return;\n      form.items.forEach(item => {\n        if(item.key) {\n          if(item.schema) {\n            let key = cnFlexFormService.getKey(item.key).replace(/\\[\\d+]/g, '[]');\n            item.schema.default = this.defaults[key];\n          }\n          item.placeholder = item._placeholder;\n          item.noBatchPlaceholder = true;\n        }\n        this.restoreDefaults(item);\n      });\n    }\n\n    function resetDefaults(form) {\n      if(!form.items) return;\n      form.items.forEach(item => {\n        if(item.schema) {\n          item.schema.default = undefined;\n        }\n        this.resetDefaults(item);\n      });\n    }\n\n    function clearSchemaDefault(schema, key) {\n      // save for hydrating newly added array items\n      this.defaults[key] = schema.default;\n\n      // then remove because we don't want to override saved values with defaults\n      schema.default = undefined;\n\n      if(schema.type === 'object' && schema.properties) {\n        schema.required = undefined;\n        // _.each(schema.properties, this.clearSchemaDefault.bind(this));\n        for(let k in schema.properties) {\n          this.clearSchemaDefault(schema.properties[k], `${key}.${k}`);\n        }\n      }\n      else if(schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items, `${key}[]`);\n      }\n    }\n\n    function showResults(results, config) {\n      this.results = results;\n      this.resultsConfig = config;\n\n      if(this.modal) {\n        this.modal.close();\n      }\n\n      this.modal = cnModal.open({\n        controller: 'BatchResults',\n        controllerAs: 'vm',\n        templateUrl: 'cn-batch-forms/batch-results.html',\n        resolve: {\n          parent: () => this\n        }\n      });\n    }\n\n    function closeModal() {\n      this.modal.close();\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = `\n          <div class=\"well\">\n            <h5>Edit Modes</h5>\n            <p>Some types of fields allow you to apply batch changes in\n            different ways:</p>\n            <dl>\n              <dt>Replace:</dt>\n              <dd>Replace all the original values\n              with the new value. <em>(If you don't see an <b>Edit Mode</b> option\n              for a field, this will be the default)</em></dd>\n            </dl>\n            ${this.getEditModeLegends()}\n          </div>`;\n    }\n\n    function getEditModeLegends() {\n      let legends = '';\n\n      if(this.editModes.prepend) {\n        legends += `\n            <dl>\n              <dt>Prepend:</dt>\n              <dd>Add the new value to the start of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.append) {\n        legends += `\n            <dl>\n              <dt>Append:</dt>\n              <dd>Affix the new value at the end of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.decrease) {\n        legends += `\n            <dl>\n              <dt>Decrease:</dt>\n              <dd>Subtract the given value from the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.increase) {\n        legends += `\n            <dl>\n              <dt>Increase:</dt>\n              <dd>Add the given value to the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      return legends;\n    }\n  }\n\n})();\n","angular.module(\"cn.batch-forms\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"cn-batch-forms/batch-results.html\",\"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.submit(handler)\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list card-flex\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n\\n    <div class=\\\"padding-20\\\"\\n         ng-if=\\\"vm.text\\\">\\n      <p class=\\\"no-margin text-mute\\\"\\n         ng-bind-html=\\\"vm.text\\\">\\n      </p>\\n    </div>\\n\\n    <table class=\\\"table gutterless\\\">\\n      <tbody>\\n      <tr ng-repeat=\\\"result in vm.results\\\">\\n        <td class=\\\"col-sm-10\\\">\\n          <h6 ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{result.body.id}})</span>\\n          </h6>\\n          <h6 ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{vm.originals[$index].id}})</span>\\n          </h6>\\n          <p ng-class=\\\"{\\n               \\'text-danger\\': result.status != 200,\\n               \\'text-primary\\': result.status == 200\\n             }\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n            {{result.status == 200 ? \\'updated successfully\\' : result.body.message}}\\n          </p>\\n        </td>\\n        <td class=\\\"col-sm-2 text-center\\\">\\n          <a ng-show=\\\"vm.showEdit(vm.config, result)\\\"\\n             class=\\\"btn btn-sm btn-transparent\\\"\\n             ng-click=\\\"vm.handleEdit(vm.config, result)\\\">\\n            <i class=\\\"icn-edit\\\"></i>\\n          </a>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\");}]);"]}