{"version":3,"sources":["all.min.js","_.cn-batch-forms.module.js","batch-results.js","cn-batch-forms.routes.js","cn-batch-forms.service.js","templates.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_typeof","Symbol","constructor","angular","module","BatchResults","$state","parent","$stateParams","activate","console","log","vm","config","idParam","results","forEach","result","i","params","_","assign","originals","id","editSref","current","name","toJson","headerConfig","title","main","actionConfig","actions","text","handler","returnState","go","noData","submit","closeModal","this","models","resultsConfig","displayName","formName","controller","$inject","cnBatchFormsConfig","cnFlexFormServiceProvider","registerField","condition","field","type","TYPE","templateUrl","TEMPLATE_URL","addTemplates","$templateCache","put","run","cnBatchForms","cnFlexFormService","cnFlexFormTypes","sfPath","$rootScope","$timeout","cnModal","augmentSchema","schema","model","length","service","BatchForms","create","addMeta","addToSchema","buildModelDefault","clearDefaults","clearSchemaDefault","createDirtyCheck","processLinks","createBatchField","getChangedModels","getEditModeLegends","getModelValues","getSchemaDefault","getTitleMap","onFieldScope","processCondition","processForm","processField","processItems","processDate","processDefault","processNumber","processSelect","processToggle","setValue","showResults","instance","instances","editModes","fieldRegister","links","forms","form","splice","$on","bind","event","scope","_key","ngModel","$pristine","children","arguments","undefined","child","show","batchConfig","htmlClass","batchField","dirtyCheck","items","replace","getSchema","properties","fieldType","getFieldType","fieldTypeHandlers","isObject","ogValues","allEqual","first","parseExpression","set","clone","uniqueId","watch","item","push","resolution","_this","map","capitalize","def","titleMap","btnClass","default","onSelect","val","prev","_this2","notitle","options","tv4Validation","keys","$error","filter","k","indexOf","$setValidity","$broadcast","isArray","equals","register","$dirty","initiated","link","_this3","fieldHandler","linkRegisters","includes","linkRegister","_ret","each","v","path","parse","depth","get","_this4","dirty","mode","update","original","originalVal","concat","isString","trim","_this5","placeholder","append","prepend","setNestedPlaceholder","_this6","remove","chain","flatten","uniq","required","__batchConfig","__dirtyCheck","_this7","modal","close","open","controllerAs","resolve","meta","legends","decrease","increase","string","number","url","array","cn-autocomplete","cn-currency","cn-datetimepicker","cn-toggle","factory"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  angular.module('cn.batch-forms', ['schemaForm', 'cn.flex-form', 'cn.util', 'ui.router']);\n})();\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$stateParams'];\n\n  function BatchResults($state, parent, $stateParams) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    //vm.errors = _.reject(vm.results, {status: 200});\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n    vm.formName = $state.current.name;\n\n    vm.activate = activate;\n    vm.submit = submit;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      console.log('vm.parent:', vm.parent);\n      if (vm.config.idParam) {\n        vm.results.forEach(function (result, i) {\n          var params = _.assign({}, $stateParams, _defineProperty({}, vm.config.idParam, vm.originals[i].id));\n          result.editSref = $state.current.name + '(' + angular.toJson(params) + ')';\n          console.log('result.editSref:', result);\n        });\n      }\n\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Continue Editing'\n          }, {\n            text: 'Done',\n            handler: function handler() {\n              if (vm.config && vm.config.returnState) {\n                $state.go(vm.config.returnState.name, vm.config.returnState.params);\n              }\n            }\n          }]\n        },\n        noData: true\n      };\n    }\n\n    function submit(handler) {\n      console.log('submit:', handler);\n      vm.parent.closeModal();\n      if (handler) {\n        handler();\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').config(cnBatchFormsConfig).run(addTemplates);\n\n  var TYPE = 'cn-dirty-check';\n  var TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function cnBatchFormsConfig(cnFlexFormServiceProvider) {\n    cnFlexFormServiceProvider.registerField({\n      condition: function condition(field) {\n        return field.type === TYPE;\n      },\n      handler: function handler(field) {/*console.log('field.readonly:', field.key, field.readonly)*/},\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(TEMPLATE_URL, '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 ng-disabled=\"form.readonly\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>');\n  }\n})();\n'use strict';\n\nfunction _typeof(obj) { return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n(function () {\n  angular.module('cn.batch-forms').factory('cnBatchForms', cnBatchForms);\n\n  cnBatchForms.$inject = ['cnFlexFormService', 'cnFlexFormTypes', 'sfPath', '$rootScope', '$state', '$timeout', 'cnModal'];\n  function cnBatchForms(cnFlexFormService, cnFlexFormTypes, sfPath, $rootScope, $state, $timeout, cnModal) {\n\n    var instances = 0;\n\n    var fieldTypeHandlers = {\n      'string': processDefault,\n      'number': processNumber,\n      'url': 'processDefault',\n      'array': processSelect,\n      'cn-autocomplete': processSelect,\n      'cn-currency': processNumber,\n      'cn-datetimepicker': processDate,\n      'cn-toggle': processToggle\n    };\n\n    return {\n      augmentSchema: augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if (!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor: constructor,\n        addMeta: addMeta,\n        addToSchema: addToSchema,\n        buildModelDefault: buildModelDefault,\n        clearDefaults: clearDefaults,\n        clearSchemaDefault: clearSchemaDefault,\n        closeModal: closeModal,\n        createDirtyCheck: createDirtyCheck,\n        processLinks: processLinks,\n        createBatchField: createBatchField,\n        getChangedModels: getChangedModels,\n        getEditModeLegends: getEditModeLegends,\n        getModelValues: getModelValues,\n        getSchemaDefault: getSchemaDefault,\n        getTitleMap: getTitleMap,\n        onFieldScope: onFieldScope,\n        processCondition: processCondition,\n        processForm: processForm,\n        processField: processField,\n        processItems: processItems,\n        processDate: processDate,\n        processDefault: processDefault,\n        processNumber: processNumber,\n        processSelect: processSelect,\n        processToggle: processToggle,\n        setValue: setValue,\n        showResults: showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n      console.log('BatchForms:', schema, model, models);\n\n      this.instance = instances;\n      //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.editModes = {};\n      this.fieldRegister = {};\n      this.links = [];\n\n      this.clearDefaults();\n\n      if (schema.forms) {\n        var i = schema.forms.length - 1;\n        while (i > -1) {\n          this.processForm(schema.forms[i]);\n          if (!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n        //schema.forms.forEach(this.processForm.bind(this));\n      } else {\n          this.processForm(schema.form);\n        }\n\n      this.addMeta();\n      this.processLinks();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n\n      console.log('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      var key = scope.form._key;\n      //console.log('onFieldScope:', key, scope.form.key, scope);\n      if (key) {\n        this.fieldRegister[key].ngModel = scope.ngModel;\n        this.fieldRegister[key].scope = scope;\n      }\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if (scope.form.key[0] === '__batchConfig') {\n          scope.ngModel.$pristine = false;\n        }\n    }\n\n    function processForm(form) {\n      this.processItems(form, 'form');\n    }\n\n    function processItems(field) {\n      var children = arguments.length <= 1 || arguments[1] === undefined ? 'items' : arguments[1];\n\n      //console.log('processItems:', field, children);\n      var i = field[children].length - 1;\n      while (i > -1) {\n        var child = field[children][i];\n        var show = this.processField(child);\n        if (child.batchConfig && show) {\n          //console.log('child:', child);\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n          var batchField = this.createBatchField(child);\n          var dirtyCheck = child.key && this.createDirtyCheck(child);\n          // add mode buttons after field\n          field[children][i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n            condition: this.processCondition(child.condition)\n          };\n          delete child.condition;\n          this.fieldRegister[child.key] = {\n            field: child,\n            dirtyCheck: dirtyCheck\n          };\n        }\n        if (!show) {\n          // remove field if batch isn't supported by it or children\n          field[children].splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processCondition(condition) {\n      return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n    }\n\n    function processField(field) {\n      //console.log('processField:', field.batchConfig, field);\n      if (field.key) {\n        if (!field.batchConfig) return false;\n\n        field._key = field.key;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n        //field.required = false;\n\n        var fieldType = cnFlexFormTypes.getFieldType(field);\n        var handler = fieldTypeHandlers[fieldType];\n\n        if (handler) {\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          if (_.allEqual(field.batchConfig.ogValues)) {\n            var key = '__ogValues[\"' + field.key + '\"]';\n            var first = _.first(field.batchConfig.ogValues);\n            cnFlexFormService.parseExpression(key, this.model).set(first);\n          }\n\n          handler.bind(this)(field);\n        } else return false;\n      } else if (field.items) {\n        if (field.batchConfig) {\n          field.items.forEach(function (child) {\n            child.batchConfig = _.clone(field.batchConfig);\n          });\n        }\n        this.processItems(field);\n        if (!field.items.length) return false;\n\n        if (field.batchConfig) {\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.key = 'component_' + _.uniqueId();\n          field.batchConfig.watch = [];\n\n          field.items.forEach(function (item, i) {\n            var child = item.items[0];\n            if (!i) {\n              field.batchConfig.editModes = child.batchConfig.editModes;\n              field.batchConfig.default = child.batchConfig.default;\n            }\n            field.batchConfig.watch.push({\n              resolution: 'model.__batchConfig[\"' + child.key + '\"] = model.__batchConfig[\"' + field.batchConfig.key + '\"]'\n            });\n            item.items[2].condition = 'false';\n          });\n        }\n      }\n      return true;\n    }\n\n    function getTitleMap(editModes) {\n      var _this = this;\n\n      editModes = editModes || ['replace'];\n\n      return editModes.map(function (value) {\n        _this.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value: value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      var batchConfig = field.batchConfig;\n      var key = '__batchConfig[\"' + (field.key || batchConfig.key) + '\"]';\n\n      var batchField = {\n        key: key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check',\n        watch: batchConfig.watch || []\n      };\n\n      if (batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(batchConfig.default)\n      });\n\n      if (batchConfig.onSelect) {\n        batchField.watch.push({\n          resolution: function resolution(val, prev) {\n            if (!val) return;\n            batchConfig.onSelect[val](prev);\n          }\n        });\n      }\n\n      return batchField;\n    }\n\n    function createDirtyCheck(field) {\n      var _this2 = this;\n\n      //let path = sfPath.parse(field.key);\n      var key = '__dirtyCheck[\"' + (field.key || batchConfig.key) + '\"]';\n      //let child = path.length > 1;\n      var htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if (field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      var dirtyCheck = {\n        key: key,\n        htmlClass: htmlClass,\n        type: 'cn-dirty-check',\n        watch: [{\n          resolution: function resolution(val) {\n            $timeout(function () {\n              var form = _this2.fieldRegister[field.key];\n              if (form.scope) {\n                form.scope.options = {\n                  tv4Validation: val\n                };\n                Object.keys(form.ngModel.$error).filter(function (k) {\n                  return k.indexOf('tv4-') === 0;\n                }).forEach(function (k) {\n                  ngModel.$setValidity(k, true);\n                });\n                $rootScope.$broadcast('schemaFormValidate');\n              }\n            });\n          }\n        }]\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      //if(!child) {\n      if (field.watch) {\n        if (!_.isArray(field.watch)) field.watch = [field.watch];\n      } else {\n        field.watch = [];\n      }\n\n      var model = this.buildModelDefault(field.key, field.schema) || {};\n\n      field.watch.push({\n        resolution: function resolution(val, prev) {\n          if (!angular.equals(val, prev) && !angular.equals(val, model[field._key])) {\n            var register = _this2.fieldRegister[field._key];\n            if (register) {\n              if (register.ngModel && register.ngModel.$dirty || register.initiated) {\n                console.log('dirtyCheck.key:', key);\n                cnFlexFormService.parseExpression(key, _this2.model).set(true);\n              } else {\n                register.initiated = true;\n              }\n            }\n            // debug\n            else {\n                console.log('noregister:', field, _this2.fieldRegister);\n              }\n          }\n        }\n      });\n\n      if (field.batchConfig.link) {\n        this.links.push({\n          key: field.key,\n          links: field.batchConfig.link\n        });\n      }\n      //}\n\n      return dirtyCheck;\n    }\n\n    function processLinks() {\n      var _this3 = this;\n\n      var model = this.model;\n      this.links.forEach(function (link) {\n        var fieldHandler = function fieldHandler(val, prev) {\n          if (!angular.equals(val, prev)) {\n            if (val) {\n              link.links.forEach(function (key) {\n                cnFlexFormService.parseExpression('__dirtyCheck[\"' + key + '\"]', model).set(true);\n              });\n            }\n          }\n        };\n        var fieldRegister = _this3.fieldRegister[link.key];\n        fieldRegister.field.watch.push({\n          resolution: fieldHandler\n        });\n        fieldRegister.dirtyCheck.watch = [{ resolution: fieldHandler }];\n\n        var linkRegisters = _.filter(_this3.fieldRegister, function (val, key) {\n          return link.links.includes(key);\n        });\n        linkRegisters.forEach(function (linkRegister) {\n          if (!linkRegister.dirtyCheck.watch) linkRegister.dirtyCheck.watch = [];\n          linkRegister.dirtyCheck.watch.push({\n            resolution: function resolution(val, prev) {\n              if (!angular.equals(val, prev)) {\n                if (val === false) {\n                  cnFlexFormService.parseExpression('__dirtyCheck[\"' + link.key + '\"]', model).set(false);\n                }\n              }\n            }\n          });\n        });\n      });\n    }\n\n    function buildModelDefault(key, schema) {\n      if (schema.type === 'array') {\n        var _ret = (function () {\n          var model = _defineProperty({}, key, []);\n          if (schema.items) {\n            _.each(schema.items.properties, function (v, k) {\n              if (v.type === 'array') {\n                model[key].push(buildModelDefault(k, v));\n              }\n            });\n          }\n          return {\n            v: model\n          };\n        })();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n      }\n    }\n\n    function addToSchema(key, schema) {\n      var path = sfPath.parse(key);\n      var depth = this.schema.schema;\n\n      path.forEach(function (k, i) {\n        if (i === path.length - 1) {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        } else if (k === '') {\n          if (!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        } else {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          if (!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(function (model) {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      var _this4 = this;\n\n      var models = [];\n\n      _.each(this.fieldRegister, function (register, key) {\n        var dirty = cnFlexFormService.parseExpression('__dirtyCheck[\"' + key + '\"]', _this4.model).get();\n\n        if (!dirty) return;\n\n        var mode = cnFlexFormService.parseExpression('__batchConfig[\"' + key + '\"]', _this4.model).get();\n\n        _this4.models.forEach(function (model, i) {\n          if (!models[i]) models[i] = {};\n\n          var val = cnFlexFormService.parseExpression(key, _this4.model).get();\n          var update = cnFlexFormService.parseExpression(key, models[i]);\n          var original = cnFlexFormService.parseExpression(key, _this4.models[i]);\n\n          _this4.setValue(val, update, original, mode);\n        });\n      });\n\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if (mode === 'replace') {\n        update.set(val);\n      } else if (mode === 'append') {\n        var originalVal = original.get();\n        if (_.isArray(originalVal)) {\n          update.set(originalVal.concat(val));\n        } else if (_.isString(originalVal)) {\n          update.set(originalVal + ' ' + val.trim());\n        }\n      } else if (mode === 'prepend') {\n        var originalVal = original.get();\n        if (_.isArray(originalVal)) {\n          update.set(val.concat(originalVal));\n        } else if (_.isString(originalVal)) {\n          update.set(val.trim() + ' ' + originalVal);\n        }\n      } else if (mode === 'increase') {\n        update.set(original.get() + val);\n      } else if (mode === 'decrease') {\n        update.set(original.get() - val);\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function processDefault(field) {\n      var _this5 = this;\n\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append'];\n\n      config.default = config.default || 'append';\n\n      config.onSelect = {\n        replace: function replace() {\n          if (_.allEqual(config.ogValues)) {\n            cnFlexFormService.parseExpression(field.key, _this5.model).set(_.first(config.ogValues));\n          } else {\n            field.placeholder = '—';\n          }\n        },\n        append: function append() {\n          field.placeholder = '';\n        },\n        prepend: function prepend() {\n          field.placeholder = '';\n        }\n      };\n    }\n\n    function processNumber(field) {\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      } else {\n        field.placeholder = '—';\n      }\n    }\n\n    function setNestedPlaceholder(field) {\n      if (field.items) {\n        field.items.forEach(setNestedPlaceholder);\n      } else {\n        field.placeholder = '—';\n      }\n    }\n\n    function processSelect(field) {\n      var _this6 = this;\n\n      var type = field.schema.type;\n      var config = field.batchConfig;\n\n      if (type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'append';\n\n        if (_.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n        } else {\n          setNestedPlaceholder(field);\n        }\n\n        config.onSelect = {\n          replace: function replace(prev) {\n            if (prev && prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, _this6.model).set([]);\n            }\n          },\n          append: function append(prev) {\n            if (prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, _this6.model).set([]);\n            }\n          },\n          remove: function remove() {\n            var val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, _this6.model).set(val);\n          }\n        };\n      } else {\n\n        var first = _.first(config.ogValues);\n        //TODO: dynamically send back data\n        if (first && _.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(first);\n        }\n\n        if (!field.placeholder) {\n          field.placeholder = '—';\n        }\n      }\n    }\n\n    function processDate(field) {\n      var config = field.batchConfig;\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      } else {\n        field.placeholder = '—';\n      }\n    }\n\n    function processToggle(field) {\n      var config = field.batchConfig;\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n    }\n\n    function clearDefaults() {\n      this.schema.schema.required = undefined;\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n    }\n\n    function clearSchemaDefault(schema) {\n      schema.default = undefined;\n      if (schema.type === 'object' && schema.properties) {\n        schema.required = undefined;\n        _.each(schema.properties, this.clearSchemaDefault.bind(this));\n      } else if (schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items);\n      }\n    }\n\n    function showResults(results, config) {\n      var _this7 = this;\n\n      this.results = results;\n      this.resultsConfig = config;\n\n      if (this.modal) {\n        this.modal.close();\n      }\n\n      this.modal = cnModal.open({\n        controller: 'BatchResults',\n        controllerAs: 'vm',\n        templateUrl: 'cn-batch-forms/batch-results.html',\n        resolve: {\n          parent: function parent() {\n            return _this7;\n          }\n        }\n      });\n    }\n\n    function closeModal() {\n      this.modal.close();\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = '\\n          <div class=\"well\">\\n            <h5>Edit Modes</h5>\\n            <p>Some types of fields allow you to apply batch changes in\\n            different ways:</p>\\n            <dl>\\n              <dt>Replace:</dt>\\n              <dd>Replace all the original values\\n              with the new value. <em>(If you don\\'t see an <b>Edit Mode</b> option\\n              for a field, this will be the default)</em></dd>\\n            </dl>\\n            ' + this.getEditModeLegends() + '\\n          </div>';\n    }\n\n    function getEditModeLegends() {\n      var legends = '';\n\n      if (this.editModes.prepend) {\n        legends += '\\n            <dl>\\n              <dt>Prepend:</dt>\\n              <dd>Add the new value to the start of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.append) {\n        legends += '\\n            <dl>\\n              <dt>Append:</dt>\\n              <dd>Affix the new value at the end of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.decrease) {\n        legends += '\\n            <dl>\\n              <dt>Decrease:</dt>\\n              <dd>Subtract the given value from the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.increase) {\n        legends += '\\n            <dl>\\n              <dt>Increase:</dt>\\n              <dd>Add the given value to the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      return legends;\n    }\n  }\n})();\n\"use strict\";\n\nangular.module(\"cn.batch-forms\").run([\"$templateCache\", function ($templateCache) {\n  $templateCache.put(\"cn-batch-forms/batch-results.html\", \"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.submit(handler)\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n    <table class=\\\"table card-flex gutterless\\\">\\n      <tbody>\\n      <tr ng-repeat=\\\"result in vm.results\\\">\\n        <td class=\\\"col-sm-10\\\">\\n          <h6 ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{result.body.id}})</span>\\n          </h6>\\n          <h6 ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{vm.originals[$index].id}})</span>\\n          </h6>\\n          <p ng-class=\\\"{\\n               \\'text-danger\\': result.status != 200,\\n               \\'text-primary\\': result.status == 200\\n             }\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n            {{result.status == 200 ? \\'updated successfully\\' : result.body.message}}\\n          </p>\\n        </td>\\n        <td class=\\\"col-sm-2 text-center\\\">\\n          <a ng-show=\\\"result.editSref\\\"\\n             class=\\\"btn btn-sm btn-transparent\\\"\\n             ui-sref=\\\"{{result.editSref}}\\\">\\n            <i class=\\\"icn-edit\\\"></i>\\n          </a>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\");\n}]);","(function() {\n  angular.module('cn.batch-forms', [\n    'schemaForm',\n    'cn.flex-form',\n    'cn.util',\n    'ui.router'\n  ]);\n})();","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$stateParams'];\n\n  function BatchResults($state, parent, $stateParams) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    //vm.errors = _.reject(vm.results, {status: 200});\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n    vm.formName = $state.current.name;\n\n    vm.activate = activate;\n    vm.submit = submit;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      console.log('vm.parent:', vm.parent);\n      if(vm.config.idParam) {\n        vm.results.forEach((result, i) => {\n          let params = _.assign({}, $stateParams, {[vm.config.idParam]: vm.originals[i].id});\n          result.editSref = `${$state.current.name}(${angular.toJson(params)})`;\n          console.log('result.editSref:', result);\n        });\n      }\n\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Continue Editing'\n          }, {\n            text: 'Done',\n            handler: () => {\n              if(vm.config && vm.config.returnState) {\n                $state.go(vm.config.returnState.name, vm.config.returnState.params);\n              }\n            }\n          }]\n        },\n        noData: true\n      };\n\n    }\n\n    function submit(handler) {\n      console.log('submit:', handler);\n      vm.parent.closeModal();\n      if(handler) {\n        handler();\n      }\n    }\n\n  }\n\n})();","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .config(cnBatchFormsConfig)\n      .run(addTemplates);\n\n  const TYPE = 'cn-dirty-check';\n  const TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function cnBatchFormsConfig(cnFlexFormServiceProvider) {\n    cnFlexFormServiceProvider.registerField({\n      condition: (field) => field.type === TYPE,\n      handler: (field) => {/*console.log('field.readonly:', field.key, field.readonly)*/},\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(\n        TEMPLATE_URL,\n        '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 ng-disabled=\"form.readonly\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>'\n    );\n  }\n\n})();","(function() {\n  angular\n      .module('cn.batch-forms')\n      .factory('cnBatchForms', cnBatchForms);\n\n  cnBatchForms.$inject = [\n    'cnFlexFormService',\n    'cnFlexFormTypes',\n    'sfPath',\n    '$rootScope',\n    '$state',\n    '$timeout',\n    'cnModal'\n  ];\n  function cnBatchForms(\n      cnFlexFormService,\n      cnFlexFormTypes,\n      sfPath,\n      $rootScope,\n      $state,\n      $timeout,\n      cnModal) {\n\n    let instances = 0;\n\n    let fieldTypeHandlers = {\n      'string': processDefault,\n      'number': processNumber,\n      'url': 'processDefault',\n      'array': processSelect,\n      'cn-autocomplete': processSelect,\n      'cn-currency': processNumber,\n      'cn-datetimepicker': processDate,\n      'cn-toggle': processToggle\n    };\n\n    return {\n      augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if(!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor,\n        addMeta,\n        addToSchema,\n        buildModelDefault,\n        clearDefaults,\n        clearSchemaDefault,\n        closeModal,\n        createDirtyCheck,\n        processLinks,\n        createBatchField,\n        getChangedModels,\n        getEditModeLegends,\n        getModelValues,\n        getSchemaDefault,\n        getTitleMap,\n        onFieldScope,\n        processCondition,\n        processForm,\n        processField,\n        processItems,\n        processDate,\n        processDefault,\n        processNumber,\n        processSelect,\n        processToggle,\n        setValue,\n        showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n      console.log('BatchForms:', schema, model, models);\n\n      this.instance = instances;\n      //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.editModes = {};\n      this.fieldRegister = {};\n      this.links = [];\n\n      this.clearDefaults();\n\n      if(schema.forms) {\n        let i = schema.forms.length - 1;\n        while(i > -1) {\n          this.processForm(schema.forms[i]);\n          if(!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n        //schema.forms.forEach(this.processForm.bind(this));\n      }\n      else {\n        this.processForm(schema.form);\n      }\n\n      this.addMeta();\n      this.processLinks();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n\n      console.log('BatchDone:', schema, model, models);\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      let key = scope.form._key;\n      //console.log('onFieldScope:', key, scope.form.key, scope);\n      if(key) {\n        this.fieldRegister[key].ngModel = scope.ngModel;\n        this.fieldRegister[key].scope = scope;\n      }\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if(scope.form.key[0] === '__batchConfig') {\n        scope.ngModel.$pristine = false;\n      }\n\n    }\n\n    function processForm(form) {\n      this.processItems(form, 'form');\n    }\n\n    function processItems(field, children = 'items') {\n      //console.log('processItems:', field, children);\n      let i = field[children].length - 1;\n      while(i > -1) {\n        let child = field[children][i];\n        let show = this.processField(child);\n        if(child.batchConfig && show) {\n          //console.log('child:', child);\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n          let batchField = this.createBatchField(child);\n          let dirtyCheck = child.key && this.createDirtyCheck(child);\n          // add mode buttons after field\n          field[children][i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n            condition: this.processCondition(child.condition)\n          };\n          delete child.condition;\n          this.fieldRegister[child.key] = {\n            field: child,\n            dirtyCheck\n          };\n        }\n        if(!show) {\n          // remove field if batch isn't supported by it or children\n          field[children].splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processCondition(condition) {\n      return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n    }\n\n    function processField(field) {\n      //console.log('processField:', field.batchConfig, field);\n      if(field.key) {\n        if(!field.batchConfig) return false;\n\n        field._key = field.key;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n        //field.required = false;\n\n        let fieldType = cnFlexFormTypes.getFieldType(field);\n        let handler = fieldTypeHandlers[fieldType];\n\n        if(handler) {\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          if(_.allEqual(field.batchConfig.ogValues)) {\n            let key = `__ogValues[\"${field.key}\"]`;\n            let first = _.first(field.batchConfig.ogValues);\n            cnFlexFormService.parseExpression(key, this.model).set(first);\n          }\n\n          handler.bind(this)(field);\n        }\n        else return false;\n      }\n      else if(field.items) {\n        if(field.batchConfig) {\n          field.items.forEach(child => {\n            child.batchConfig = _.clone(field.batchConfig);\n          });\n        }\n        this.processItems(field);\n        if(!field.items.length) return false;\n\n        if(field.batchConfig) {\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.key = `component_${_.uniqueId()}`;\n          field.batchConfig.watch = [];\n\n          field.items.forEach((item, i) => {\n            let child = item.items[0];\n            if(!i) {\n              field.batchConfig.editModes = child.batchConfig.editModes;\n              field.batchConfig.default = child.batchConfig.default;\n            }\n            field.batchConfig.watch.push({\n              resolution: `model.__batchConfig[\"${child.key}\"] = model.__batchConfig[\"${field.batchConfig.key}\"]`\n            });\n            item.items[2].condition = 'false';\n          });\n        }\n      }\n      return true;\n    }\n\n    function getTitleMap(editModes) {\n      editModes = editModes || ['replace'];\n\n      return editModes.map(value => {\n        this.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      let batchConfig = field.batchConfig;\n      let key = `__batchConfig[\"${field.key || batchConfig.key}\"]`;\n\n      let batchField = {\n        key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check',\n        watch: batchConfig.watch || []\n      };\n\n      if(batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(batchConfig.default)\n      });\n\n      if(batchConfig.onSelect) {\n        batchField.watch.push({\n          resolution: (val, prev) => {\n            if(!val) return;\n            batchConfig.onSelect[val](prev);\n          }\n        });\n      }\n\n      return batchField;\n    }\n\n    function createDirtyCheck(field) {\n      //let path = sfPath.parse(field.key);\n      let key = `__dirtyCheck[\"${field.key || batchConfig.key}\"]`;\n      //let child = path.length > 1;\n      let htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if(field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      let dirtyCheck = {\n        key,\n        htmlClass,\n        type: 'cn-dirty-check',\n        watch: [{\n          resolution: (val) => {\n            $timeout(() => {\n              let form = this.fieldRegister[field.key];\n              if(form.scope) {\n                form.scope.options = {\n                  tv4Validation: val\n                };\n                Object.keys(form.ngModel.$error)\n                    .filter(function(k) { return k.indexOf('tv4-') === 0; })\n                    .forEach(function(k) { ngModel.$setValidity(k, true); });\n                $rootScope.$broadcast('schemaFormValidate');\n              }\n            });\n          }\n        }]\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      //if(!child) {\n        if(field.watch) {\n          if(!_.isArray(field.watch)) field.watch = [field.watch];\n        }\n        else {\n          field.watch = [];\n        }\n\n        let model = this.buildModelDefault(field.key, field.schema) || {};\n\n        field.watch.push({\n          resolution: (val, prev) => {\n            if(!angular.equals(val, prev) && !angular.equals(val, model[field._key])) {\n              let register = this.fieldRegister[field._key];\n              if(register) {\n                if((register.ngModel && register.ngModel.$dirty) || register.initiated) {\n                  console.log('dirtyCheck.key:', key);\n                  cnFlexFormService.parseExpression(key, this.model).set(true);\n                }\n                else {\n                  register.initiated = true;\n                }\n              }\n              // debug\n              else {\n                console.log('noregister:', field, this.fieldRegister);\n              }\n            }\n          }\n        });\n\n        if (field.batchConfig.link) {\n          this.links.push({\n            key: field.key,\n            links: field.batchConfig.link\n          });\n        }\n      //}\n\n      return dirtyCheck;\n    }\n\n    function processLinks() {\n      let model = this.model;\n      this.links.forEach((link) => {\n        let fieldHandler = function(val, prev) {\n          if (!angular.equals(val, prev)) {\n            if(val) {\n              link.links.forEach(key => {\n                cnFlexFormService.parseExpression(`__dirtyCheck[\"${key}\"]`, model).set(true);\n              });\n            }\n          }\n        };\n        let fieldRegister = this.fieldRegister[link.key];\n        fieldRegister.field.watch.push({\n          resolution: fieldHandler\n        });\n        fieldRegister.dirtyCheck.watch = [{resolution: fieldHandler}];\n\n        let linkRegisters = _.filter(this.fieldRegister, (val, key) => link.links.includes(key));\n        linkRegisters.forEach((linkRegister) => {\n          if (!linkRegister.dirtyCheck.watch) linkRegister.dirtyCheck.watch = [];\n          linkRegister.dirtyCheck.watch.push({\n            resolution: (val, prev) => {\n              if (!angular.equals(val, prev)) {\n                if(val === false) {\n                  cnFlexFormService.parseExpression(`__dirtyCheck[\"${link.key}\"]`, model).set(false);\n                }\n              }\n            }\n          });\n        });\n      });\n    }\n\n    function buildModelDefault(key, schema) {\n      if (schema.type === 'array') {\n        let model = {[key]: []};\n        if (schema.items) {\n          _.each(schema.items.properties, (v, k) => {\n            if (v.type === 'array') {\n              model[key].push(buildModelDefault(k, v));\n            }\n          });\n        }\n        return model;\n      }\n    }\n\n    function addToSchema(key, schema) {\n      let path = sfPath.parse(key);\n      let depth = this.schema.schema;\n\n      path.forEach((k, i) => {\n        if(i === path.length - 1) {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        }\n        else if(k === '') {\n          if(!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        }\n        else {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          if(!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(model => {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      let models = [];\n\n      _.each(this.fieldRegister, (register, key) => {\n        let dirty = cnFlexFormService\n            .parseExpression(`__dirtyCheck[\"${key}\"]`, this.model)\n            .get();\n\n        if(!dirty) return;\n\n        let mode = cnFlexFormService\n            .parseExpression(`__batchConfig[\"${key}\"]`, this.model)\n            .get();\n\n        this.models.forEach((model, i) => {\n          if(!models[i]) models[i] = {};\n\n          let val = cnFlexFormService\n              .parseExpression(key, this.model)\n              .get();\n          let update = cnFlexFormService\n              .parseExpression(key, models[i]);\n          let original = cnFlexFormService\n              .parseExpression(key, this.models[i]);\n\n          this.setValue(val, update, original, mode);\n        });\n      });\n\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if(mode === 'replace') {\n        update.set(val);\n      }\n      else if(mode === 'append') {\n        let originalVal = original.get();\n        if(_.isArray(originalVal)) {\n          update.set(originalVal.concat(val));\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${originalVal} ${val.trim()}`);\n        }\n      }\n      else if(mode === 'prepend') {\n        let originalVal = original.get();\n        if(_.isArray(originalVal)) {\n          update.set(val.concat(originalVal));\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${val.trim()} ${originalVal}`);\n        }\n      }\n      else if(mode === 'increase') {\n        update.set(original.get() + val);\n      }\n      else if(mode === 'decrease') {\n        update.set(original.get() - val);\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function processDefault(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append'];\n\n      config.default = config.default || 'append';\n\n      config.onSelect = {\n        replace: () => {\n          if(_.allEqual(config.ogValues)) {\n            cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n          }\n          else {\n            field.placeholder = '—';\n          }\n        },\n        append: () => {\n          field.placeholder = '';\n        },\n        prepend: () => {\n          field.placeholder = '';\n        }\n      };\n    }\n\n    function processNumber(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n      else {\n        field.placeholder = '—';\n      }\n    }\n\n    function setNestedPlaceholder(field) {\n      if (field.items) {\n        field.items.forEach(setNestedPlaceholder);\n      } else {\n        field.placeholder = '—';\n      }\n    }\n\n    function  processSelect(field) {\n      let type = field.schema.type;\n      let config = field.batchConfig;\n\n      if(type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'append';\n\n        if (_.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n        } else {\n          setNestedPlaceholder(field);\n        }\n\n        config.onSelect = {\n          replace: (prev) => {\n            if(prev && prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          append: (prev) => {\n            if(prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          remove: () => {\n            let val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, this.model).set(val);\n          }\n        };\n      }\n      else {\n\n        let first = _.first(config.ogValues);\n        //TODO: dynamically send back data\n        if(first && _.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(first);\n        }\n\n        if(!field.placeholder) {\n          field.placeholder = '—';\n        }\n      }\n    }\n\n    function processDate(field) {\n      let config = field.batchConfig;\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n      else {\n        field.placeholder = '—';\n      }\n    }\n\n    function processToggle(field) {\n      let config = field.batchConfig;\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues));\n      }\n    }\n\n    function clearDefaults() {\n      this.schema.schema.required = undefined;\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n    }\n\n    function clearSchemaDefault(schema) {\n      schema.default = undefined;\n      if(schema.type === 'object' && schema.properties) {\n        schema.required = undefined;\n        _.each(schema.properties, this.clearSchemaDefault.bind(this));\n      }\n      else if(schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items);\n      }\n    }\n\n    function showResults(results, config) {\n      this.results = results;\n      this.resultsConfig = config;\n\n      if(this.modal) {\n        this.modal.close();\n      }\n\n      this.modal = cnModal.open({\n        controller: 'BatchResults',\n        controllerAs: 'vm',\n        templateUrl: 'cn-batch-forms/batch-results.html',\n        resolve: {\n          parent: () => this\n        }\n      });\n    }\n\n    function closeModal() {\n      this.modal.close();\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = `\n          <div class=\"well\">\n            <h5>Edit Modes</h5>\n            <p>Some types of fields allow you to apply batch changes in\n            different ways:</p>\n            <dl>\n              <dt>Replace:</dt>\n              <dd>Replace all the original values\n              with the new value. <em>(If you don't see an <b>Edit Mode</b> option\n              for a field, this will be the default)</em></dd>\n            </dl>\n            ${this.getEditModeLegends()}\n          </div>`;\n    }\n\n    function getEditModeLegends() {\n      let legends = '';\n\n      if(this.editModes.prepend) {\n        legends += `\n            <dl>\n              <dt>Prepend:</dt>\n              <dd>Add the new value to the start of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.append) {\n        legends += `\n            <dl>\n              <dt>Append:</dt>\n              <dd>Affix the new value at the end of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.decrease) {\n        legends += `\n            <dl>\n              <dt>Decrease:</dt>\n              <dd>Subtract the given value from the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.increase) {\n        legends += `\n            <dl>\n              <dt>Increase:</dt>\n              <dd>Add the given value to the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      return legends;\n    }\n  }\n\n})();","angular.module(\"cn.batch-forms\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"cn-batch-forms/batch-results.html\",\"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.submit(handler)\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n    <table class=\\\"table card-flex gutterless\\\">\\n      <tbody>\\n      <tr ng-repeat=\\\"result in vm.results\\\">\\n        <td class=\\\"col-sm-10\\\">\\n          <h6 ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{result.body.id}})</span>\\n          </h6>\\n          <h6 ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{vm.originals[$index].id}})</span>\\n          </h6>\\n          <p ng-class=\\\"{\\n               \\'text-danger\\': result.status != 200,\\n               \\'text-primary\\': result.status == 200\\n             }\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n            {{result.status == 200 ? \\'updated successfully\\' : result.body.message}}\\n          </p>\\n        </td>\\n        <td class=\\\"col-sm-2 text-center\\\">\\n          <a ng-show=\\\"result.editSref\\\"\\n             class=\\\"btn btn-sm btn-transparent\\\"\\n             ui-sref=\\\"{{result.editSref}}\\\">\\n            <i class=\\\"icn-edit\\\"></i>\\n          </a>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\");}]);"],"sourceRoot":"/source/"}