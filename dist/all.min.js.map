{"version":3,"sources":["all.min.js","_.cn-batch-forms.module.js","batch-results.js","cn-batch-forms.routes.js","cn-batch-forms.service.js","templates.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","angular","module","BatchResults","$state","parent","$stateParams","activate","vm","config","idParam","results","forEach","result","index","_","isFunction","buildEditSref","editSref","body","params","assign","originals","id","current","name","toJson","headerConfig","title","main","actionConfig","actions","text","handler","returnState","go","noData","showEdit","inRange","status","submit","closeModal","this","models","resultsConfig","displayName","formName","controller","$inject","cnBatchFormsConfig","cnFlexFormServiceProvider","registerField","condition","field","type","TYPE","templateUrl","TEMPLATE_URL","addTemplates","$templateCache","put","run","cnBatchFormsProvider","fieldType","fieldTypeHandlers","$get","cnBatchForms","cnFlexFormService","cnFlexFormTypes","sfPath","$rootScope","$timeout","cnModal","augmentSchema","schema","model","length","service","BatchForms","create","constructor","addMeta","addToSchema","clearSchemaDefault","createDirtyCheck","createBatchField","getChangedModels","getEditModeLegends","getFormFromRegister","getModelValues","getSchemaDefault","getTitleMap","handleLinks","onFieldScope","onReprocessField","processCondition","processSchema","processField","processItems","processDate","processDefault","processLinkList","processLinks","processNumber","processSelect","processToggle","registerFieldWatch","resetDefaults","restoreDefaults","setValidation","setValue","showResults","instance","instances","defaults","editModes","fieldRegister","forms","i","form","splice","$on","bind","event","scope","getKey","startsWith","ngModel","$pristine","register","fields","child","batchConfig","htmlClass","batchField","dirtyCheck","items","replace","_key","_placeholder","placeholder","getSchema","properties","required","conditionals","getFieldType","isString","isObject","ogValues","allEqual","first","parseExpression","set","clone","uniqueId","watch","item","push","resolution","_this","map","capitalize","def","titleMap","btnClass","default","onSelect","val","prev","_this2","isUndefined","_minItems","minItems","options","tv4Validation","keys","$error","filter","k","indexOf","$setValidity","includes","re","RegExp","test","_this3","notitle","$broadcast","fieldWatch","get","console","debug","isArray","e","list","hard","_this4","_this5","without","links","hardLinks","path","parse","depth","_this6","each","dirty","mode","assignable","getAssignable","fullPath","_val","update","original","originalVal","uniqVal","concat","uniq","trim","_originalVal","add","subtract","replaceString","withString","expression","escapeRegExp","setPlaceholder","noBatchPlaceholder","_this7","silent","append","prepend","stringReplace","configKey","replaceKey","withKey","stringReplaceField","extend","setNestedPlaceholder","_this8","copy","remove","chain","flatten","_this9","undefined","__batchConfig","__dirtyCheck","_this10","setNoPlaceholder","_this11","_this12","modal","close","open","controllerAs","resolve","meta","legends","decrease","increase","provider","string","number","url","array","cn-autocomplete","cn-currency","cn-datetimepicker","cn-toggle"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  angular.module('cn.batch-forms', ['schemaForm', 'cn.flex-form', 'cn.util', 'ui.router']);\n})();\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$stateParams'];\n\n  function BatchResults($state, parent, $stateParams) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n    vm.formName = $state.current.name;\n    vm.text = vm.config.text;\n\n    vm.activate = activate;\n    vm.showEdit = showEdit;\n    vm.submit = submit;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      if (vm.config.idParam) {\n        vm.results.forEach(function (result, index) {\n          if (_.isFunction(vm.config.buildEditSref)) {\n            result.editSref = vm.config.buildEditSref(result.body, index);\n          } else {\n            var params = _.assign({}, $stateParams, _defineProperty({}, vm.config.idParam, vm.originals[index].id));\n            result.editSref = $state.current.name + '(' + angular.toJson(params) + ')';\n          }\n        });\n      }\n\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Continue Editing'\n          }, {\n            text: 'Done',\n            handler: function handler() {\n              if (vm.config && vm.config.returnState) {\n                $state.go(vm.config.returnState.name, vm.config.returnState.params);\n              }\n            }\n          }]\n        },\n        noData: true\n      };\n    }\n\n    function showEdit(result) {\n      return result.editSref && _.inRange(result.status, 200, 299);\n    }\n\n    function submit(handler) {\n      vm.parent.closeModal();\n      if (handler) {\n        handler();\n      }\n    }\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('cn.batch-forms').config(cnBatchFormsConfig).run(addTemplates);\n\n  var TYPE = 'cn-dirty-check';\n  var TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function cnBatchFormsConfig(cnFlexFormServiceProvider) {\n    cnFlexFormServiceProvider.registerField({\n      condition: function condition(field) {\n        return field.type === TYPE;\n      },\n      handler: function handler(field) {/*console.log('field.readonly:', field.key, field.readonly)*/},\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(TEMPLATE_URL, '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 ng-disabled=\"form.readonly\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>');\n  }\n})();\n'use strict';\n\n(function () {\n  angular.module('cn.batch-forms').provider('cnBatchForms', cnBatchFormsProvider);\n\n  var fieldTypeHandlers = {\n    'string': 'processDefault',\n    'number': 'processNumber',\n    'url': 'processDefault',\n    'array': 'processSelect',\n    'cn-autocomplete': 'processSelect',\n    'cn-currency': 'processNumber',\n    'cn-datetimepicker': 'processDate',\n    'cn-toggle': 'processToggle'\n  };\n\n  function cnBatchFormsProvider() {\n    return {\n      registerField: registerField,\n      $get: cnBatchForms\n    };\n\n    ///////////\n\n    function registerField(fieldType) {\n      if (fieldType.handler) {\n        fieldTypeHandlers[fieldType.type] = fieldType.handler;\n      }\n    }\n  }\n\n  cnBatchForms.$inject = ['cnFlexFormService', 'cnFlexFormTypes', 'sfPath', '$rootScope', '$timeout', 'cnModal'];\n  function cnBatchForms(cnFlexFormService, cnFlexFormTypes, sfPath, $rootScope, $timeout, cnModal) {\n\n    var instances = 0;\n\n    return {\n      augmentSchema: augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if (!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor: constructor,\n        addMeta: addMeta,\n        addToSchema: addToSchema,\n        clearSchemaDefault: clearSchemaDefault,\n        closeModal: closeModal,\n        createDirtyCheck: createDirtyCheck,\n        createBatchField: createBatchField,\n        getChangedModels: getChangedModels,\n        getEditModeLegends: getEditModeLegends,\n        getFormFromRegister: getFormFromRegister,\n        getModelValues: getModelValues,\n        getSchemaDefault: getSchemaDefault,\n        getTitleMap: getTitleMap,\n        handleLinks: handleLinks,\n        onFieldScope: onFieldScope,\n        onReprocessField: onReprocessField,\n        processCondition: processCondition,\n        processSchema: processSchema,\n        processField: processField,\n        processItems: processItems,\n        processDate: processDate,\n        processDefault: processDefault,\n        processLinkList: processLinkList,\n        processLinks: processLinks,\n        processNumber: processNumber,\n        processSelect: processSelect,\n        processToggle: processToggle,\n        registerFieldWatch: registerFieldWatch,\n        resetDefaults: resetDefaults,\n        restoreDefaults: restoreDefaults,\n        setValidation: setValidation,\n        setValue: setValue,\n        showResults: showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n\n      this.instance = instances;\n      //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.defaults = {};\n      this.editModes = {};\n      this.fieldRegister = {};\n\n      this.processSchema();\n\n      if (schema.forms) {\n        var i = schema.forms.length - 1;\n        while (i > -1) {\n          this.processItems(schema.forms[i].form);\n          if (!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n      } else {\n        this.processItems(schema.form);\n      }\n\n      this.addMeta();\n      this.processLinks();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n      $rootScope.$on('cnFlexFormReprocessField', this.onReprocessField.bind(this));\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      var key = cnFlexFormService.getKey(scope.form.key);\n\n      if (!key.startsWith('__')) {\n        if (!this.fieldRegister[key]) this.fieldRegister[key] = {};\n        var register = this.fieldRegister[key];\n        register.ngModel = scope.ngModel;\n        register.scope = scope;\n\n        if (!this.fieldRegister[key].field) this.fieldRegister[key].field = scope.form;\n      }\n\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if (scope.form.key[0] === '__batchConfig') {\n          scope.ngModel.$pristine = false;\n        }\n    }\n\n    function processItems(fields) {\n      var i = fields.length - 1;\n      while (i > -1) {\n        var child = this.processField(fields[i]);\n        if (child && child.batchConfig) {\n          if (child.type !== 'fieldset') {\n            child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n          }\n          var batchField = this.createBatchField(child);\n          var dirtyCheck = child.key && this.createDirtyCheck(child);\n          // add mode buttons after field\n          fields[i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n            condition: this.processCondition(child.condition)\n          };\n          delete child.condition;\n          if (child.key) {\n            if (!this.fieldRegister[child.key]) this.fieldRegister[child.key] = {};\n            this.fieldRegister[child.key].field = child;\n            this.fieldRegister[child.key].dirtyCheck = dirtyCheck;\n          }\n        }\n        if (!child) {\n          // remove field if batch isn't supported by it or children\n          fields.splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processCondition(condition) {\n      return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n    }\n\n    function processField(field) {\n      if (field.key) {\n        if (!field.batchConfig) return false;\n\n        field._key = field.key;\n        field._placeholder = field.placeholder;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n\n        delete field.required;\n        if (field.conditionals) delete field.conditionals.required;\n\n        var fieldType = cnFlexFormTypes.getFieldType(field);\n        var handler = fieldTypeHandlers[fieldType];\n\n        if (handler) {\n          if (_.isString(handler)) handler = this[handler];\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          if (_.allEqual(field.batchConfig.ogValues)) {\n            var key = '__ogValues[\"' + field.key + '\"]';\n            var first = _.first(field.batchConfig.ogValues);\n            cnFlexFormService.parseExpression(key, this.model).set(first);\n          }\n\n          return handler.bind(this)(field);\n        } else return false;\n      }\n\n      if (field.items) {\n        if (field.batchConfig) {\n          field.items.forEach(function (child) {\n            child.batchConfig = _.clone(field.batchConfig);\n          });\n        }\n        this.processItems(field.items);\n        if (!field.items.length) return false;\n\n        if (field.batchConfig) {\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.key = 'component_' + _.uniqueId();\n          field.batchConfig.watch = [];\n\n          field.items.forEach(function (item, i) {\n            var child = item.items[0];\n            if (!i) {\n              field.batchConfig.editModes = child.batchConfig.editModes;\n              field.batchConfig.default = child.batchConfig.default;\n            }\n            field.batchConfig.watch.push({\n              resolution: 'model.__batchConfig[\"' + child.key + '\"] = model.__batchConfig[\"' + field.batchConfig.key + '\"]'\n            });\n            item.items[2].condition = 'false';\n          });\n        }\n      }\n      return field;\n    }\n\n    function getTitleMap(editModes) {\n      var _this = this;\n\n      editModes = editModes || ['replace'];\n\n      return editModes.map(function (value) {\n        _this.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value: value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      var batchConfig = field.batchConfig;\n      var key = '__batchConfig[\"' + (field.key || batchConfig.key) + '\"]';\n\n      var batchField = {\n        key: key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check',\n        watch: batchConfig.watch || []\n      };\n\n      if (batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(batchConfig.default)\n      });\n\n      if (batchConfig.onSelect) {\n        batchField.watch.push({\n          resolution: function resolution(val, prev) {\n            if (!val) return;\n            batchConfig.onSelect[val](prev);\n          }\n        });\n      }\n\n      return batchField;\n    }\n\n    function setValidation(field, val) {\n      var _this2 = this;\n\n      var key = cnFlexFormService.getKey(field.key);\n\n      if (field.schema && field.schema.type === 'array') {\n        if (_.isUndefined(field.schema._minItems)) field.schema._minItems = field.schema.minItems;\n        field.schema.minItems = val ? field.schema._minItems : 0;\n      }\n\n      var forms = key ? this.getFormFromRegister(key) : [];\n\n      forms.forEach(function (form) {\n        if (form.scope) {\n          form.scope.options = form.scope.options || {};\n          form.scope.options.tv4Validation = val;\n          Object.keys(form.ngModel.$error).filter(function (k) {\n            return k.indexOf('tv4-') === 0;\n          }).forEach(function (k) {\n            form.ngModel.$setValidity(k, true);\n          });\n        }\n      });\n      if (field.items) {\n        field.items.forEach(function (i) {\n          return _this2.setValidation(i, val);\n        });\n      }\n    }\n\n    function getFormFromRegister(key) {\n      if (key.includes('[]')) {\n        var re = new RegExp(key.replace('[]', '\\\\[\\\\d*\\\\]'));\n        return _.filter(this.fieldRegister, function (form, k) {\n          return re.test(k);\n        });\n      } else if (this.fieldRegister[key]) {\n        return [this.fieldRegister[key]];\n      } else return [];\n    }\n\n    function createDirtyCheck(field) {\n      var _this3 = this;\n\n      //let path = sfPath.parse(field.key);\n      var key = '__dirtyCheck[\"' + (field.key || field.batchConfig.key) + '\"]';\n      //let child = path.length > 1;\n      var htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if (field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      var dirtyCheck = {\n        key: key,\n        htmlClass: htmlClass,\n        type: 'cn-dirty-check',\n        watch: [{\n          resolution: function resolution(val) {\n            //$timeout(() => {\n            _this3.setValidation(field, val);\n            $rootScope.$broadcast('schemaFormValidate');\n            //});\n          }\n        }]\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      dirtyCheck.fieldWatch = {\n        resolution: function resolution(val) {\n          var register = _this3.fieldRegister[field._key];\n          if (register) {\n            if (_.get(register, 'ngModel.$dirty')) {\n              cnFlexFormService.parseExpression(key, _this3.model).set(true);\n            }\n          }\n          // debug\n          else {\n              console.debug('no register:', field, _this3.fieldRegister);\n            }\n        }\n      };\n\n      this.registerFieldWatch(field, dirtyCheck.fieldWatch);\n\n      return dirtyCheck;\n    }\n\n    function registerFieldWatch(field, watch) {\n      if (field.watch) {\n        if (!_.isArray(field.watch)) field.watch = [field.watch];\n      } else {\n        field.watch = [];\n      }\n\n      field.watch.push(watch);\n    }\n\n    function onReprocessField(e, key) {\n      var register = this.fieldRegister[key];\n      if (!register) return console.debug('no register:', key, this.fieldRegister);\n      if (register.dirtyCheck) this.registerFieldWatch(register.field, register.dirtyCheck.fieldWatch);\n    }\n\n    function handleLinks(list, hard) {\n      var _this4 = this;\n\n      return function (val) {\n        list.forEach(function (key) {\n          if (!hard) {\n            var register = _this4.fieldRegister[key];\n            if (!_.get(register, 'ngModel.$dirty')) return;\n          }\n          cnFlexFormService.parseExpression('__dirtyCheck[\"' + key + '\"]', _this4.model).set(val);\n        });\n      };\n    }\n\n    function processLinkList(list, hard) {\n      var _this5 = this;\n\n      list.forEach(function (keys) {\n        keys.forEach(function (key) {\n          var register = _this5.fieldRegister[key];\n          if (!register) {\n            console.debug('no register:', key);\n            return;\n          }\n          var field = register.field,\n              dirtyCheck = register.dirtyCheck;\n\n          var handler = _this5.handleLinks(_.without(keys, key), hard);\n          field.watch = field.watch || [];\n          dirtyCheck.watch = dirtyCheck.watch || [];\n          field.watch.push({\n            resolution: function resolution() {\n              handler(true);\n            }\n          });\n          dirtyCheck.watch.push({ resolution: handler });\n        });\n      });\n    }\n\n    function processLinks() {\n      if (this.schema.batchConfig) {\n        if (this.schema.batchConfig.links) {\n          this.processLinkList(this.schema.batchConfig.links);\n        }\n        if (this.schema.batchConfig.hardLinks) {\n          this.processLinkList(this.schema.batchConfig.hardLinks, true);\n        }\n      }\n    }\n\n    function addToSchema(key, schema) {\n      var path = sfPath.parse(key);\n      var depth = this.schema.schema;\n\n      path.forEach(function (k, i) {\n        if (i === path.length - 1) {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        } else if (k === '') {\n          if (!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        } else {\n          if (!depth.properties) {\n            depth.properties = {};\n          }\n          if (!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(function (model) {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      var _this6 = this;\n\n      var models = [];\n\n      _.each(this.fieldRegister, function (register, key) {\n        var dirty = cnFlexFormService.parseExpression('__dirtyCheck[\"' + key + '\"]', _this6.model).get();\n\n        if (!dirty) return;\n\n        var mode = cnFlexFormService.parseExpression('__batchConfig[\"' + key + '\"]', _this6.model).get();\n\n        _this6.models.forEach(function (model, i) {\n          models[i] = models[i] || {};\n\n          var path = sfPath.parse(key);\n          // if column is json, we want to merge updates into model's current json value\n          // so we copy the current value if we haven't already (on a previous iteration)\n          if (path.length > 1 && !models[i][path[0]]) {\n            models[i][path[0]] = _this6.models[i][path[0]];\n          }\n\n          var assignable = cnFlexFormService.parseExpression(key, _this6.models[i]).getAssignable();\n\n          // if column is json and model's current value doesn't have parent property for\n          // key we're updating, just copy over entire key instead of using specific\n          // edit mode logic for new value\n          if (assignable.fullPath !== key) {\n            var val = cnFlexFormService.parseExpression(assignable.fullPath, _this6.model).get();\n\n            cnFlexFormService.parseExpression(assignable.fullPath, _this6.models[i]).set(val);\n          } else {\n            var _val = cnFlexFormService.parseExpression(key, _this6.model).get();\n            var update = cnFlexFormService.parseExpression(key, models[i]);\n            var original = cnFlexFormService.parseExpression(key, _this6.models[i]);\n\n            _this6.setValue(_val, update, original, mode);\n          }\n        });\n      });\n\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if (mode === 'replace') {\n        update.set(val);\n      } else if (mode === 'append') {\n        var originalVal = original.get();\n        if (_.isArray(originalVal)) {\n          var uniqVal = _([]).concat(originalVal, val).uniq(function (value) {\n            return value.key || value;\n          }).value();\n\n          update.set(uniqVal);\n        } else if (_.isString(originalVal)) {\n          update.set(originalVal + ' ' + val.trim());\n        } else {\n          update.set(val);\n        }\n      } else if (mode === 'prepend') {\n        var _originalVal = original.get();\n        if (_.isArray(_originalVal)) {\n          update.set(val.concat(_originalVal));\n        } else if (_.isString(_originalVal)) {\n          update.set(val.trim() + ' ' + _originalVal);\n        } else {\n          update.set(val);\n        }\n      } else if (mode === 'increase') {\n        update.set(_.add(original.get() || 0, val));\n      } else if (mode === 'decrease') {\n        update.set(_.subtract(original.get() || 0, val));\n      } else if (mode === 'stringReplace' && original.get()) {\n        var key = original.path().key;\n        var replaceString = cnFlexFormService.parseExpression('_replace_' + key, this.model);\n        var withString = cnFlexFormService.parseExpression('_with_' + key, this.model);\n        var expression = new RegExp(_.escapeRegExp(replaceString.get()), \"gi\");\n        update.set(original.get().replace(expression, withString.get()));\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function setPlaceholder(field, val) {\n      if (field.noBatchPlaceholder) return;\n      field.placeholder = val;\n    }\n\n    function processDefault(field) {\n      var _this7 = this;\n\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append', 'stringReplace'];\n\n      config.default = config.default || 'append';\n\n      if (!config.editModes.includes(config.default)) {\n        config.default = config.editModes[0];\n      }\n\n      config.onSelect = {\n        replace: function replace() {\n          if (_.allEqual(config.ogValues)) {\n            cnFlexFormService.parseExpression(field.key, _this7.model).set(_.first(config.ogValues), { silent: true });\n          } else {\n            setPlaceholder(field, '—');\n          }\n        },\n        append: function append() {\n          setPlaceholder(field, '');\n        },\n        prepend: function prepend() {\n          setPlaceholder(field, '');\n        },\n        stringReplace: function stringReplace() {}\n      };\n\n      if (config.editModes.includes(config.default)) {\n        config.onSelect[config.default]();\n      }\n\n      if (config.editModes.includes('stringReplace')) {\n        var dirtyCheck = this.createDirtyCheck(field);\n        var configKey = '__batchConfig[\"' + (field.key || field.batchConfig.key) + '\"]';\n        var replaceKey = '_replace_' + (field.key || field.batchConfig.key);\n        var withKey = '_with_' + (field.key || field.batchConfig.key);\n        var stringReplaceField = {\n          type: 'component',\n          items: [{\n            key: replaceKey,\n            title: 'Replace',\n            watch: {\n              resolution: 'model.' + dirtyCheck.key + ' = true'\n            }\n          }, {\n            key: withKey,\n            title: 'With',\n            watch: {\n              resolution: 'model.' + dirtyCheck.key + ' = true'\n            }\n          }],\n          condition: 'model.' + configKey + ' === \\'stringReplace\\''\n        };\n\n        config.key = field.key;\n\n        this.addToSchema(replaceKey, { type: 'string' });\n        this.addToSchema(withKey, { type: 'string' });\n\n        return {\n          type: 'section',\n          condition: field.condition,\n          batchConfig: config,\n          schema: field.schema,\n          items: [_.extend(field, { condition: 'model.' + configKey + ' !== \\'stringReplace\\'' }), stringReplaceField, dirtyCheck]\n        };\n      }\n\n      return field;\n    }\n\n    function processNumber(field) {\n      var config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues), { silent: true });\n      } else {\n        field.placeholder = '—';\n      }\n      return field;\n    }\n\n    function setNestedPlaceholder(field) {\n      if (field.items) {\n        //field.items.forEach(setNestedPlaceholder);\n      } else {\n          setPlaceholder(field, '—');\n        }\n    }\n\n    function processSelect(field) {\n      var _this8 = this;\n\n      var type = field.schema.type;\n      var config = field.batchConfig;\n\n      if (type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'replace';\n\n        if (_.allEqual(config.ogValues)) {\n          // fucking angular infdigs\n          $timeout(function () {\n            return cnFlexFormService.parseExpression(field.key, _this8.model).set(_.first(angular.copy(config.ogValues)), { silent: true });\n          });\n        } else {\n          setNestedPlaceholder(field);\n        }\n\n        config.onSelect = {\n          replace: function replace(prev) {\n            if (prev && prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, _this8.model).set([]);\n            }\n          },\n          append: function append(prev) {\n            if (prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, _this8.model).set([]);\n            }\n          },\n          remove: function remove() {\n            var val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, _this8.model).set(val, { silent: true });\n          }\n        };\n      } else {\n\n        var first = _.first(config.ogValues);\n        //TODO: dynamically send back data\n        if (first && _.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(first, { silent: true });\n        }\n\n        if (!field.placeholder) {\n          setPlaceholder(field, '—');\n        }\n      }\n      return field;\n    }\n\n    function processDate(field) {\n      var config = field.batchConfig;\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues, { silent: true }));\n      } else {\n        setPlaceholder(field, '—');\n      }\n      return field;\n    }\n\n    function processToggle(field) {\n      var config = field.batchConfig;\n\n      if (_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues, { silent: true }));\n      }\n      return field;\n    }\n\n    function processSchema() {\n      var _this9 = this;\n\n      this.schema.schema.required = undefined;\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n\n      $rootScope.$on('schemaFormBeforeAppendToArray', function (e, form) {\n        return _this9.restoreDefaults(form);\n      });\n      $rootScope.$on('schemaFormAfterAppendToArray', function (e, form) {\n        return _this9.resetDefaults(form);\n      });\n    }\n\n    function restoreDefaults(form) {\n      var _this10 = this;\n\n      if (!form.items) return;\n      form.items.forEach(function (item) {\n        if (item.key) {\n          if (item.schema) {\n            var key = cnFlexFormService.getKey(item.key).replace(/\\[\\d+]/g, '[]');\n            item.schema.default = _this10.defaults[key];\n          }\n        }\n        _this10.restoreDefaults(item);\n      });\n      setNoPlaceholder(form.items);\n    }\n\n    function setNoPlaceholder(items) {\n      _.each(items, function (item) {\n        item.placeholder = item._placeholder;\n        item.noBatchPlaceholder = true;\n        if (item.items) setNoPlaceholder(item.items);\n      });\n    }\n\n    function resetDefaults(form) {\n      var _this11 = this;\n\n      if (!form.items) return;\n      form.items.forEach(function (item) {\n        if (item.schema) {\n          item.schema.default = undefined;\n        }\n        _this11.resetDefaults(item);\n      });\n    }\n\n    function clearSchemaDefault(schema, key) {\n      // save for hydrating newly added array items\n      this.defaults[key] = schema.default;\n\n      // then remove because we don't want to override saved values with defaults\n      schema.default = undefined;\n\n      if (schema.type === 'object' && schema.properties) {\n        schema.required = undefined;\n        // _.each(schema.properties, this.clearSchemaDefault.bind(this));\n        for (var k in schema.properties) {\n          this.clearSchemaDefault(schema.properties[k], key + '.' + k);\n        }\n      } else if (schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items, key + '[]');\n      }\n    }\n\n    function showResults(results, config) {\n      var _this12 = this;\n\n      this.results = results;\n      this.resultsConfig = config;\n\n      if (this.modal) {\n        this.modal.close();\n      }\n\n      this.modal = cnModal.open({\n        controller: 'BatchResults',\n        controllerAs: 'vm',\n        templateUrl: 'cn-batch-forms/batch-results.html',\n        resolve: {\n          parent: function parent() {\n            return _this12;\n          }\n        }\n      });\n    }\n\n    function closeModal() {\n      this.modal.close();\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = '\\n          <div class=\"well\">\\n            <h5>Edit Modes</h5>\\n            <p>Some types of fields allow you to apply batch changes in\\n            different ways:</p>\\n            <dl>\\n              <dt>Replace:</dt>\\n              <dd>Replace all the original values\\n              with the new value. <em>(If you don\\'t see an <b>Edit Mode</b> option\\n              for a field, this will be the default)</em></dd>\\n            </dl>\\n            ' + this.getEditModeLegends() + '\\n          </div>';\n    }\n\n    function getEditModeLegends() {\n      var legends = '';\n\n      if (this.editModes.prepend) {\n        legends += '\\n            <dl>\\n              <dt>Prepend:</dt>\\n              <dd>Add the new value to the start of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.append) {\n        legends += '\\n            <dl>\\n              <dt>Append:</dt>\\n              <dd>Affix the new value at the end of the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.decrease) {\n        legends += '\\n            <dl>\\n              <dt>Decrease:</dt>\\n              <dd>Subtract the given value from the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      if (this.editModes.increase) {\n        legends += '\\n            <dl>\\n              <dt>Increase:</dt>\\n              <dd>Add the given value to the original\\n              values for each item.</dd>\\n            </dl>';\n      }\n      return legends;\n    }\n  }\n})();\n\"use strict\";\n\nangular.module(\"cn.batch-forms\").run([\"$templateCache\", function ($templateCache) {\n  $templateCache.put(\"cn-batch-forms/batch-results.html\", \"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.submit(handler)\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list card-flex\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n\\n    <div class=\\\"padding-20\\\"\\n         ng-if=\\\"vm.text\\\">\\n      <p class=\\\"no-margin text-mute\\\"\\n         ng-bind-html=\\\"vm.text\\\">\\n      </p>\\n    </div>\\n\\n    <table class=\\\"table gutterless\\\">\\n      <tbody>\\n      <tr ng-repeat=\\\"result in vm.results\\\">\\n        <td class=\\\"col-sm-10\\\">\\n          <h6 ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{result.body.id}})</span>\\n          </h6>\\n          <h6 ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{vm.originals[$index].id}})</span>\\n          </h6>\\n          <p ng-class=\\\"{\\n               \\'text-danger\\': result.status != 200,\\n               \\'text-primary\\': result.status == 200\\n             }\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n            {{result.status == 200 ? \\'updated successfully\\' : result.body.message}}\\n          </p>\\n        </td>\\n        <td class=\\\"col-sm-2 text-center\\\">\\n          <a class=\\\"btn btn-sm btn-transparent\\\"\\n             ng-show=\\\"vm.showEdit(result)\\\"\\n             ui-sref=\\\"{{ result.editSref }}\\\">\\n            <i class=\\\"icn-edit\\\"></i>\\n          </a>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\");\n}]);","(function() {\n  angular.module('cn.batch-forms', [\n    'schemaForm',\n    'cn.flex-form',\n    'cn.util',\n    'ui.router'\n  ]);\n})();","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .controller('BatchResults', BatchResults);\n\n  BatchResults.$inject = ['$state', 'parent', '$stateParams'];\n\n  function BatchResults($state, parent, $stateParams) {\n\n    var vm = this;\n    vm.parent = parent;\n    vm.results = vm.parent.results;\n    vm.originals = vm.parent.models;\n    vm.config = vm.parent.resultsConfig;\n    vm.displayName = vm.config && vm.config.displayName || 'name';\n    vm.formName = $state.current.name;\n    vm.text = vm.config.text;\n\n    vm.activate = activate;\n    vm.showEdit = showEdit;\n    vm.submit = submit;\n\n    vm.activate();\n\n    //////////\n\n    function activate() {\n      if (vm.config.idParam) {\n        vm.results.forEach((result, index) => {\n          if (_.isFunction(vm.config.buildEditSref)) {\n            result.editSref = vm.config.buildEditSref(result.body, index);\n          }\n          else {\n            const params = _.assign({}, $stateParams, {[vm.config.idParam]: vm.originals[index].id});\n            result.editSref = `${$state.current.name}(${angular.toJson(params)})`;\n          }\n        });\n      }\n\n      vm.headerConfig = {\n        title: {\n          main: 'Batch Results'\n        },\n        actionConfig: {\n          actions: [{\n            text: 'Continue Editing'\n          }, {\n            text: 'Done',\n            handler: () => {\n              if(vm.config && vm.config.returnState) {\n                $state.go(vm.config.returnState.name, vm.config.returnState.params);\n              }\n            }\n          }]\n        },\n        noData: true\n      };\n\n    }\n\n    function showEdit(result) {\n      return result.editSref && _.inRange(result.status, 200, 299);\n    }\n\n    function submit(handler) {\n      vm.parent.closeModal();\n      if(handler) {\n        handler();\n      }\n    }\n\n  }\n\n})();\n","(function() {\n  'use strict';\n\n  angular\n      .module('cn.batch-forms')\n      .config(cnBatchFormsConfig)\n      .run(addTemplates);\n\n  const TYPE = 'cn-dirty-check';\n  const TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\n  cnBatchFormsConfig.$inject = ['cnFlexFormServiceProvider'];\n\n  function cnBatchFormsConfig(cnFlexFormServiceProvider) {\n    cnFlexFormServiceProvider.registerField({\n      condition: (field) => field.type === TYPE,\n      handler: (field) => {/*console.log('field.readonly:', field.key, field.readonly)*/},\n      type: TYPE,\n      templateUrl: TEMPLATE_URL\n    });\n  }\n\n  addTemplates.$inject = ['$templateCache'];\n  function addTemplates($templateCache) {\n    $templateCache.put(\n        TEMPLATE_URL,\n        '\\\n        <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n          <input type=\"checkbox\"\\\n                 ng-model=\"$$value$$\"\\\n                 ng-model-options=\"form.ngModelOptions\"\\\n                 sf-changed=\"form\"\\\n                 ng-disabled=\"form.readonly\"\\\n                 name=\"{{form.key.slice(-1)[0]}}\"/>\\\n        </div>'\n    );\n  }\n\n})();","(function() {\n  angular\n      .module('cn.batch-forms')\n      .provider('cnBatchForms', cnBatchFormsProvider);\n\n  let fieldTypeHandlers = {\n    'string': 'processDefault',\n    'number': 'processNumber',\n    'url': 'processDefault',\n    'array': 'processSelect',\n    'cn-autocomplete': 'processSelect',\n    'cn-currency': 'processNumber',\n    'cn-datetimepicker': 'processDate',\n    'cn-toggle': 'processToggle'\n  };\n\n  function cnBatchFormsProvider() {\n    return {\n      registerField,\n      $get: cnBatchForms\n    };\n\n    ///////////\n\n    function registerField(fieldType) {\n      if(fieldType.handler) {\n        fieldTypeHandlers[fieldType.type] = fieldType.handler;\n      }\n    }\n  }\n\n  cnBatchForms.$inject = [\n    'cnFlexFormService',\n    'cnFlexFormTypes',\n    'sfPath',\n    '$rootScope',\n    '$timeout',\n    'cnModal'\n  ];\n  function cnBatchForms(\n      cnFlexFormService,\n      cnFlexFormTypes,\n      sfPath,\n      $rootScope,\n      $timeout,\n      cnModal) {\n\n    let instances = 0;\n\n    return {\n      augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if(!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service;\n    }\n\n    function BatchForms(schema, model, models) {\n      return Object.create({\n        constructor,\n        addMeta,\n        addToSchema,\n        clearSchemaDefault,\n        closeModal,\n        createDirtyCheck,\n        createBatchField,\n        getChangedModels,\n        getEditModeLegends,\n        getFormFromRegister,\n        getModelValues,\n        getSchemaDefault,\n        getTitleMap,\n        handleLinks,\n        onFieldScope,\n        onReprocessField,\n        processCondition,\n        processSchema,\n        processField,\n        processItems,\n        processDate,\n        processDefault,\n        processLinkList,\n        processLinks,\n        processNumber,\n        processSelect,\n        processToggle,\n        registerFieldWatch,\n        resetDefaults,\n        restoreDefaults,\n        setValidation,\n        setValue,\n        showResults\n      }).constructor(schema, model, models);\n    }\n\n    function constructor(schema, model, models) {\n\n      this.instance = instances;\n      //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n      instances++;\n\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n      this.defaults = {};\n      this.editModes = {};\n      this.fieldRegister = {};\n\n      this.processSchema();\n\n      if(schema.forms) {\n        let i = schema.forms.length - 1;\n        while(i > -1) {\n          this.processItems(schema.forms[i].form);\n          if(!schema.forms[i].form.length) {\n            schema.forms.splice(i, 1);\n          }\n          --i;\n        }\n      }\n      else {\n        this.processItems(schema.form);\n      }\n\n      this.addMeta();\n      this.processLinks();\n\n      $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n      $rootScope.$on('cnFlexFormReprocessField', this.onReprocessField.bind(this));\n\n      return this;\n    }\n\n    function onFieldScope(event, scope) {\n      let key = cnFlexFormService.getKey(scope.form.key);\n\n      if(!key.startsWith('__')) {\n        if(!this.fieldRegister[key]) this.fieldRegister[key] = {};\n        const register = this.fieldRegister[key];\n        register.ngModel = scope.ngModel;\n        register.scope = scope;\n\n        if(!this.fieldRegister[key].field) this.fieldRegister[key].field = scope.form;\n      }\n\n      // prevent edit mode radiobuttons from setting form to dirty\n      else if(scope.form.key[0] === '__batchConfig') {\n        scope.ngModel.$pristine = false;\n      }\n    }\n\n    function processItems(fields) {\n      let i = fields.length - 1;\n      while(i > -1) {\n        const child = this.processField(fields[i]);\n        if(child && child.batchConfig) {\n          if(child.type !== 'fieldset') {\n            child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n          }\n          let batchField = this.createBatchField(child);\n          let dirtyCheck = child.key && this.createDirtyCheck(child);\n          // add mode buttons after field\n          fields[i] = {\n            type: 'section',\n            htmlClass: 'cn-batch-wrapper',\n            items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n            condition: this.processCondition(child.condition)\n          };\n          delete child.condition;\n          if(child.key) {\n            if(!this.fieldRegister[child.key]) this.fieldRegister[child.key] = {};\n            this.fieldRegister[child.key].field = child;\n            this.fieldRegister[child.key].dirtyCheck = dirtyCheck;\n          }\n        }\n        if(!child) {\n          // remove field if batch isn't supported by it or children\n          fields.splice(i, 1);\n        }\n        --i;\n      }\n    }\n\n    function processCondition(condition) {\n      return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n    }\n\n    function processField(field) {\n      if(field.key) {\n        if(!field.batchConfig) return false;\n\n        field._key = field.key;\n        field._placeholder = field.placeholder;\n        field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n        field.type = field.type || field.schema.type;\n\n        delete field.required;\n        if(field.conditionals) delete field.conditionals.required;\n\n        let fieldType = cnFlexFormTypes.getFieldType(field);\n        let handler = fieldTypeHandlers[fieldType];\n\n        if(handler) {\n          if(_.isString(handler)) handler = this[handler];\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          if(_.allEqual(field.batchConfig.ogValues)) {\n            let key = `__ogValues[\"${field.key}\"]`;\n            let first = _.first(field.batchConfig.ogValues);\n            cnFlexFormService.parseExpression(key, this.model).set(first);\n          }\n\n          return handler.bind(this)(field);\n        }\n        else return false;\n      }\n\n      if(field.items) {\n        if(field.batchConfig) {\n          field.items.forEach(child => {\n            child.batchConfig = _.clone(field.batchConfig);\n          });\n        }\n        this.processItems(field.items);\n        if(!field.items.length) return false;\n\n        if(field.batchConfig) {\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.key = `component_${_.uniqueId()}`;\n          field.batchConfig.watch = [];\n\n          field.items.forEach((item, i) => {\n            let child = item.items[0];\n            if(!i) {\n              field.batchConfig.editModes = child.batchConfig.editModes;\n              field.batchConfig.default = child.batchConfig.default;\n            }\n            field.batchConfig.watch.push({\n              resolution: `model.__batchConfig[\"${child.key}\"] = model.__batchConfig[\"${field.batchConfig.key}\"]`\n            });\n            item.items[2].condition = 'false';\n          });\n        }\n      }\n      return field;\n    }\n\n    function getTitleMap(editModes) {\n      editModes = editModes || ['replace'];\n\n      return editModes.map(value => {\n        this.editModes[value] = true;\n        return {\n          name: _.capitalize(value),\n          value\n        };\n      });\n    }\n\n    function getSchemaDefault(def) {\n      return def || 'replace';\n    }\n\n    function createBatchField(field) {\n      let batchConfig = field.batchConfig;\n      let key = `__batchConfig[\"${field.key || batchConfig.key}\"]`;\n\n      let batchField = {\n        key,\n        type: 'radiobuttons',\n        titleMap: this.getTitleMap(batchConfig.editModes),\n        htmlClass: 'cn-batch-options',\n        btnClass: 'btn-sm cn-no-dirty-check',\n        watch: batchConfig.watch || []\n      };\n\n      if(batchField.titleMap.length === 1) {\n        batchField.condition = 'false';\n      }\n\n      this.addToSchema(key, {\n        type: 'string',\n        title: 'Edit Mode',\n        default: this.getSchemaDefault(batchConfig.default)\n      });\n\n      if(batchConfig.onSelect) {\n        batchField.watch.push({\n          resolution: (val, prev) => {\n            if(!val) return;\n            batchConfig.onSelect[val](prev);\n          }\n        });\n      }\n\n      return batchField;\n    }\n\n    function setValidation(field, val) {\n      let key = cnFlexFormService.getKey(field.key);\n\n      if(field.schema && field.schema.type === 'array') {\n        if(_.isUndefined(field.schema._minItems)) field.schema._minItems = field.schema.minItems;\n        field.schema.minItems = val ? field.schema._minItems : 0;\n      }\n\n      let forms = key ? this.getFormFromRegister(key) : [];\n\n      forms.forEach(form => {\n        if(form.scope) {\n          form.scope.options = form.scope.options || {};\n          form.scope.options.tv4Validation = val;\n          Object.keys(form.ngModel.$error)\n              .filter(function(k) {\n                return k.indexOf('tv4-') === 0;\n              })\n              .forEach(function(k) {\n                form.ngModel.$setValidity(k, true);\n              });\n        }\n      });\n      if(field.items) {\n        field.items.forEach(i => this.setValidation(i, val));\n      }\n    }\n\n    function getFormFromRegister(key) {\n      if(key.includes('[]')) {\n        let re = new RegExp(key.replace('[]', '\\\\[\\\\d*\\\\]'));\n        return _.filter(this.fieldRegister, (form, k) => {\n          return re.test(k);\n        });\n      }\n      else if(this.fieldRegister[key]) {\n        return [this.fieldRegister[key]];\n      } else return [];\n    }\n\n    function createDirtyCheck(field) {\n      //let path = sfPath.parse(field.key);\n      let key = `__dirtyCheck[\"${field.key || field.batchConfig.key}\"]`;\n      //let child = path.length > 1;\n      let htmlClass = '';\n\n      //if(child) htmlClass += ' semi-transparent';\n      if(field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n      let dirtyCheck = {\n        key,\n        htmlClass,\n        type: 'cn-dirty-check',\n        watch: [{\n          resolution: (val) => {\n            //$timeout(() => {\n              this.setValidation(field, val);\n              $rootScope.$broadcast('schemaFormValidate');\n            //});\n          }\n        }]\n      };\n\n      this.addToSchema(key, {\n        type: 'boolean',\n        notitle: true\n      });\n\n      dirtyCheck.fieldWatch = {\n        resolution: (val) => {\n            const register = this.fieldRegister[field._key];\n            if(register) {\n              if(_.get(register, 'ngModel.$dirty')) {\n                cnFlexFormService.parseExpression(key, this.model).set(true);\n              }\n            }\n            // debug\n            else {\n              console.debug('no register:', field, this.fieldRegister);\n            }\n        }\n      };\n\n      this.registerFieldWatch(field, dirtyCheck.fieldWatch);\n\n      return dirtyCheck;\n    }\n\n    function registerFieldWatch(field, watch) {\n      if(field.watch) {\n        if(!_.isArray(field.watch)) field.watch = [field.watch];\n      }\n      else {\n        field.watch = [];\n      }\n\n      field.watch.push(watch);\n    }\n\n    function onReprocessField(e, key) {\n      let register = this.fieldRegister[key];\n      if(!register) return console.debug('no register:', key, this.fieldRegister);\n      if(register.dirtyCheck) this.registerFieldWatch(register.field, register.dirtyCheck.fieldWatch);\n    }\n\n    function handleLinks(list, hard) {\n      return val => {\n        list.forEach(key => {\n          if(!hard) {\n            const register = this.fieldRegister[key];\n            if(!_.get(register, 'ngModel.$dirty')) return;\n          }\n          cnFlexFormService.parseExpression(`__dirtyCheck[\"${key}\"]`, this.model).set(val);\n        });\n      };\n    }\n\n    function processLinkList(list, hard) {\n      list.forEach(keys => {\n        keys.forEach(key => {\n          let register = this.fieldRegister[key];\n          if(!register) {\n            console.debug('no register:', key);\n            return;\n          }\n          let {field, dirtyCheck} = register;\n          let handler = this.handleLinks(_.without(keys, key), hard);\n          field.watch = field.watch || [];\n          dirtyCheck.watch = dirtyCheck.watch || [];\n          field.watch.push({resolution() {handler(true);}});\n          dirtyCheck.watch.push({resolution: handler});\n        });\n      });\n    }\n\n    function processLinks() {\n      if(this.schema.batchConfig) {\n        if(this.schema.batchConfig.links) {\n          this.processLinkList(this.schema.batchConfig.links);\n        }\n        if(this.schema.batchConfig.hardLinks) {\n          this.processLinkList(this.schema.batchConfig.hardLinks, true);\n        }\n      }\n    }\n\n    function addToSchema(key, schema) {\n      let path = sfPath.parse(key);\n      let depth = this.schema.schema;\n\n      path.forEach((k, i) => {\n        if(i === path.length - 1) {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          depth.properties[k] = schema;\n        }\n        else if(k === '') {\n          if(!depth.items) {\n            depth.items = {\n              type: 'object'\n            };\n          }\n          depth = depth.items;\n        }\n        else {\n          if(!depth.properties) {\n            depth.properties = {};\n          }\n          if(!depth.properties[k]) {\n            depth.properties[k] = {\n              type: 'object'\n            };\n          }\n          depth = depth.properties[k];\n        }\n      });\n    }\n\n    function getModelValues(field) {\n      return this.models.map(model => {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function getChangedModels() {\n      let models = [];\n\n      _.each(this.fieldRegister, (register, key) => {\n        let dirty = cnFlexFormService\n            .parseExpression(`__dirtyCheck[\"${key}\"]`, this.model)\n            .get();\n\n        if(!dirty) return;\n\n        let mode = cnFlexFormService\n            .parseExpression(`__batchConfig[\"${key}\"]`, this.model)\n            .get();\n\n        this.models.forEach((model, i) => {\n          models[i] = models[i] || {};\n\n          let path = sfPath.parse(key);\n          // if column is json, we want to merge updates into model's current json value\n          // so we copy the current value if we haven't already (on a previous iteration)\n          if(path.length > 1 && !models[i][path[0]]) {\n            models[i][path[0]] = this.models[i][path[0]];\n          }\n\n          let assignable = cnFlexFormService\n              .parseExpression(key, this.models[i])\n              .getAssignable();\n\n          // if column is json and model's current value doesn't have parent property for\n          // key we're updating, just copy over entire key instead of using specific\n          // edit mode logic for new value\n          if(assignable.fullPath !== key) {\n            let val = cnFlexFormService\n                .parseExpression(assignable.fullPath, this.model)\n                .get();\n\n            cnFlexFormService\n                .parseExpression(assignable.fullPath, this.models[i])\n                .set(val);\n          }\n          else {\n            let val = cnFlexFormService.parseExpression(key, this.model).get();\n            let update = cnFlexFormService.parseExpression(key, models[i]);\n            let original = cnFlexFormService.parseExpression(key, this.models[i]);\n\n            this.setValue(val, update, original, mode);\n          }\n        });\n      });\n\n      return models;\n    }\n\n    function setValue(val, update, original, mode) {\n      if(mode === 'replace') {\n        update.set(val);\n      }\n      else if(mode === 'append') {\n        let originalVal = original.get();\n        if(_.isArray(originalVal)) {\n          const uniqVal = _([])\n            .concat(originalVal, val)\n            .uniq((value) => value.key || value)\n            .value();\n\n          update.set(uniqVal);\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${originalVal} ${val.trim()}`);\n        }\n        else {\n          update.set(val);\n        }\n      }\n      else if(mode === 'prepend') {\n        let originalVal = original.get();\n        if(_.isArray(originalVal)) {\n          update.set(val.concat(originalVal));\n        }\n        else if(_.isString(originalVal)) {\n          update.set(`${val.trim()} ${originalVal}`);\n        }\n        else {\n          update.set(val);\n        }\n      }\n      else if(mode === 'increase') {\n        update.set(_.add(original.get() || 0, val));\n      }\n      else if(mode === 'decrease') {\n        update.set(_.subtract(original.get() || 0, val));\n      }\n      else if(mode === 'stringReplace' && original.get()) {\n        let key = original.path().key;\n        let replaceString = cnFlexFormService.parseExpression(`_replace_${key}`, this.model);\n        let withString = cnFlexFormService.parseExpression(`_with_${key}`, this.model);\n        let expression = new RegExp(_.escapeRegExp(replaceString.get()), \"gi\");\n        update.set(original.get().replace(expression, withString.get()));\n      }\n      /* This needs work, _.find(val, item) might not work because the\n         the items we're comparing might have the same id but one might\n         have different properties\n      else if(mode === 'remove') {\n        original.get().forEach(item => {\n          if(!_.find(val, item)) {\n            update = _.reject(update, item);\n          }\n        });\n      }\n      */\n    }\n\n    function setPlaceholder(field, val) {\n      if(field.noBatchPlaceholder) return;\n      field.placeholder = val;\n    }\n\n    function processDefault(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'prepend', 'append', 'stringReplace'];\n\n      config.default = config.default || 'append';\n\n      if(!config.editModes.includes(config.default)) {\n        config.default = config.editModes[0];\n      }\n\n      config.onSelect = {\n        replace: () => {\n          if(_.allEqual(config.ogValues)) {\n            cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues), { silent: true });\n          }\n          else {\n            setPlaceholder(field, '—');\n          }\n        },\n        append: () => {\n          setPlaceholder(field, '');\n        },\n        prepend: () => {\n          setPlaceholder(field, '');\n        },\n        stringReplace: () => {}\n      };\n\n      if(config.editModes.includes(config.default)) {\n        config.onSelect[config.default]();\n      }\n\n      if(config.editModes.includes('stringReplace')) {\n        const dirtyCheck = this.createDirtyCheck(field);\n        let configKey = `__batchConfig[\"${field.key || field.batchConfig.key}\"]`;\n        let replaceKey = `_replace_${field.key || field.batchConfig.key}`;\n        let withKey = `_with_${field.key || field.batchConfig.key}`;\n        let stringReplaceField = {\n          type: 'component',\n          items: [\n          {\n            key: replaceKey,\n            title: 'Replace',\n            watch: {\n              resolution: `model.${dirtyCheck.key} = true`\n            }\n          }, {\n            key: withKey,\n            title: 'With',\n            watch: {\n              resolution: `model.${dirtyCheck.key} = true`\n            }\n          }],\n          condition: `model.${configKey} === 'stringReplace'`\n        };\n\n        config.key = field.key;\n\n        this.addToSchema(replaceKey, { type: 'string' });\n        this.addToSchema(withKey, { type: 'string' });\n\n\n        return {\n          type: 'section',\n          condition: field.condition,\n          batchConfig: config,\n          schema: field.schema,\n          items: [_.extend(field, {condition: `model.${configKey} !== 'stringReplace'`}), stringReplaceField, dirtyCheck]\n        };\n      }\n\n      return field;\n    }\n\n    function processNumber(field) {\n      let config = field.batchConfig;\n\n      config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues), { silent: true });\n      }\n      else {\n        field.placeholder = '—';\n      }\n      return field;\n    }\n\n    function setNestedPlaceholder(field) {\n      if(field.items) {\n        //field.items.forEach(setNestedPlaceholder);\n      }\n      else {\n        setPlaceholder(field, '—');\n      }\n    }\n\n    function processSelect(field) {\n      let type = field.schema.type;\n      let config = field.batchConfig;\n\n      if(type === 'array') {\n        config.editModes = config.editModes || ['replace', 'append'];\n\n        config.default = config.default || 'replace';\n\n        if(_.allEqual(config.ogValues)) {\n          // fucking angular infdigs\n          $timeout(() =>\n            cnFlexFormService.parseExpression(field.key, this.model).set(_.first(angular.copy(config.ogValues)), { silent: true })\n          );\n        }\n        else {\n          setNestedPlaceholder(field);\n        }\n\n        config.onSelect = {\n          replace: (prev) => {\n            if(prev && prev !== 'append') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          append: (prev) => {\n            if(prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          remove: () => {\n            let val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, this.model).set(val, { silent: true });\n          }\n        };\n      }\n      else {\n\n        let first = _.first(config.ogValues);\n        //TODO: dynamically send back data\n        if(first && _.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(first, { silent: true });\n        }\n\n        if(!field.placeholder) {\n          setPlaceholder(field, '—');\n        }\n      }\n      return field;\n    }\n\n    function processDate(field) {\n      let config = field.batchConfig;\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues, { silent: true }));\n      }\n      else {\n        setPlaceholder(field, '—');\n      }\n      return field;\n    }\n\n    function processToggle(field) {\n      let config = field.batchConfig;\n\n      if(_.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues, { silent: true }));\n      }\n      return field;\n    }\n\n    function processSchema() {\n      this.schema.schema.required = undefined;\n      _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n\n      this.schema.schema.properties.__batchConfig = {\n        type: 'object',\n        properties: {}\n      };\n\n      this.schema.schema.properties.__dirtyCheck = {\n        type: 'object',\n        properties: {}\n      };\n\n      $rootScope.$on('schemaFormBeforeAppendToArray', (e, form) => this.restoreDefaults(form));\n      $rootScope.$on('schemaFormAfterAppendToArray', (e, form) => this.resetDefaults(form));\n    }\n\n    function restoreDefaults(form) {\n      if(!form.items) return;\n      form.items.forEach(item => {\n        if(item.key) {\n          if(item.schema) {\n            let key = cnFlexFormService.getKey(item.key).replace(/\\[\\d+]/g, '[]');\n            item.schema.default = this.defaults[key];\n          }\n        }\n        this.restoreDefaults(item);\n      });\n      setNoPlaceholder(form.items);\n    }\n\n    function setNoPlaceholder(items) {\n      _.each(items, (item) => {\n        item.placeholder = item._placeholder;\n        item.noBatchPlaceholder = true;\n        if(item.items) setNoPlaceholder(item.items);\n      });\n    }\n\n    function resetDefaults(form) {\n      if(!form.items) return;\n      form.items.forEach(item => {\n        if(item.schema) {\n          item.schema.default = undefined;\n        }\n        this.resetDefaults(item);\n      });\n    }\n\n    function clearSchemaDefault(schema, key) {\n      // save for hydrating newly added array items\n      this.defaults[key] = schema.default;\n\n      // then remove because we don't want to override saved values with defaults\n      schema.default = undefined;\n\n      if(schema.type === 'object' && schema.properties) {\n        schema.required = undefined;\n        // _.each(schema.properties, this.clearSchemaDefault.bind(this));\n        for(let k in schema.properties) {\n          this.clearSchemaDefault(schema.properties[k], `${key}.${k}`);\n        }\n      }\n      else if(schema.type === 'array' && schema.items) {\n        this.clearSchemaDefault(schema.items, `${key}[]`);\n      }\n    }\n    \n    function showResults(results, config) {\n      this.results = results;\n      this.resultsConfig = config;\n\n      if(this.modal) {\n        this.modal.close();\n      }\n\n      this.modal = cnModal.open({\n        controller: 'BatchResults',\n        controllerAs: 'vm',\n        templateUrl: 'cn-batch-forms/batch-results.html',\n        resolve: {\n          parent: () => this\n        }\n      });\n    }\n\n    function closeModal() {\n      this.modal.close();\n      this.results = [];\n      this.resultsConfig = null;\n    }\n\n    function addMeta() {\n      this.schema.meta = `\n          <div class=\"well\">\n            <h5>Edit Modes</h5>\n            <p>Some types of fields allow you to apply batch changes in\n            different ways:</p>\n            <dl>\n              <dt>Replace:</dt>\n              <dd>Replace all the original values\n              with the new value. <em>(If you don't see an <b>Edit Mode</b> option\n              for a field, this will be the default)</em></dd>\n            </dl>\n            ${this.getEditModeLegends()}\n          </div>`;\n    }\n\n    function getEditModeLegends() {\n      let legends = '';\n\n      if(this.editModes.prepend) {\n        legends += `\n            <dl>\n              <dt>Prepend:</dt>\n              <dd>Add the new value to the start of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.append) {\n        legends += `\n            <dl>\n              <dt>Append:</dt>\n              <dd>Affix the new value at the end of the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.decrease) {\n        legends += `\n            <dl>\n              <dt>Decrease:</dt>\n              <dd>Subtract the given value from the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      if(this.editModes.increase) {\n        legends += `\n            <dl>\n              <dt>Increase:</dt>\n              <dd>Add the given value to the original\n              values for each item.</dd>\n            </dl>`;\n      }\n      return legends;\n    }\n  }\n\n})();\n","angular.module(\"cn.batch-forms\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"cn-batch-forms/batch-results.html\",\"<div class=\\\"cn-modal\\\">\\n  <div class=\\\"modal-header clearfix\\\">\\n    <cn-flex-form-header\\n      ff-header-config=\\\"vm.headerConfig\\\"\\n      ff-submit=\\\"vm.submit(handler)\\\">\\n    </cn-flex-form-header>\\n  </div>\\n  <div class=\\\"modal-body cn-list card-flex\\\"\\n       cn-responsive-height=\\\"80\\\"\\n       cn-responsive-break=\\\"sm\\\"\\n       cn-set-max-height>\\n\\n    <div class=\\\"padding-20\\\"\\n         ng-if=\\\"vm.text\\\">\\n      <p class=\\\"no-margin text-mute\\\"\\n         ng-bind-html=\\\"vm.text\\\">\\n      </p>\\n    </div>\\n\\n    <table class=\\\"table gutterless\\\">\\n      <tbody>\\n      <tr ng-repeat=\\\"result in vm.results\\\">\\n        <td class=\\\"col-sm-10\\\">\\n          <h6 ng-show=\\\"result.status == 200\\\">\\n            {{result.body[vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{result.body.id}})</span>\\n          </h6>\\n          <h6 ng-show=\\\"result.status != 200\\\">\\n            {{vm.originals[$index][vm.displayName]}}\\n            <span class=\\\"text-mute\\\">({{vm.originals[$index].id}})</span>\\n          </h6>\\n          <p ng-class=\\\"{\\n               \\'text-danger\\': result.status != 200,\\n               \\'text-primary\\': result.status == 200\\n             }\\\">\\n            <i class=\\\"fa fa-{{result.status == 200 ? \\'check\\' : \\'times\\'}}\\\"></i>\\n            {{result.status == 200 ? \\'updated successfully\\' : result.body.message}}\\n          </p>\\n        </td>\\n        <td class=\\\"col-sm-2 text-center\\\">\\n          <a class=\\\"btn btn-sm btn-transparent\\\"\\n             ng-show=\\\"vm.showEdit(result)\\\"\\n             ui-sref=\\\"{{ result.editSref }}\\\">\\n            <i class=\\\"icn-edit\\\"></i>\\n          </a>\\n        </td>\\n      </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\");}]);"]}