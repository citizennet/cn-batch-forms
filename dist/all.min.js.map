{"version":3,"sources":["all.min.js","_.cn-batch-forms.module.js","cn-batch-forms.service.js"],"names":["angular","module","cnBatchForms","cnFlexFormService","cnFlexFormTypes","augmentSchema","schema","model","models","length","service","BatchForms","Object","create","constructor","createBatchField","processForm","processField","processDate","processHidden","processString","processSelect","getModelValues","this","forms","forEach","form","i","items","field","batchConfig","batchField","splice","key","getSchema","fieldType","getFieldType","handler","fieldTypeHandlers","_","isObject","ogValues","bind","type","titleMap","watch","resolution","onSelect","title","map","parseExpression","get","condition","name","value","uniq","placeholder","first","_this","replace","prev","set","push","remove","val","chain","flatten","every","displayProperty","string","cn-autocomplete","cn-datetimepicker","factory","$inject"],"mappings":"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","file":"all.min.js","sourcesContent":["'use strict';\n\n(function () {\n  angular.module('cn.batch-forms', ['cn-flex-form', 'cn.util']);\n})();\n'use strict';\n\n(function () {\n  angular.module('cn.batch-forms').factory('cnBatchForms', cnBatchForms);\n\n  cnBatchForms.$inject = ['cnFlexFormService', 'cnFlexFormTypes'];\n  function cnBatchForms(cnFlexFormService, cnFlexFormTypes) {\n    var fieldTypeHandlers = {\n      'string': processString,\n      'cn-autocomplete': processSelect,\n      'cn-datetimepicker': processDate\n    };\n\n    return {\n      augmentSchema: augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if (!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service.schema;\n    }\n\n    function BatchForms() {\n      return Object.create({\n        constructor: constructor,\n        createBatchField: createBatchField,\n        processForm: processForm,\n        processField: processField,\n        processDate: processDate,\n        processHidden: processHidden,\n        processString: processString,\n        processSelect: processSelect,\n        getModelValues: getModelValues\n      }).constructor();\n    }\n\n    function constructor(schema, model, models) {\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n\n      if (schema.forms) {\n        schema.forms.forEach(this.processForm);\n      } else {\n        this.processForm(schema.form);\n      }\n\n      return this;\n    }\n\n    function processForm(form) {\n      var i = form.items.length;\n      while (i) {\n        var field = form.items[i - 1];\n        this.processField(field);\n        if (field.batchConfig) {\n          var batchField = this.createBatchField(field);\n          form.items.splice(i, 0, batchField);\n        }\n      }\n    }\n\n    function processField(field) {\n      if (!field.batchConfig) {\n        processHidden(field);\n        return;\n      }\n      if (field.key) {\n        field.schema = field.schema || cnFlexFormService.getSchema(field);\n\n        var fieldType = cnFlexFormTypes.getFieldType(field);\n        var handler = fieldTypeHandlers[fieldType];\n\n        if (handler) {\n          if (!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          handler.bind(this)(field);\n        } else {\n          this.processHidden(field);\n          return;\n        }\n      } else if (field.items) {\n        this.processForm(field);\n      }\n    }\n\n    function createBatchField(field) {\n      return {\n        type: 'radiobuttons',\n        titleMap: field.batchConfig.titleMap,\n        watch: {\n          resolution: field.batchConfig.onSelect\n        },\n        key: '$$batch$$.' + field.key,\n        schema: {\n          type: 'string',\n          title: 'Edit Mode'\n        }\n      };\n    }\n\n    function getModelValues(field) {\n      return this.models.map(function (model) {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function processHidden(field) {\n      field.condition = 'false';\n    }\n\n    function processString(field) {\n      field.batchConfig.titleMap = field.batchConfig.titleMap || [{\n        name: 'Replace',\n        value: 'replace'\n      }, {\n        name: 'Append',\n        value: 'push'\n      }];\n\n      if (_.uniq(field.batchConfig.ogValues).length === 1) {\n        field.placeholder = _.first(field.batchConfig.ogValues);\n      } else {\n        field.placeholder = '—';\n      }\n    }\n\n    function processSelect(field) {\n      var _this = this;\n\n      var type = field.schema.type;\n\n      if (type === 'array') {\n        field.batchConfig.titleMap = field.batchConfig.titleMap || [{\n          name: 'Replace',\n          value: 'replace'\n        }, {\n          name: 'Append',\n          value: 'push'\n        }, {\n          name: 'Remove',\n          value: 'remove'\n        }];\n\n        field.batchConfig.onSelect = {\n          replace: function replace(prev) {\n            if (prev !== 'push') {\n              cnFlexFormService.parseExpression(field.key, _this.model).set([]);\n            }\n          },\n          push: function push(prev) {\n            if (prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, _this.model).set([]);\n            }\n          },\n          remove: function remove() {\n            var val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, _this.model).set(val);\n          }\n        };\n      } else {\n        field.batchConfig.titleMap = field.batchConfig.titleMap || [{\n          name: 'Replace',\n          value: 'replace'\n        }];\n\n        field.batchConfig.onSelect = {\n          replace: function replace(prev) {\n            var first = _.first(field.batchConfig.ogValues);\n            if (_.every(field.batchConfig.ogValues, first)) {\n              field.placeholder = first[field.displayProperty || 'name'];\n            } else {\n              field.placeholder = '—';\n            }\n          }\n        };\n      }\n\n      field.batchConfig.watch = {\n        resolution: function resolution(val, prev) {\n          field.batchConfig.onSelect[val](prev);\n        }\n      };\n    }\n\n    function processDate(field) {}\n  }\n})();","(function() {\n  angular.module('cn.batch-forms', [\n    'cn-flex-form',\n    'cn.util'\n  ]);\n})();","(function() {\n  angular\n      .module('cn.batch-forms')\n      .factory('cnBatchForms', cnBatchForms);\n\n  cnBatchForms.$inject = ['cnFlexFormService', 'cnFlexFormTypes'];\n  function cnBatchForms(cnFlexFormService, cnFlexFormTypes) {\n    var fieldTypeHandlers = {\n      'string': processString,\n      'cn-autocomplete': processSelect,\n      'cn-datetimepicker': processDate\n    };\n\n    return {\n      augmentSchema\n    };\n\n    //////////\n\n    function augmentSchema(schema, model, models) {\n      if(!models.length) return schema;\n\n      var service = BatchForms(schema, model, models);\n\n      return service.schema;\n    }\n\n    function BatchForms() {\n      return Object.create({\n        constructor,\n        createBatchField,\n        processForm,\n        processField,\n        processDate,\n        processHidden,\n        processString,\n        processSelect,\n        getModelValues\n      }).constructor();\n    }\n\n    function constructor(schema, model, models) {\n      this.schema = schema;\n      this.model = model;\n      this.models = models;\n\n      if(schema.forms) {\n        schema.forms.forEach(this.processForm);\n      }\n      else {\n        this.processForm(schema.form);\n      }\n\n      return this;\n    }\n\n    function processForm(form) {\n      let i = form.items.length;\n      while(i) {\n        let field = form.items[i - 1];\n        this.processField(field);\n        if(field.batchConfig) {\n          let batchField = this.createBatchField(field);\n          form.items.splice(i, 0, batchField);\n        }\n      }\n    }\n\n    function processField(field) {\n      if(!field.batchConfig) {\n        processHidden(field);\n        return;\n      }\n      if(field.key) {\n        field.schema = field.schema || cnFlexFormService.getSchema(field);\n\n        let fieldType = cnFlexFormTypes.getFieldType(field);\n        let handler = fieldTypeHandlers[fieldType];\n\n        if(handler) {\n          if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n          field.batchConfig.ogValues = this.getModelValues(field);\n\n          handler.bind(this)(field);\n        }\n        else {\n          this.processHidden(field);\n          return;\n        }\n      }\n      else if(field.items) {\n        this.processForm(field);\n      }\n    }\n\n    function createBatchField(field) {\n      return {\n        type: 'radiobuttons',\n        titleMap: field.batchConfig.titleMap,\n        watch: {\n          resolution: field.batchConfig.onSelect\n        },\n        key: `$$batch$$.${field.key}`,\n        schema: {\n          type: 'string',\n          title: 'Edit Mode'\n        }\n      };\n    }\n\n    function getModelValues(field) {\n      return this.models.map(model => {\n        return cnFlexFormService.parseExpression(field.key, model).get();\n      });\n    }\n\n    function processHidden(field) {\n      field.condition = 'false';\n    }\n\n    function processString(field) {\n      field.batchConfig.titleMap = field.batchConfig.titleMap || [{\n        name: 'Replace',\n        value: 'replace'\n      }, {\n        name: 'Append',\n        value: 'push'\n      }];\n\n      if(_.uniq(field.batchConfig.ogValues).length === 1) {\n        field.placeholder = _.first(field.batchConfig.ogValues);\n      }\n      else {\n        field.placeholder = '—';\n      }\n    }\n\n    function processSelect(field) {\n      let type = field.schema.type;\n\n      if(type === 'array') {\n        field.batchConfig.titleMap = field.batchConfig.titleMap || [{\n          name: 'Replace',\n          value: 'replace'\n        }, {\n          name: 'Append',\n          value: 'push'\n        }, {\n          name: 'Remove',\n          value: 'remove'\n        }];\n\n        field.batchConfig.onSelect = {\n          replace: (prev) => {\n            if(prev !== 'push') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          push: (prev) => {\n            if(prev !== 'replace') {\n              cnFlexFormService.parseExpression(field.key, this.model).set([]);\n            }\n          },\n          remove: () => {\n            let val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n            cnFlexFormService.parseExpression(field.key, this.model).set(val);\n          }\n        };\n      }\n      else {\n        field.batchConfig.titleMap = field.batchConfig.titleMap || [{\n          name: 'Replace',\n          value: 'replace'\n        }];\n\n        field.batchConfig.onSelect = {\n          replace: (prev) => {\n            let first = _.first(field.batchConfig.ogValues);\n            if(_.every(field.batchConfig.ogValues, first)) {\n              field.placeholder = first[field.displayProperty || 'name'];\n            }\n            else {\n              field.placeholder = '—';\n            }\n          }\n        };\n      }\n\n      field.batchConfig.watch = {\n        resolution: (val, prev) => {\n          field.batchConfig.onSelect[val](prev);\n        }\n      };\n    }\n\n    function processDate(field) {\n\n    }\n  }\n\n})();"],"sourceRoot":"/source/"}