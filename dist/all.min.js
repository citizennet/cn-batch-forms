"use strict";function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(){angular.module("cn.batch-forms",["schemaForm","cn.flex-form","cn.util","ui.router"])}(),function(){function e(e,t,n){function a(){console.log("vm.parent:",o.parent),o.results||n(o.cancel),o.headerConfig={title:{main:"Batch Results"},actionConfig:{actions:[{text:"Cool"}]},noData:!0}}function s(){e.go("^")}var o=this;o.parent=t,o.results=o.parent.results,o.originals=o.parent.models,o.config=o.parent.resultsConfig,o.displayName=o.config&&o.config.displayName||"name",o.activate=a,o.cancel=s,o.done=s,o.activate()}angular.module("cn.batch-forms").controller("BatchResults",e),e.$inject=["$state","parent","$timeout"]}(),function(){function e(e,t){e.registerField({condition:function(e){return e.type===n},handler:function(e){},type:n,templateUrl:a}),t.addMapping("results",{controller:"BatchResults",controllerAs:"vm",templateUrl:"cn-batch-forms/batch-results.html"})}function t(e){e.put(a,'        <div class="checkbox cn-dirty-check {{form.htmlClass}}">          <input type="checkbox"                 ng-model="$$value$$"                 ng-model-options="form.ngModelOptions"                 sf-changed="form"                 name="{{form.key.slice(-1)[0]}}"/>        </div>')}angular.module("cn.batch-forms").config(e).run(t);var n="cn-dirty-check",a="cn-batch-forms/cn-dirty-check.html";e.$inject=["cnFlexFormServiceProvider","cnFlexFormModalLoaderServiceProvider"],t.$inject=["$templateCache"]}(),function(){function e(e,t,n,a,s,o,r){function i(e,t,n){if(!n.length)return e;var a=l(e,t,n);return a}function l(e,t,n){return Object.create({constructor:c,addMeta:R,addToSchema:g,clearDefaults:x,clearSchemaDefault:F,closeModal:$,createDirtyCheck:m,createBatchField:f,onFieldScope:d,processForm:h,processField:u,processItems:p,processDate:k,processString:C,processSelect:M,processToggle:S,getModelValues:v,getChangedModels:y,setValue:b,showResults:w}).constructor(e,t,n)}function c(e,t,n){if(console.log("BatchForms:",e,t,n),r.resolveMapping("results",0,this),this.schema=e,this.model=t,this.models=n,this.fieldRegister={},this.clearDefaults(),e.forms)for(var s=e.forms.length-1;s>-1;)this.processForm(e.forms[s]),e.forms[s].form.length||e.forms.splice(s,1),--s;else this.processForm(e.form);return this.addMeta(),a.$on("schemaFormPropagateScope",this.onFieldScope.bind(this)),console.log("BatchDone:",e,t,n),this}function d(e,t){var n=t.form._key;n&&(this.fieldRegister[n].ngModel=t.ngModel)}function h(e){this.processItems(e,"form")}function p(e){for(var t=arguments.length<=1||void 0===arguments[1]?"items":arguments[1],n=e[t].length-1;n>-1;){var a=e[t][n],s=this.processField(a);if(a.batchConfig){a.htmlClass=(a.htmlClass||"")+" cn-batch-field";var o=this.createBatchField(a),r=this.createDirtyCheck(a);e[t][n]={type:"section",htmlClass:"cn-batch-wrapper",items:[a,r,o]},this.fieldRegister[a.key]={field:a}}s||e[t].splice(n,1),--n}}function u(n){if(n.key){if(!n.batchConfig)return!1;n._key=n.key,n.schema=n.schema||e.getSchema(n.key,this.schema.schema.properties),n.type=n.type||n.schema.type;var a=t.getFieldType(n),s=E[a];if(!s)return!1;_.isObject(n.batchConfig)||(n.batchConfig={}),n.batchConfig.ogValues=this.getModelValues(n),s.bind(this)(n)}else if(n.items&&(this.processItems(n),!n.items.length))return!1;return!0}function f(e){var t={type:"radiobuttons",titleMap:e.batchConfig.titleMap,key:"__batchConfig."+e.key,htmlClass:"cn-batch-options"};return 1===t.titleMap.length&&(t.condition="false"),this.addToSchema(e.key,"__batchConfig",{type:"string",title:"Edit Mode","default":e.batchConfig["default"]}),e.batchConfig.onSelect&&(t.watch={resolution:function(t,n){e.batchConfig.onSelect[t](n)}}),t}function m(t){var n=this,a={type:"cn-dirty-check",htmlClass:t.notitle||!t.schema.title?"notitle":"",key:"__dirtyCheck."+t.key};return this.addToSchema(t.key,"__dirtyCheck",{type:"boolean",notitle:!0}),t.watch?_.isArray(t.watch)||(t.watch=[t.watch]):t.watch=[],t.watch.push({resolution:function(s,o){if(!angular.equals(s,o)){var r=n.fieldRegister[t.key];r&&r.ngModel.$dirty&&e.parseExpression(a.key,n.model).set(!0)}}}),a}function g(e,t,a){var s=n.parse(e),o=this.schema.schema.properties[t];s.forEach(function(e,t){t===s.length-1?o.properties[e]=a:""===e?(o.items||(o.items={type:"object"}),o=o.items):(o.properties||(o.properties={}),o.properties[e]||(o.properties[e]={type:"object"}),o=o.properties[e])})}function v(t){return this.models.map(function(n){return e.parseExpression(t.key,n).get()})}function y(){var t=this,n=[];return _.each(this.fieldRegister,function(a,s){var o=e.parseExpression("__dirtyCheck."+s,t.model).get();if(console.log("key, dirty:",s,o,a),o){var r=e.parseExpression("__batchConfig."+s,t.model).get();t.models.forEach(function(a,o){n[o]||(n[o]={});var i=e.parseExpression(s,t.model).get(),l=e.parseExpression(s,n[o]),c=e.parseExpression(s,t.models[o]);t.setValue(i,l,c,r)})}}),n}function b(e,t,n,a){if("replace"===a)t.set(e);else if("push"===a){var s=n.get();_.isArray(s)?t.set(s.concat(e)):_.isString(s)&&t.set(s+" "+e.trim())}else if("prepend"===a){var s=n.get();_.isArray(s)?t.set(e.concat(s)):_.isString(s)&&t.set(e.trim()+" "+s),console.log("prepend:",t.get())}}function C(e){var t=e.batchConfig;t.titleMap=t.titleMap||[{name:"Replace",value:"replace"},{name:"Prepend",value:"prepend"},{name:"Append",value:"append"}],t["default"]=t["default"]||"append",t.onSelect={replace:function(){1===_.uniq(t.ogValues).length?e.placeholder=_.first(t.ogValues):e.placeholder="—"},append:function(){e.placeholder=""},prepend:function(){e.placeholder=""}}}function M(t){var n=this,a=t.schema.type,s=t.batchConfig;if("array"===a)s.titleMap=s.titleMap||[{name:"Replace",value:"replace"},{name:"Append",value:"append"}],s["default"]=s["default"]||"append",s.onSelect={replace:function(a){"append"!==a&&e.parseExpression(t.key,n.model).set([])},append:function(a){"replace"!==a&&e.parseExpression(t.key,n.model).set([])},remove:function(){var a=_.chain(t.batchConfig.ogValues).flatten().uniq().value();e.parseExpression(t.key,n.model).set(a)}};else{s.titleMap=s.titleMap||[{name:"Replace",value:"replace"}],s["default"]=s["default"]||"replace";var o=_.first(s.ogValues);_.isObject(o)?_.every(s.ogValues,o)&&(t.placeholder=o[t.displayProperty||"name"]):1===_.uniq(s.ogValues).length&&(t.titleMap&&(o=_.find(t.titleMap,_defineProperty({},t.valueProperty||"value",o))),t.placeholder=o[t.displayProperty||"name"]),t.placeholder||(t.placeholder="—")}}function k(e){var t=e.batchConfig;t.titleMap=t.titleMap||[{name:"Replace",value:"replace"}],t["default"]=t["default"]||"replace",1===_.uniq(t.ogValues).length?e.placeholder=moment(_.first(t.ogValues)).format("M/DD/YYYY h:mm a"):e.placeholder="—"}function S(e){var t=e.batchConfig;t.titleMap=t.titleMap||[{name:"Replace",value:"replace"}],t["default"]=t["default"]||"replace",1===_.uniq(t.ogValues).length}function x(){this.schema.schema.required=[],_.each(this.schema.schema.properties,this.clearSchemaDefault.bind(this)),this.schema.schema.properties.__batchConfig={type:"object",properties:{}},this.schema.schema.properties.__dirtyCheck={type:"object",properties:{}}}function F(e){e["default"]=void 0,"object"===e.type&&e.properties?_.each(e.properties,this.clearSchemaDefault.bind(this)):"array"===e.type&&e.items&&this.clearSchemaDefault(e.items)}function w(e,t){console.log("showResults:",s.current.name),this.results=e,this.resultsConfig=t,s.go(".modal",{modal:"results",modalId:0}),this.onCloseModal=a.$on("$stateChangeStart",this.closeModal.bind(this))}function $(e,t,n){console.log("closeModal:",e,t,n),console.log("this.resultsConfig:",this.resultsConfig),this.onCloseModal();var a=this.resultsConfig;a&&a.returnState&&o(function(){return s.go(a.returnState.name,a.returnState.params)}),this.results=[],this.resultsConfig=null}function R(){this.schema.meta='\n          <div class="well">\n            <h5>Edit Modes</h5>\n            <p>Some types of fields allow you to apply batch changes in\n            different ways:</p>\n            <dl>\n              <dt>Replace:</dt>\n              <dd>Replace all the original values\n              with the new value. <em>(If you don\'t see an <b>Edit Mode</b> option\n              for a field, this will be the default)</em></dd>\n            </dl>\n            <dl>\n              <dt>Prepend:</dt>\n              <dd>Add the new value to the start of the original\n              values for each item.</dd>\n            </dl>\n            <dl>\n              <dt>Append:</dt>\n              <dd>Affix the new value at the end of the original\n              values for each item.</dd>\n            </dl>\n          </div>'}var E={string:C,"cn-autocomplete":M,"cn-datetimepicker":k,"cn-toggle":S};return{augmentSchema:i}}angular.module("cn.batch-forms").factory("cnBatchForms",e),e.$inject=["cnFlexFormService","cnFlexFormTypes","sfPath","$rootScope","$state","$timeout","cnFlexFormModalLoaderService"]}(),angular.module("cn.batch-forms").run(["$templateCache",function(e){e.put("cn-batch-forms/batch-results.html",'<div class="cn-modal">\n  <div class="modal-header cn-heading row vertical-parent">\n    <cn-flex-form-header\n      ff-header-config="vm.headerConfig"\n      ff-submit="vm.done()">\n    </cn-flex-form-header>\n  </div>\n  <div class="modal-body cn-list"\n       cn-responsive-height="80"\n       cn-responsive-break="sm"\n       cn-set-max-height>\n    <ul class="list-group gutterless">\n      <li ng-repeat="result in vm.results"\n          class="list-group-item"\n          ng-class="{\n            \'text-danger\': result.status != 200,\n            \'text-primary\': result.status == 200\n          }">\n        <div class="row">\n          <div class="col-sm-1 text-center">\n            <i class="fa fa-{{result.status == 200 ? \'check\' : \'times\'}}"></i>\n          </div>\n          <div class="col-sm-11"\n               ng-show="result.status == 200">\n            {{result.body[vm.displayName]}} ({{result.body.id}}):\n            updated successfully\n          </div>\n          <div class="col-sm-11"\n               ng-show="result.status != 200">\n            {{vm.originals[$index][vm.displayName]}} ({{vm.originals[$index].id}}):\n            {{result.body.message}}\n          </div>\n        </div>\n      </li>\n    </ul>\n  </div>\n</div>\n')}]);
//# sourceMappingURL=all.min.js.map
