{"version":3,"sources":["webpack:///webpack/bootstrap 7f50cf7a1b953e30ee30","webpack:///./src/_.cn-batch-forms.module.js","webpack:///./src/batch-results.js","webpack:///./src/cn-batch-forms.routes.js","webpack:///./src/cn-batch-forms.service.js","webpack:///./src/batch-results.tpl.js"],"names":["angular","module","controller","provider","config","run","BatchResults","$state","parent","$stateParams","vm","results","originals","models","resultsConfig","displayName","formName","current","name","text","activate","showEdit","submit","idParam","forEach","result","index","_","isFunction","buildEditSref","editSref","body","params","assign","id","toJson","headerConfig","title","main","actionConfig","actions","handler","returnState","go","noData","inRange","status","closeModal","cnBatchFormsConfig","addDirtyCheckTpl","TYPE","TEMPLATE_URL","cnFlexFormServiceProvider","registerField","condition","field","type","templateUrl","$templateCache","put","clearSchemaDefault","cnBatchFormsProvider","fieldTypeHandlers","service","schema","key","defaults","default","undefined","properties","required","k","items","$get","cnBatchForms","fieldType","cnFlexFormConfig","cnFlexFormService","cnFlexFormTypes","sfPath","$rootScope","$timeout","cnModal","instances","augmentSchema","model","length","BatchForms","Object","create","constructor","addMeta","addToSchema","createDirtyCheck","createBatchField","getChangedModels","getEditModeLegends","getFormFromRegister","getModelValues","getSchemaDefault","getTitleMap","handleLinks","onFieldScope","onReprocessField","processCondition","processDiff","processSchemaDiff","processSchema","processField","processItems","processDate","processDefault","processLinkList","processLinks","processNumber","processSelect","processToggle","registerFieldWatch","resetDefaults","restoreDefaults","setValidation","setValue","showResults","instance","editModes","fieldRegister","onProcessDiff","bind","forms","i","form","splice","$on","console","info","event","scope","getKey","startsWith","register","ngModel","$pristine","updateSchema","links","filter","batchConfig","ls","hardLinks","call","diff","flatten","concat","props","keys","prop","has","every","includes","l","fields","child","htmlClass","batchField","dirtyCheck","replace","_key","_placeholder","placeholder","getSchema","resolve","conditionals","getFieldType","isString","isObject","ogValues","allEqual","first","parseExpression","set","clone","uniqueId","watch","item","push","resolution","map","value","capitalize","def","titleMap","btnClass","onSelect","val","prev","isUndefined","_minItems","minItems","options","tv4Validation","$error","indexOf","$setValidity","re","RegExp","test","notitle","$broadcast","fieldWatch","get","debug","isArray","e","list","hard","without","path","parse","depth","each","dirty","mode","assignable","getAssignable","fullPath","update","original","originalVal","uniqVal","uniq","trim","add","subtract","replaceString","withString","expression","escapeRegExp","setPlaceholder","noBatchPlaceholder","silent","append","prepend","stringReplace","configKey","replaceKey","withKey","stringReplaceField","extend","setNestedPlaceholder","copy","remove","chain","__batchConfig","__dirtyCheck","setNoPlaceholder","modal","close","open","controllerAs","meta","legends","decrease","increase","addBatchResultsTmpl"],"mappings":"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","file":"./dist/all.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7f50cf7a1b953e30ee30","import BatchResults from './batch-results';\nimport { cnBatchFormsConfig, addDirtyCheckTpl } from './cn-batch-forms.routes';\nimport cnBatchFormsProvider from './cn-batch-forms.service';\nimport addBatchResultsTpl from './batch-results.tpl';\n\nangular\n  .module('cn.batch-forms', [\n    'schemaForm',\n    'cn.flex-form',\n    'cn.util',\n    'ui.router'\n  ])\n  .controller('BatchResults', BatchResults)\n  .provider('cnBatchForms', cnBatchFormsProvider)\n  .config(cnBatchFormsConfig)\n  .run(addDirtyCheckTpl)\n  .run(addBatchResultsTpl);\n\n\n\n// WEBPACK FOOTER //\n// ./src/_.cn-batch-forms.module.js","export default function BatchResults($state, parent, $stateParams) {\n  'ngInject';\n\n  var vm = this;\n  vm.parent = parent;\n  vm.results = vm.parent.results;\n  vm.originals = vm.parent.models;\n  vm.config = vm.parent.resultsConfig;\n  vm.displayName = vm.config && vm.config.displayName || 'name';\n  vm.formName = $state.current.name;\n  vm.text = vm.config.text;\n\n  vm.activate = activate;\n  vm.showEdit = showEdit;\n  vm.submit = submit;\n\n  vm.activate();\n\n  //////////\n\n  function activate() {\n    if (vm.config.idParam) {\n      vm.results.forEach((result, index) => {\n        if (_.isFunction(vm.config.buildEditSref)) {\n          result.editSref = vm.config.buildEditSref(result.body, index);\n        }\n        else {\n          const params = _.assign({}, $stateParams, {[vm.config.idParam]: vm.originals[index].id});\n          result.editSref = `${$state.current.name}(${angular.toJson(params)})`;\n        }\n      });\n    }\n\n    vm.headerConfig = {\n      title: {\n        main: 'Batch Results'\n      },\n      actionConfig: {\n        actions: [{\n          text: 'Continue Editing'\n        }, {\n          text: 'Done',\n          handler: () => {\n            if(vm.config && vm.config.returnState) {\n              $state.go(vm.config.returnState.name, vm.config.returnState.params);\n            }\n          }\n        }]\n      },\n      noData: true\n    };\n\n  }\n\n  function showEdit(result) {\n    return result.editSref && _.inRange(result.status, 200, 299);\n  }\n\n  function submit(handler) {\n    vm.parent.closeModal();\n    if(handler) {\n      handler();\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/batch-results.js","const TYPE = 'cn-dirty-check';\nconst TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\nexport function cnBatchFormsConfig(cnFlexFormServiceProvider) {\n  'ngInject';\n  cnFlexFormServiceProvider.registerField({\n    condition: (field) => field.type === TYPE,\n    handler: (field) => {/*console.log('field.readonly:', field.key, field.readonly)*/},\n    type: TYPE,\n    templateUrl: TEMPLATE_URL\n  });\n}\n\nexport function addDirtyCheckTpl($templateCache) {\n  'ngInject';\n  $templateCache.put(\n      TEMPLATE_URL,\n      '\\\n      <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n        <input type=\"checkbox\"\\\n               ng-model=\"$$value$$\"\\\n               ng-model-options=\"form.ngModelOptions\"\\\n               sf-changed=\"form\"\\\n               ng-disabled=\"form.readonly\"\\\n               name=\"{{form.key.slice(-1)[0]}}\"/>\\\n      </div>'\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-batch-forms.routes.js","let fieldTypeHandlers = {\n  'string': 'processDefault',\n  'number': 'processNumber',\n  'url': 'processDefault',\n  'array': 'processSelect',\n  'cn-autocomplete': 'processSelect',\n  'cn-currency': 'processNumber',\n  'cn-datetimepicker': 'processDate',\n  'cn-toggle': 'processToggle'\n};\n\nexport function clearSchemaDefault(service, schema, key) {\n  // save for hydrating newly added array items\n  service.defaults[key] = schema.default;\n\n  // then remove because we don't want to override saved values with defaults\n  if (\"default\" in schema) schema.default = undefined;\n\n  if(schema.type === 'object' && schema.properties) {\n    if (\"required\" in schema) schema.required = undefined;\n    // _.each(schema.properties, service.clearSchemaDefault.bind(this));\n    for(let k in schema.properties) {\n      clearSchemaDefault(service, schema.properties[k], `${key}.${k}`);\n    }\n  }\n  else if(schema.type === 'array' && schema.items) {\n    clearSchemaDefault(service, schema.items, `${key}[]`);\n  }\n}\n\nexport default function cnBatchFormsProvider() {\n  return {\n    registerField,\n    $get: cnBatchForms\n  };\n\n  ///////////\n\n  function registerField(fieldType) {\n    if(fieldType.handler) {\n      fieldTypeHandlers[fieldType.type] = fieldType.handler;\n    }\n  }\n}\n\nfunction cnBatchForms(\n    cnFlexFormConfig,\n    cnFlexFormService,\n    cnFlexFormTypes,\n    sfPath,\n    $rootScope,\n    $timeout,\n    cnModal) {\n\n  'ngInject';\n\n  let instances = 0;\n\n  return {\n    augmentSchema\n  };\n\n  //////////\n\n  function augmentSchema(schema, model, models) {\n    if(!models.length) return schema;\n\n    var service = BatchForms(schema, model, models);\n\n    return service;\n  }\n\n  function BatchForms(schema, model, models) {\n    return Object.create({\n      constructor,\n      addMeta,\n      addToSchema,\n      closeModal,\n      createDirtyCheck,\n      createBatchField,\n      getChangedModels,\n      getEditModeLegends,\n      getFormFromRegister,\n      getModelValues,\n      getSchemaDefault,\n      getTitleMap,\n      handleLinks,\n      onFieldScope,\n      onReprocessField,\n      processCondition,\n      processDiff,\n      processSchemaDiff,\n      processSchema,\n      processField,\n      processItems,\n      processDate,\n      processDefault,\n      processLinkList,\n      processLinks,\n      processNumber,\n      processSelect,\n      processToggle,\n      registerFieldWatch,\n      resetDefaults,\n      restoreDefaults,\n      setValidation,\n      setValue,\n      showResults\n    }).constructor(schema, model, models);\n  }\n\n  function constructor(schema, model, models) {\n\n    this.instance = instances;\n    //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n    instances++;\n\n    this.schema = schema;\n    this.model = model;\n    this.models = models;\n    this.defaults = {};\n    this.editModes = {};\n    this.fieldRegister = {};\n\n    this.processSchema();\n    cnFlexFormConfig.onProcessDiff = this.processDiff.bind(this);\n\n    if(schema.forms) {\n      let i = schema.forms.length - 1;\n      while(i > -1) {\n        this.processItems(schema.forms[i].form);\n        if(!schema.forms[i].form.length) {\n          schema.forms.splice(i, 1);\n        }\n        --i;\n      }\n    }\n    else {\n      this.processItems(schema.form);\n    }\n\n    this.addMeta();\n    this.processLinks();\n\n    $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n    $rootScope.$on('cnFlexFormReprocessField', this.onReprocessField.bind(this));\n\n    console.info('BatchDone:', schema, model, models);\n\n    return this;\n  }\n\n  function onFieldScope(event, scope) {\n    let key = cnFlexFormService.getKey(scope.form.key);\n\n    if(!key.startsWith('__')) {\n      if(!this.fieldRegister[key]) this.fieldRegister[key] = {};\n      const register = this.fieldRegister[key];\n      register.ngModel = scope.ngModel;\n      register.scope = scope;\n\n      if(!this.fieldRegister[key].field) this.fieldRegister[key].field = scope.form;\n    }\n\n    // prevent edit mode radiobuttons from setting form to dirty\n    else if(scope.form.key[0] === '__batchConfig') {\n      scope.ngModel.$pristine = false;\n    }\n  }\n\n  function processDiff(schema) {\n    const updateSchema = schema.params.updateSchema;\n    const links = _.filter(schema.batchConfig.links, ls => _.startsWith(ls, updateSchema));\n    const hardLinks = _.filter(schema.batchConfig.hardLinks, ls => _.startsWith(ls, updateSchema));\n    processSchemaDiff.call(this, schema.diff.schema, _.flatten(links.concat(hardLinks)));\n  }\n\n  function processSchemaDiff(properties, links) {\n    const props = _.keys(properties);\n    _.forEach(props, (prop) => {\n      if (_.has(properties[prop], \"properties\")) {\n        processSchemaDiff.call(this, properties[prop].properties, links);\n      } else if (_.has(properties[prop], \"items\")) {\n        processSchemaDiff.call(this, properties[prop].items, links);\n      } else if (_.every(links, l => !_.includes(l, prop))) {\n        clearSchemaDefault(this, properties[prop], prop);\n      }\n    });\n  }\n\n  function processItems(fields) {\n    let i = fields.length - 1;\n    while(i > -1) {\n      const child = this.processField(fields[i]);\n      if(child && child.batchConfig) {\n        if(child.type !== 'fieldset') {\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n        }\n        let batchField = this.createBatchField(child);\n        let dirtyCheck = child.key && this.createDirtyCheck(child);\n        // add mode buttons after field\n        fields[i] = {\n          type: 'section',\n          htmlClass: 'cn-batch-wrapper',\n          items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n          condition: this.processCondition(child.condition)\n        };\n        delete child.condition;\n        if(child.key) {\n          if(!this.fieldRegister[child.key]) this.fieldRegister[child.key] = {};\n          this.fieldRegister[child.key].field = child;\n          this.fieldRegister[child.key].dirtyCheck = dirtyCheck;\n        }\n      }\n      if(!child) {\n        // remove field if batch isn't supported by it or children\n        fields.splice(i, 1);\n      }\n      --i;\n    }\n  }\n\n  function processCondition(condition) {\n    return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n  }\n\n  function processField(field) {\n    if(field.key) {\n      if(!field.batchConfig) return false;\n\n      field._key = field.key;\n      field._placeholder = field.placeholder;\n      field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n      field.type = field.type || field.schema.type;\n\n      delete field.required;\n      if(field.resolve) delete field.resolve.required;\n      if(field.conditionals) delete field.conditionals.required;\n\n      let fieldType = cnFlexFormTypes.getFieldType(field);\n      let handler = fieldTypeHandlers[fieldType];\n\n      if(handler) {\n        if(_.isString(handler)) handler = this[handler];\n        if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n        field.batchConfig.ogValues = this.getModelValues(field);\n\n        if(_.allEqual(field.batchConfig.ogValues)) {\n          let key = `__ogValues[\"${field.key}\"]`;\n          let first = _.first(field.batchConfig.ogValues);\n          cnFlexFormService.parseExpression(key, this.model).set(first);\n        }\n\n        return handler.bind(this)(field);\n      }\n      else return false;\n    }\n\n    if(field.items) {\n      if(field.batchConfig) {\n        field.items.forEach(child => {\n          child.batchConfig = _.clone(field.batchConfig);\n        });\n      }\n      this.processItems(field.items);\n      if(!field.items.length) return false;\n\n      if(field.batchConfig) {\n        if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n        field.batchConfig.key = `component_${_.uniqueId()}`;\n        field.batchConfig.watch = [];\n\n        field.items.forEach((item, i) => {\n          let child = item.items[0];\n          if(!i) {\n            field.batchConfig.editModes = child.batchConfig.editModes;\n            field.batchConfig.default = child.batchConfig.default;\n          }\n          field.batchConfig.watch.push({\n            resolution: `model.__batchConfig[\"${child.key}\"] = model.__batchConfig[\"${field.batchConfig.key}\"]`\n          });\n          //item.items[2].condition = 'false';\n          item.items[2].htmlClass = 'hide';\n        });\n      }\n    }\n    return field;\n  }\n\n  function getTitleMap(editModes) {\n    editModes = editModes || ['replace'];\n\n    return editModes.map(value => {\n      this.editModes[value] = true;\n      return {\n        name: _.capitalize(value),\n        value\n      };\n    });\n  }\n\n  function getSchemaDefault(def) {\n    return def || 'replace';\n  }\n\n  function createBatchField(field) {\n    let batchConfig = field.batchConfig;\n    let key = `__batchConfig[\"${field.key || batchConfig.key}\"]`;\n\n    let batchField = {\n      key,\n      type: 'radiobuttons',\n      titleMap: this.getTitleMap(batchConfig.editModes),\n      htmlClass: 'cn-batch-options',\n      btnClass: 'btn-sm cn-no-dirty-check',\n      watch: batchConfig.watch || []\n    };\n\n    if(batchField.titleMap.length === 1) {\n      //batchField.condition = 'false';\n      batchField.htmlClass = 'hide';\n    }\n\n    this.addToSchema(key, {\n      type: 'string',\n      title: 'Edit Mode',\n      default: this.getSchemaDefault(batchConfig.default)\n    });\n\n    if(batchConfig.onSelect) {\n      batchField.watch.push({\n        resolution: (val, prev) => {\n          if(!val) return;\n          batchConfig.onSelect[val](prev);\n        }\n      });\n    }\n\n    return batchField;\n  }\n\n  function setValidation(field, val) {\n    let key = cnFlexFormService.getKey(field.key);\n\n    if(field.schema && field.schema.type === 'array') {\n      if(_.isUndefined(field.schema._minItems)) field.schema._minItems = field.schema.minItems;\n      field.schema.minItems = val ? field.schema._minItems : 0;\n    }\n\n    let forms = key ? this.getFormFromRegister(key) : [];\n\n    forms.forEach(form => {\n      if(form.scope) {\n        form.scope.options = form.scope.options || {};\n        form.scope.options.tv4Validation = val;\n        Object.keys(form.ngModel.$error)\n            .filter(function(k) {\n              return k.indexOf('tv4-') === 0;\n            })\n            .forEach(function(k) {\n              form.ngModel.$setValidity(k, true);\n            });\n      }\n    });\n    if(field.items) {\n      field.items.forEach(i => this.setValidation(i, val));\n    }\n  }\n\n  function getFormFromRegister(key) {\n    if(key.includes('[]')) {\n      let re = new RegExp(key.replace('[]', '\\\\[\\\\d*\\\\]'));\n      return _.filter(this.fieldRegister, (form, k) => {\n        return re.test(k);\n      });\n    }\n    else if(this.fieldRegister[key]) {\n      return [this.fieldRegister[key]];\n    } else return [];\n  }\n\n  function createDirtyCheck(field) {\n    //let path = sfPath.parse(field.key);\n    let key = `__dirtyCheck[\"${field.key || field.batchConfig.key}\"]`;\n    //let child = path.length > 1;\n    let htmlClass = '';\n\n    //if(child) htmlClass += ' semi-transparent';\n    if(field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n    let dirtyCheck = {\n      key,\n      htmlClass,\n      type: 'cn-dirty-check',\n      watch: [{\n        resolution: (val) => {\n          //$timeout(() => {\n            this.setValidation(field, val);\n            $rootScope.$broadcast('schemaFormValidate');\n          //});\n        }\n      }]\n    };\n\n    this.addToSchema(key, {\n      type: 'boolean',\n      notitle: true\n    });\n\n    dirtyCheck.fieldWatch = {\n      resolution: (val) => {\n          const register = this.fieldRegister[field._key];\n          if(register) {\n            if(_.get(register, 'ngModel.$dirty')) {\n              cnFlexFormService.parseExpression(key, this.model).set(true);\n            }\n          }\n          // debug\n          else {\n            console.debug('no register:', field, this.fieldRegister);\n          }\n      }\n    };\n\n    this.registerFieldWatch(field, dirtyCheck.fieldWatch);\n\n    return dirtyCheck;\n  }\n\n  function registerFieldWatch(field, watch) {\n    if(field.watch) {\n      if(!_.isArray(field.watch)) field.watch = [field.watch];\n    }\n    else {\n      field.watch = [];\n    }\n\n    field.watch.push(watch);\n  }\n\n  function onReprocessField(e, key) {\n    let register = this.fieldRegister[key];\n    if(!register) return console.debug('no register:', key, this.fieldRegister);\n    if(register.dirtyCheck) this.registerFieldWatch(register.field, register.dirtyCheck.fieldWatch);\n  }\n\n  function handleLinks(list, hard) {\n    return val => {\n      list.forEach(key => {\n        if(!hard) {\n          const register = this.fieldRegister[key];\n          if(!_.get(register, 'ngModel.$dirty')) return;\n        }\n        cnFlexFormService.parseExpression(`__dirtyCheck[\"${key}\"]`, this.model).set(val);\n      });\n    };\n  }\n\n  function processLinkList(list, hard) {\n    list.forEach(keys => {\n      keys.forEach(key => {\n        let register = this.fieldRegister[key];\n        if(!register) {\n          console.debug('no register:', key);\n          return;\n        }\n        let {field, dirtyCheck} = register;\n        let handler = this.handleLinks(_.without(keys, key), hard);\n        field.watch = field.watch || [];\n        dirtyCheck.watch = dirtyCheck.watch || [];\n        field.watch.push({resolution() {handler(true);}});\n        dirtyCheck.watch.push({resolution: handler});\n      });\n    });\n  }\n\n  function processLinks() {\n    if(this.schema.batchConfig) {\n      if(this.schema.batchConfig.links) {\n        this.processLinkList(this.schema.batchConfig.links);\n      }\n      if(this.schema.batchConfig.hardLinks) {\n        this.processLinkList(this.schema.batchConfig.hardLinks, true);\n      }\n    }\n  }\n\n  function addToSchema(key, schema) {\n    let path = sfPath.parse(key);\n    let depth = this.schema.schema;\n\n    path.forEach((k, i) => {\n      if(i === path.length - 1) {\n        if(!depth.properties) {\n          depth.properties = {};\n        }\n        depth.properties[k] = schema;\n      }\n      else if(k === '') {\n        if(!depth.items) {\n          depth.items = {\n            type: 'object'\n          };\n        }\n        depth = depth.items;\n      }\n      else {\n        if(!depth.properties) {\n          depth.properties = {};\n        }\n        if(!depth.properties[k]) {\n          depth.properties[k] = {\n            type: 'object'\n          };\n        }\n        depth = depth.properties[k];\n      }\n    });\n  }\n\n  function getModelValues(field) {\n    return this.models.map(model => {\n      return cnFlexFormService.parseExpression(field.key, model).get();\n    });\n  }\n\n  function getChangedModels() {\n    let models = [];\n\n    _.each(this.fieldRegister, (register, key) => {\n      let dirty = cnFlexFormService\n          .parseExpression(`__dirtyCheck[\"${key}\"]`, this.model)\n          .get();\n\n      if(!dirty) return;\n\n      let mode = cnFlexFormService\n          .parseExpression(`__batchConfig[\"${key}\"]`, this.model)\n          .get();\n\n      this.models.forEach((model, i) => {\n        models[i] = models[i] || {};\n\n        let path = sfPath.parse(key);\n        // if column is json, we want to merge updates into model's current json value\n        // so we copy the current value if we haven't already (on a previous iteration)\n        if(path.length > 1 && !models[i][path[0]]) {\n          models[i][path[0]] = this.models[i][path[0]];\n        }\n\n        let assignable = cnFlexFormService\n            .parseExpression(key, this.models[i])\n            .getAssignable();\n\n        // if column is json and model's current value doesn't have parent property for\n        // key we're updating, just copy over entire key instead of using specific\n        // edit mode logic for new value\n        if(assignable.fullPath !== key) {\n          let val = cnFlexFormService\n              .parseExpression(assignable.fullPath, this.model)\n              .get();\n\n          cnFlexFormService\n              .parseExpression(assignable.fullPath, this.models[i])\n              .set(val);\n        }\n        else {\n          let val = cnFlexFormService.parseExpression(key, this.model).get();\n          let update = cnFlexFormService.parseExpression(key, models[i]);\n          let original = cnFlexFormService.parseExpression(key, this.models[i]);\n\n          this.setValue(val, update, original, mode);\n        }\n      });\n    });\n\n    return models;\n  }\n\n  function setValue(val, update, original, mode) {\n    if(mode === 'replace') {\n      update.set(val);\n    }\n    else if(mode === 'append') {\n      let originalVal = original.get();\n      if(_.isArray(originalVal)) {\n        const uniqVal = _([])\n          .concat(originalVal, val)\n          .uniq((value) => value.key || angular.toJson(value))\n          .value();\n\n        update.set(uniqVal);\n      }\n      else if(_.isString(originalVal)) {\n        update.set(`${originalVal} ${val.trim()}`);\n      }\n      else {\n        update.set(val);\n      }\n    }\n    else if(mode === 'prepend') {\n      let originalVal = original.get();\n      if(_.isArray(originalVal)) {\n        update.set(val.concat(originalVal));\n      }\n      else if(_.isString(originalVal)) {\n        update.set(`${val.trim()} ${originalVal}`);\n      }\n      else {\n        update.set(val);\n      }\n    }\n    else if(mode === 'increase') {\n      update.set(_.add(original.get() || 0, val));\n    }\n    else if(mode === 'decrease') {\n      update.set(_.subtract(original.get() || 0, val));\n    }\n    else if(mode === 'stringReplace' && original.get()) {\n      let key = original.path().key;\n      let replaceString = cnFlexFormService.parseExpression(`_replace_${key}`, this.model);\n      let withString = cnFlexFormService.parseExpression(`_with_${key}`, this.model);\n      let expression = new RegExp(_.escapeRegExp(replaceString.get()), \"gi\");\n      update.set(original.get().replace(expression, withString.get()));\n    }\n    /* This needs work, _.find(val, item) might not work because the\n       the items we're comparing might have the same id but one might\n       have different properties\n    else if(mode === 'remove') {\n      original.get().forEach(item => {\n        if(!_.find(val, item)) {\n          update = _.reject(update, item);\n        }\n      });\n    }\n    */\n  }\n\n  function setPlaceholder(field, val) {\n    if(field.noBatchPlaceholder) return;\n    field.placeholder = val;\n  }\n\n  function processDefault(field) {\n    let config = field.batchConfig;\n\n    config.editModes = config.editModes || ['replace', 'prepend', 'append', 'stringReplace'];\n\n    config.default = config.default || 'append';\n\n    if(!config.editModes.includes(config.default)) {\n      config.default = config.editModes[0];\n    }\n\n    config.onSelect = {\n      replace: () => {\n        if(_.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues), { silent: true });\n        }\n        else {\n          setPlaceholder(field, '—');\n        }\n      },\n      append: () => {\n        setPlaceholder(field, '');\n      },\n      prepend: () => {\n        setPlaceholder(field, '');\n      },\n      stringReplace: () => {}\n    };\n\n    if(config.editModes.includes(config.default)) {\n      config.onSelect[config.default]();\n    }\n\n    if(config.editModes.includes('stringReplace')) {\n      const dirtyCheck = this.createDirtyCheck(field);\n      let configKey = `__batchConfig[\"${field.key || field.batchConfig.key}\"]`;\n      let replaceKey = `_replace_${field.key || field.batchConfig.key}`;\n      let withKey = `_with_${field.key || field.batchConfig.key}`;\n      let stringReplaceField = {\n        type: 'component',\n        items: [\n        {\n          key: replaceKey,\n          title: 'Replace',\n          watch: {\n            resolution: `model.${dirtyCheck.key} = true`\n          }\n        }, {\n          key: withKey,\n          title: 'With',\n          watch: {\n            resolution: `model.${dirtyCheck.key} = true`\n          }\n        }],\n        condition: `model.${configKey} === 'stringReplace'`\n      };\n\n      config.key = field.key;\n\n      this.addToSchema(replaceKey, { type: 'string' });\n      this.addToSchema(withKey, { type: 'string' });\n\n\n      return {\n        type: 'section',\n        condition: field.condition,\n        batchConfig: config,\n        schema: field.schema,\n        items: [_.extend(field, {condition: `model.${configKey} !== 'stringReplace'`}), stringReplaceField, dirtyCheck]\n      };\n    }\n\n    return field;\n  }\n\n  function processNumber(field) {\n    let config = field.batchConfig;\n\n    config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n    if(_.allEqual(config.ogValues)) {\n      cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues), { silent: true });\n    }\n    else {\n      field.placeholder = '—';\n    }\n    return field;\n  }\n\n  function setNestedPlaceholder(field) {\n    if(field.items) {\n      //field.items.forEach(setNestedPlaceholder);\n    }\n    else {\n      setPlaceholder(field, '—');\n    }\n  }\n\n  function processSelect(field) {\n    let type = field.schema.type;\n    let config = field.batchConfig;\n\n    if(type === 'array') {\n      config.editModes = config.editModes || ['replace', 'append'];\n\n      config.default = config.default || 'replace';\n\n      if(_.allEqual(config.ogValues)) {\n        // fucking angular infdigs\n        $timeout(() =>\n          cnFlexFormService.parseExpression(field.key, this.model).set(_.first(angular.copy(config.ogValues)), { silent: true })\n        );\n      }\n      else {\n        setNestedPlaceholder(field);\n      }\n\n      config.onSelect = {\n        replace: (prev) => {\n          if(prev && prev !== 'append') {\n            cnFlexFormService.parseExpression(field.key, this.model).set([]);\n          }\n        },\n        append: (prev) => {\n          if(prev !== 'replace') {\n            cnFlexFormService.parseExpression(field.key, this.model).set([]);\n          }\n        },\n        remove: () => {\n          let val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n          cnFlexFormService.parseExpression(field.key, this.model).set(val, { silent: true });\n        }\n      };\n    }\n    else {\n\n      let first = _.first(config.ogValues);\n      //TODO: dynamically send back data\n      if(first && _.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(first, { silent: true });\n      }\n\n      if(!field.placeholder) {\n        setPlaceholder(field, '—');\n      }\n    }\n    return field;\n  }\n\n  function processDate(field) {\n    let config = field.batchConfig;\n\n    if(_.allEqual(config.ogValues)) {\n      cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues, { silent: true }));\n    }\n    else {\n      setPlaceholder(field, '—');\n    }\n    return field;\n  }\n\n  function processToggle(field) {\n    let config = field.batchConfig;\n\n    if(_.allEqual(config.ogValues)) {\n      cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues, { silent: true }));\n    }\n    return field;\n  }\n\n  function processSchema() {\n    this.schema.schema.required = undefined;\n    _.each(this.schema.schema.properties, (val, key) => clearSchemaDefault(this, val, key));\n\n    this.schema.schema.properties.__batchConfig = {\n      type: 'object',\n      properties: {}\n    };\n\n    this.schema.schema.properties.__dirtyCheck = {\n      type: 'object',\n      properties: {}\n    };\n\n    $rootScope.$on('schemaFormBeforeAppendToArray', (e, form) => this.restoreDefaults(form));\n    $rootScope.$on('schemaFormAfterAppendToArray', (e, form) => this.resetDefaults(form));\n  }\n\n  function restoreDefaults(form) {\n    if(!form.items) return;\n    form.items.forEach(item => {\n      if(item.key) {\n        if(item.schema) {\n          let key = cnFlexFormService.getKey(item.key).replace(/\\[\\d+]/g, '[]');\n          item.schema.default = this.defaults[key];\n        }\n      }\n      this.restoreDefaults(item);\n    });\n    setNoPlaceholder(form.items);\n  }\n\n  function setNoPlaceholder(items) {\n    _.each(items, (item) => {\n      item.placeholder = item._placeholder;\n      item.noBatchPlaceholder = true;\n      if(item.items) setNoPlaceholder(item.items);\n    });\n  }\n\n  function resetDefaults(form) {\n    if(!form.items) return;\n    form.items.forEach(item => {\n      if(item.schema) {\n        item.schema.default = undefined;\n      }\n      this.resetDefaults(item);\n    });\n  }\n\n  \n  function showResults(results, config) {\n    this.results = results;\n    this.resultsConfig = config;\n\n    if(this.modal) {\n      this.modal.close();\n    }\n\n    this.modal = cnModal.open({\n      controller: 'BatchResults',\n      controllerAs: 'vm',\n      templateUrl: 'cn-batch-forms/batch-results.html',\n      resolve: {\n        parent: () => this\n      }\n    });\n  }\n\n  function closeModal() {\n    this.modal.close();\n    this.results = [];\n    this.resultsConfig = null;\n  }\n\n  function addMeta() {\n    this.schema.meta = `\n        <div class=\"well\">\n          <h5>Edit Modes</h5>\n          <p>Some types of fields allow you to apply batch changes in\n          different ways:</p>\n          <dl>\n            <dt>Replace:</dt>\n            <dd>Replace all the original values\n            with the new value. <em>(If you don't see an <b>Edit Mode</b> option\n            for a field, this will be the default)</em></dd>\n          </dl>\n          ${this.getEditModeLegends()}\n        </div>`;\n  }\n\n  function getEditModeLegends() {\n    let legends = '';\n\n    if(this.editModes.prepend) {\n      legends += `\n          <dl>\n            <dt>Prepend:</dt>\n            <dd>Add the new value to the start of the original\n            values for each item.</dd>\n          </dl>`;\n    }\n    if(this.editModes.append) {\n      legends += `\n          <dl>\n            <dt>Append:</dt>\n            <dd>Affix the new value at the end of the original\n            values for each item.</dd>\n          </dl>`;\n    }\n    if(this.editModes.decrease) {\n      legends += `\n          <dl>\n            <dt>Decrease:</dt>\n            <dd>Subtract the given value from the original\n            values for each item.</dd>\n          </dl>`;\n    }\n    if(this.editModes.increase) {\n      legends += `\n          <dl>\n            <dt>Increase:</dt>\n            <dd>Add the given value to the original\n            values for each item.</dd>\n          </dl>`;\n    }\n\n    return legends;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-batch-forms.service.js","export default function addBatchResultsTmpl($templateCache) {\n  'ngInject';\n  $templateCache.put(\n    'cn-batch-forms/batch-results.html',\n    `\n    <div class=\"cn-modal\">\n      <div class=\"modal-header clearfix\">\n        <cn-flex-form-header\n          ff-header-config=\"vm.headerConfig\"\n          ff-submit=\"vm.submit(handler)\">\n        </cn-flex-form-header>\n      </div>\n      <div class=\"modal-body cn-list card-flex\"\n           cn-responsive-height=\"80\"\n           cn-responsive-break=\"sm\"\n           cn-set-max-height>\n\n        <div class=\"padding-20\"\n             ng-if=\"vm.text\">\n          <p class=\"no-margin text-mute\"\n             ng-bind-html=\"vm.text\">\n          </p>\n        </div>\n\n        <table class=\"table gutterless\">\n          <tbody>\n          <tr ng-repeat=\"result in vm.results\">\n            <td class=\"col-sm-10\">\n              <h6 ng-show=\"result.status == 200\">\n                {{result.body[vm.displayName]}}\n                <span class=\"text-mute\">({{result.body.id}})</span>\n              </h6>\n              <h6 ng-show=\"result.status != 200\">\n                {{vm.originals[$index][vm.displayName]}}\n                <span class=\"text-mute\">({{vm.originals[$index].id}})</span>\n              </h6>\n              <p ng-class=\"{\n                   'text-danger': result.status != 200,\n                   'text-primary': result.status == 200\n                 }\">\n                <i class=\"fa fa-{{result.status == 200 ? 'check' : 'times'}}\"></i>\n                {{result.status == 200 ? 'updated successfully' : result.body.message}}\n              </p>\n            </td>\n            <td class=\"col-sm-2 text-center\">\n              <a class=\"btn btn-sm btn-transparent\"\n                 ng-show=\"vm.showEdit(result)\"\n                 ui-sref=\"{{ result.editSref }}\">\n                <i class=\"icn-edit\"></i>\n              </a>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    `\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/batch-results.tpl.js"],"sourceRoot":""}