{"version":3,"sources":["webpack:///webpack/bootstrap f438f96f05443662f42b","webpack:///./src/_.cn-batch-forms.module.js","webpack:///./src/batch-results.js","webpack:///./src/cn-batch-forms.routes.js","webpack:///./src/cn-batch-forms.service.js","webpack:///./src/batch-results.tpl.js"],"names":["angular","module","controller","provider","config","run","BatchResults","$state","parent","$stateParams","vm","results","originals","models","resultsConfig","displayName","formName","current","name","text","activate","showEdit","submit","idParam","forEach","result","index","_","isFunction","buildEditSref","editSref","body","params","assign","id","toJson","headerConfig","title","main","actionConfig","actions","handler","returnState","go","noData","inRange","status","closeModal","cnBatchFormsConfig","addDirtyCheckTpl","TYPE","TEMPLATE_URL","cnFlexFormServiceProvider","registerField","condition","field","type","templateUrl","$templateCache","put","cnBatchFormsProvider","fieldTypeHandlers","$get","cnBatchForms","fieldType","cnFlexFormConfig","cnFlexFormService","cnFlexFormTypes","sfPath","$rootScope","$timeout","cnModal","instances","augmentSchema","schema","model","length","service","BatchForms","Object","create","constructor","addMeta","addToSchema","clearSchemaDefault","createDirtyCheck","createBatchField","getChangedModels","getEditModeLegends","getFormFromRegister","getModelValues","getSchemaDefault","getTitleMap","handleLinks","onFieldScope","onReprocessField","processCondition","processDiff","processSchemaDiff","processSchema","processField","processItems","processDate","processDefault","processLinkList","processLinks","processNumber","processSelect","processToggle","registerFieldWatch","resetDefaults","restoreDefaults","setValidation","setValue","showResults","instance","defaults","editModes","fieldRegister","onProcessDiff","bind","forms","i","form","splice","$on","console","info","event","scope","key","getKey","startsWith","register","ngModel","$pristine","updateSchema","links","filter","batchConfig","ls","hardLinks","call","diff","flatten","concat","properties","props","keys","prop","has","items","every","includes","l","fields","child","htmlClass","batchField","dirtyCheck","replace","_key","_placeholder","placeholder","getSchema","required","resolve","conditionals","getFieldType","isString","isObject","ogValues","allEqual","first","parseExpression","set","clone","uniqueId","watch","item","default","push","resolution","map","value","capitalize","def","titleMap","btnClass","onSelect","val","prev","isUndefined","_minItems","minItems","options","tv4Validation","$error","k","indexOf","$setValidity","re","RegExp","test","notitle","$broadcast","fieldWatch","get","debug","isArray","e","list","hard","without","path","parse","depth","each","dirty","mode","assignable","getAssignable","fullPath","update","original","originalVal","uniqVal","uniq","trim","add","subtract","replaceString","withString","expression","escapeRegExp","setPlaceholder","noBatchPlaceholder","silent","append","prepend","stringReplace","configKey","replaceKey","withKey","stringReplaceField","extend","setNestedPlaceholder","copy","remove","chain","undefined","__batchConfig","__dirtyCheck","setNoPlaceholder","modal","close","open","controllerAs","meta","legends","decrease","increase","addBatchResultsTmpl"],"mappings":"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","file":"./dist/all.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f438f96f05443662f42b","import BatchResults from './batch-results';\nimport { cnBatchFormsConfig, addDirtyCheckTpl } from './cn-batch-forms.routes';\nimport cnBatchFormsProvider from './cn-batch-forms.service';\nimport addBatchResultsTpl from './batch-results.tpl';\n\nangular\n  .module('cn.batch-forms', [\n    'schemaForm',\n    'cn.flex-form',\n    'cn.util',\n    'ui.router'\n  ])\n  .controller('BatchResults', BatchResults)\n  .provider('cnBatchForms', cnBatchFormsProvider)\n  .config(cnBatchFormsConfig)\n  .run(addDirtyCheckTpl)\n  .run(addBatchResultsTpl);\n\n\n\n// WEBPACK FOOTER //\n// ./src/_.cn-batch-forms.module.js","export default function BatchResults($state, parent, $stateParams) {\n  'ngInject';\n\n  var vm = this;\n  vm.parent = parent;\n  vm.results = vm.parent.results;\n  vm.originals = vm.parent.models;\n  vm.config = vm.parent.resultsConfig;\n  vm.displayName = vm.config && vm.config.displayName || 'name';\n  vm.formName = $state.current.name;\n  vm.text = vm.config.text;\n\n  vm.activate = activate;\n  vm.showEdit = showEdit;\n  vm.submit = submit;\n\n  vm.activate();\n\n  //////////\n\n  function activate() {\n    if (vm.config.idParam) {\n      vm.results.forEach((result, index) => {\n        if (_.isFunction(vm.config.buildEditSref)) {\n          result.editSref = vm.config.buildEditSref(result.body, index);\n        }\n        else {\n          const params = _.assign({}, $stateParams, {[vm.config.idParam]: vm.originals[index].id});\n          result.editSref = `${$state.current.name}(${angular.toJson(params)})`;\n        }\n      });\n    }\n\n    vm.headerConfig = {\n      title: {\n        main: 'Batch Results'\n      },\n      actionConfig: {\n        actions: [{\n          text: 'Continue Editing'\n        }, {\n          text: 'Done',\n          handler: () => {\n            if(vm.config && vm.config.returnState) {\n              $state.go(vm.config.returnState.name, vm.config.returnState.params);\n            }\n          }\n        }]\n      },\n      noData: true\n    };\n\n  }\n\n  function showEdit(result) {\n    return result.editSref && _.inRange(result.status, 200, 299);\n  }\n\n  function submit(handler) {\n    vm.parent.closeModal();\n    if(handler) {\n      handler();\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/batch-results.js","const TYPE = 'cn-dirty-check';\nconst TEMPLATE_URL = 'cn-batch-forms/cn-dirty-check.html';\n\nexport function cnBatchFormsConfig(cnFlexFormServiceProvider) {\n  'ngInject';\n  cnFlexFormServiceProvider.registerField({\n    condition: (field) => field.type === TYPE,\n    handler: (field) => {/*console.log('field.readonly:', field.key, field.readonly)*/},\n    type: TYPE,\n    templateUrl: TEMPLATE_URL\n  });\n}\n\nexport function addDirtyCheckTpl($templateCache) {\n  'ngInject';\n  $templateCache.put(\n      TEMPLATE_URL,\n      '\\\n      <div class=\"checkbox cn-dirty-check {{form.htmlClass}}\">\\\n        <input type=\"checkbox\"\\\n               ng-model=\"$$value$$\"\\\n               ng-model-options=\"form.ngModelOptions\"\\\n               sf-changed=\"form\"\\\n               ng-disabled=\"form.readonly\"\\\n               name=\"{{form.key.slice(-1)[0]}}\"/>\\\n      </div>'\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-batch-forms.routes.js","let fieldTypeHandlers = {\n  'string': 'processDefault',\n  'number': 'processNumber',\n  'url': 'processDefault',\n  'array': 'processSelect',\n  'cn-autocomplete': 'processSelect',\n  'cn-currency': 'processNumber',\n  'cn-datetimepicker': 'processDate',\n  'cn-toggle': 'processToggle'\n};\n\nexport default function cnBatchFormsProvider() {\n  return {\n    registerField,\n    $get: cnBatchForms\n  };\n\n  ///////////\n\n  function registerField(fieldType) {\n    if(fieldType.handler) {\n      fieldTypeHandlers[fieldType.type] = fieldType.handler;\n    }\n  }\n}\n\nfunction cnBatchForms(\n    cnFlexFormConfig,\n    cnFlexFormService,\n    cnFlexFormTypes,\n    sfPath,\n    $rootScope,\n    $timeout,\n    cnModal) {\n\n  'ngInject';\n\n  let instances = 0;\n\n  return {\n    augmentSchema\n  };\n\n  //////////\n\n  function augmentSchema(schema, model, models) {\n    if(!models.length) return schema;\n\n    var service = BatchForms(schema, model, models);\n\n    return service;\n  }\n\n  function BatchForms(schema, model, models) {\n    return Object.create({\n      constructor,\n      addMeta,\n      addToSchema,\n      clearSchemaDefault,\n      closeModal,\n      createDirtyCheck,\n      createBatchField,\n      getChangedModels,\n      getEditModeLegends,\n      getFormFromRegister,\n      getModelValues,\n      getSchemaDefault,\n      getTitleMap,\n      handleLinks,\n      onFieldScope,\n      onReprocessField,\n      processCondition,\n      processDiff,\n      processSchemaDiff,\n      processSchema,\n      processField,\n      processItems,\n      processDate,\n      processDefault,\n      processLinkList,\n      processLinks,\n      processNumber,\n      processSelect,\n      processToggle,\n      registerFieldWatch,\n      resetDefaults,\n      restoreDefaults,\n      setValidation,\n      setValue,\n      showResults\n    }).constructor(schema, model, models);\n  }\n\n  function constructor(schema, model, models) {\n\n    this.instance = instances;\n    //cnFlexFormModalLoaderService.resolveMapping('results', this.instance, this);\n    instances++;\n\n    this.schema = schema;\n    this.model = model;\n    this.models = models;\n    this.defaults = {};\n    this.editModes = {};\n    this.fieldRegister = {};\n\n    this.processSchema();\n    cnFlexFormConfig.onProcessDiff = this.processDiff.bind(this);\n\n    if(schema.forms) {\n      let i = schema.forms.length - 1;\n      while(i > -1) {\n        this.processItems(schema.forms[i].form);\n        if(!schema.forms[i].form.length) {\n          schema.forms.splice(i, 1);\n        }\n        --i;\n      }\n    }\n    else {\n      this.processItems(schema.form);\n    }\n\n    this.addMeta();\n    this.processLinks();\n\n    $rootScope.$on('schemaFormPropagateScope', this.onFieldScope.bind(this));\n    $rootScope.$on('cnFlexFormReprocessField', this.onReprocessField.bind(this));\n\n    console.info('BatchDone:', schema, model, models);\n\n    return this;\n  }\n\n  function onFieldScope(event, scope) {\n    let key = cnFlexFormService.getKey(scope.form.key);\n\n    if(!key.startsWith('__')) {\n      if(!this.fieldRegister[key]) this.fieldRegister[key] = {};\n      const register = this.fieldRegister[key];\n      register.ngModel = scope.ngModel;\n      register.scope = scope;\n\n      if(!this.fieldRegister[key].field) this.fieldRegister[key].field = scope.form;\n    }\n\n    // prevent edit mode radiobuttons from setting form to dirty\n    else if(scope.form.key[0] === '__batchConfig') {\n      scope.ngModel.$pristine = false;\n    }\n  }\n\n  function processDiff(schema) {\n    const updateSchema = schema.params.updateSchema;\n    const links = _.filter(schema.batchConfig.links, ls => _.startsWith(ls, updateSchema));\n    const hardLinks = _.filter(schema.batchConfig.hardLinks, ls => _.startsWith(ls, updateSchema));\n    processSchemaDiff.call(this, schema.diff.schema, _.flatten(links.concat(hardLinks)));\n  }\n\n  function processSchemaDiff(properties, links) {\n    const props = _.keys(properties);\n    _.forEach(props, (prop) => {\n      if (_.has(properties[prop], \"properties\")) {\n        processSchemaDiff.call(this, properties[prop].properties, links);\n      } else if (_.has(properties[prop], \"items\")) {\n        processSchemaDiff.call(this, properties[prop].items, links);\n      } else if (_.every(links, l => !_.includes(l, prop))) {\n        clearSchemaDefault.call(this, properties[prop]);\n      }\n    });\n  }\n\n  function processItems(fields) {\n    let i = fields.length - 1;\n    while(i > -1) {\n      const child = this.processField(fields[i]);\n      if(child && child.batchConfig) {\n        if(child.type !== 'fieldset') {\n          child.htmlClass = (child.htmlClass || '') + ' cn-batch-field clearfix';\n        }\n        let batchField = this.createBatchField(child);\n        let dirtyCheck = child.key && this.createDirtyCheck(child);\n        // add mode buttons after field\n        fields[i] = {\n          type: 'section',\n          htmlClass: 'cn-batch-wrapper',\n          items: dirtyCheck ? [child, dirtyCheck, batchField] : [child, batchField],\n          condition: this.processCondition(child.condition)\n        };\n        delete child.condition;\n        if(child.key) {\n          if(!this.fieldRegister[child.key]) this.fieldRegister[child.key] = {};\n          this.fieldRegister[child.key].field = child;\n          this.fieldRegister[child.key].dirtyCheck = dirtyCheck;\n        }\n      }\n      if(!child) {\n        // remove field if batch isn't supported by it or children\n        fields.splice(i, 1);\n      }\n      --i;\n    }\n  }\n\n  function processCondition(condition) {\n    return condition && condition.replace(/\\b(model)\\.(\\S*)\\b/g, '($1.$2 === undefined ? $1.__ogValues[\"$2\"] : $1.$2)');\n  }\n\n  function processField(field) {\n    if(field.key) {\n      if(!field.batchConfig) return false;\n\n      field._key = field.key;\n      field._placeholder = field.placeholder;\n      field.schema = field.schema || cnFlexFormService.getSchema(field.key, this.schema.schema.properties);\n      field.type = field.type || field.schema.type;\n\n      delete field.required;\n      if(field.resolve) delete field.resolve.required;\n      if(field.conditionals) delete field.conditionals.required;\n\n      let fieldType = cnFlexFormTypes.getFieldType(field);\n      let handler = fieldTypeHandlers[fieldType];\n\n      if(handler) {\n        if(_.isString(handler)) handler = this[handler];\n        if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n        field.batchConfig.ogValues = this.getModelValues(field);\n\n        if(_.allEqual(field.batchConfig.ogValues)) {\n          let key = `__ogValues[\"${field.key}\"]`;\n          let first = _.first(field.batchConfig.ogValues);\n          cnFlexFormService.parseExpression(key, this.model).set(first);\n        }\n\n        return handler.bind(this)(field);\n      }\n      else return false;\n    }\n\n    if(field.items) {\n      if(field.batchConfig) {\n        field.items.forEach(child => {\n          child.batchConfig = _.clone(field.batchConfig);\n        });\n      }\n      this.processItems(field.items);\n      if(!field.items.length) return false;\n\n      if(field.batchConfig) {\n        if(!_.isObject(field.batchConfig)) field.batchConfig = {};\n        field.batchConfig.key = `component_${_.uniqueId()}`;\n        field.batchConfig.watch = [];\n\n        field.items.forEach((item, i) => {\n          let child = item.items[0];\n          if(!i) {\n            field.batchConfig.editModes = child.batchConfig.editModes;\n            field.batchConfig.default = child.batchConfig.default;\n          }\n          field.batchConfig.watch.push({\n            resolution: `model.__batchConfig[\"${child.key}\"] = model.__batchConfig[\"${field.batchConfig.key}\"]`\n          });\n          //item.items[2].condition = 'false';\n          item.items[2].htmlClass = 'hide';\n        });\n      }\n    }\n    return field;\n  }\n\n  function getTitleMap(editModes) {\n    editModes = editModes || ['replace'];\n\n    return editModes.map(value => {\n      this.editModes[value] = true;\n      return {\n        name: _.capitalize(value),\n        value\n      };\n    });\n  }\n\n  function getSchemaDefault(def) {\n    return def || 'replace';\n  }\n\n  function createBatchField(field) {\n    let batchConfig = field.batchConfig;\n    let key = `__batchConfig[\"${field.key || batchConfig.key}\"]`;\n\n    let batchField = {\n      key,\n      type: 'radiobuttons',\n      titleMap: this.getTitleMap(batchConfig.editModes),\n      htmlClass: 'cn-batch-options',\n      btnClass: 'btn-sm cn-no-dirty-check',\n      watch: batchConfig.watch || []\n    };\n\n    if(batchField.titleMap.length === 1) {\n      //batchField.condition = 'false';\n      batchField.htmlClass = 'hide';\n    }\n\n    this.addToSchema(key, {\n      type: 'string',\n      title: 'Edit Mode',\n      default: this.getSchemaDefault(batchConfig.default)\n    });\n\n    if(batchConfig.onSelect) {\n      batchField.watch.push({\n        resolution: (val, prev) => {\n          if(!val) return;\n          batchConfig.onSelect[val](prev);\n        }\n      });\n    }\n\n    return batchField;\n  }\n\n  function setValidation(field, val) {\n    let key = cnFlexFormService.getKey(field.key);\n\n    if(field.schema && field.schema.type === 'array') {\n      if(_.isUndefined(field.schema._minItems)) field.schema._minItems = field.schema.minItems;\n      field.schema.minItems = val ? field.schema._minItems : 0;\n    }\n\n    let forms = key ? this.getFormFromRegister(key) : [];\n\n    forms.forEach(form => {\n      if(form.scope) {\n        form.scope.options = form.scope.options || {};\n        form.scope.options.tv4Validation = val;\n        Object.keys(form.ngModel.$error)\n            .filter(function(k) {\n              return k.indexOf('tv4-') === 0;\n            })\n            .forEach(function(k) {\n              form.ngModel.$setValidity(k, true);\n            });\n      }\n    });\n    if(field.items) {\n      field.items.forEach(i => this.setValidation(i, val));\n    }\n  }\n\n  function getFormFromRegister(key) {\n    if(key.includes('[]')) {\n      let re = new RegExp(key.replace('[]', '\\\\[\\\\d*\\\\]'));\n      return _.filter(this.fieldRegister, (form, k) => {\n        return re.test(k);\n      });\n    }\n    else if(this.fieldRegister[key]) {\n      return [this.fieldRegister[key]];\n    } else return [];\n  }\n\n  function createDirtyCheck(field) {\n    //let path = sfPath.parse(field.key);\n    let key = `__dirtyCheck[\"${field.key || field.batchConfig.key}\"]`;\n    //let child = path.length > 1;\n    let htmlClass = '';\n\n    //if(child) htmlClass += ' semi-transparent';\n    if(field.notitle || !field.schema.title) htmlClass += ' notitle';\n\n    let dirtyCheck = {\n      key,\n      htmlClass,\n      type: 'cn-dirty-check',\n      watch: [{\n        resolution: (val) => {\n          //$timeout(() => {\n            this.setValidation(field, val);\n            $rootScope.$broadcast('schemaFormValidate');\n          //});\n        }\n      }]\n    };\n\n    this.addToSchema(key, {\n      type: 'boolean',\n      notitle: true\n    });\n\n    dirtyCheck.fieldWatch = {\n      resolution: (val) => {\n          const register = this.fieldRegister[field._key];\n          if(register) {\n            if(_.get(register, 'ngModel.$dirty')) {\n              cnFlexFormService.parseExpression(key, this.model).set(true);\n            }\n          }\n          // debug\n          else {\n            console.debug('no register:', field, this.fieldRegister);\n          }\n      }\n    };\n\n    this.registerFieldWatch(field, dirtyCheck.fieldWatch);\n\n    return dirtyCheck;\n  }\n\n  function registerFieldWatch(field, watch) {\n    if(field.watch) {\n      if(!_.isArray(field.watch)) field.watch = [field.watch];\n    }\n    else {\n      field.watch = [];\n    }\n\n    field.watch.push(watch);\n  }\n\n  function onReprocessField(e, key) {\n    let register = this.fieldRegister[key];\n    if(!register) return console.debug('no register:', key, this.fieldRegister);\n    if(register.dirtyCheck) this.registerFieldWatch(register.field, register.dirtyCheck.fieldWatch);\n  }\n\n  function handleLinks(list, hard) {\n    return val => {\n      list.forEach(key => {\n        if(!hard) {\n          const register = this.fieldRegister[key];\n          if(!_.get(register, 'ngModel.$dirty')) return;\n        }\n        cnFlexFormService.parseExpression(`__dirtyCheck[\"${key}\"]`, this.model).set(val);\n      });\n    };\n  }\n\n  function processLinkList(list, hard) {\n    list.forEach(keys => {\n      keys.forEach(key => {\n        let register = this.fieldRegister[key];\n        if(!register) {\n          console.debug('no register:', key);\n          return;\n        }\n        let {field, dirtyCheck} = register;\n        let handler = this.handleLinks(_.without(keys, key), hard);\n        field.watch = field.watch || [];\n        dirtyCheck.watch = dirtyCheck.watch || [];\n        field.watch.push({resolution() {handler(true);}});\n        dirtyCheck.watch.push({resolution: handler});\n      });\n    });\n  }\n\n  function processLinks() {\n    if(this.schema.batchConfig) {\n      if(this.schema.batchConfig.links) {\n        this.processLinkList(this.schema.batchConfig.links);\n      }\n      if(this.schema.batchConfig.hardLinks) {\n        this.processLinkList(this.schema.batchConfig.hardLinks, true);\n      }\n    }\n  }\n\n  function addToSchema(key, schema) {\n    let path = sfPath.parse(key);\n    let depth = this.schema.schema;\n\n    path.forEach((k, i) => {\n      if(i === path.length - 1) {\n        if(!depth.properties) {\n          depth.properties = {};\n        }\n        depth.properties[k] = schema;\n      }\n      else if(k === '') {\n        if(!depth.items) {\n          depth.items = {\n            type: 'object'\n          };\n        }\n        depth = depth.items;\n      }\n      else {\n        if(!depth.properties) {\n          depth.properties = {};\n        }\n        if(!depth.properties[k]) {\n          depth.properties[k] = {\n            type: 'object'\n          };\n        }\n        depth = depth.properties[k];\n      }\n    });\n  }\n\n  function getModelValues(field) {\n    return this.models.map(model => {\n      return cnFlexFormService.parseExpression(field.key, model).get();\n    });\n  }\n\n  function getChangedModels() {\n    let models = [];\n\n    _.each(this.fieldRegister, (register, key) => {\n      let dirty = cnFlexFormService\n          .parseExpression(`__dirtyCheck[\"${key}\"]`, this.model)\n          .get();\n\n      if(!dirty) return;\n\n      let mode = cnFlexFormService\n          .parseExpression(`__batchConfig[\"${key}\"]`, this.model)\n          .get();\n\n      this.models.forEach((model, i) => {\n        models[i] = models[i] || {};\n\n        let path = sfPath.parse(key);\n        // if column is json, we want to merge updates into model's current json value\n        // so we copy the current value if we haven't already (on a previous iteration)\n        if(path.length > 1 && !models[i][path[0]]) {\n          models[i][path[0]] = this.models[i][path[0]];\n        }\n\n        let assignable = cnFlexFormService\n            .parseExpression(key, this.models[i])\n            .getAssignable();\n\n        // if column is json and model's current value doesn't have parent property for\n        // key we're updating, just copy over entire key instead of using specific\n        // edit mode logic for new value\n        if(assignable.fullPath !== key) {\n          let val = cnFlexFormService\n              .parseExpression(assignable.fullPath, this.model)\n              .get();\n\n          cnFlexFormService\n              .parseExpression(assignable.fullPath, this.models[i])\n              .set(val);\n        }\n        else {\n          let val = cnFlexFormService.parseExpression(key, this.model).get();\n          let update = cnFlexFormService.parseExpression(key, models[i]);\n          let original = cnFlexFormService.parseExpression(key, this.models[i]);\n\n          this.setValue(val, update, original, mode);\n        }\n      });\n    });\n\n    return models;\n  }\n\n  function setValue(val, update, original, mode) {\n    if(mode === 'replace') {\n      update.set(val);\n    }\n    else if(mode === 'append') {\n      let originalVal = original.get();\n      if(_.isArray(originalVal)) {\n        const uniqVal = _([])\n          .concat(originalVal, val)\n          .uniq((value) => value.key || angular.toJson(value))\n          .value();\n\n        update.set(uniqVal);\n      }\n      else if(_.isString(originalVal)) {\n        update.set(`${originalVal} ${val.trim()}`);\n      }\n      else {\n        update.set(val);\n      }\n    }\n    else if(mode === 'prepend') {\n      let originalVal = original.get();\n      if(_.isArray(originalVal)) {\n        update.set(val.concat(originalVal));\n      }\n      else if(_.isString(originalVal)) {\n        update.set(`${val.trim()} ${originalVal}`);\n      }\n      else {\n        update.set(val);\n      }\n    }\n    else if(mode === 'increase') {\n      update.set(_.add(original.get() || 0, val));\n    }\n    else if(mode === 'decrease') {\n      update.set(_.subtract(original.get() || 0, val));\n    }\n    else if(mode === 'stringReplace' && original.get()) {\n      let key = original.path().key;\n      let replaceString = cnFlexFormService.parseExpression(`_replace_${key}`, this.model);\n      let withString = cnFlexFormService.parseExpression(`_with_${key}`, this.model);\n      let expression = new RegExp(_.escapeRegExp(replaceString.get()), \"gi\");\n      update.set(original.get().replace(expression, withString.get()));\n    }\n    /* This needs work, _.find(val, item) might not work because the\n       the items we're comparing might have the same id but one might\n       have different properties\n    else if(mode === 'remove') {\n      original.get().forEach(item => {\n        if(!_.find(val, item)) {\n          update = _.reject(update, item);\n        }\n      });\n    }\n    */\n  }\n\n  function setPlaceholder(field, val) {\n    if(field.noBatchPlaceholder) return;\n    field.placeholder = val;\n  }\n\n  function processDefault(field) {\n    let config = field.batchConfig;\n\n    config.editModes = config.editModes || ['replace', 'prepend', 'append', 'stringReplace'];\n\n    config.default = config.default || 'append';\n\n    if(!config.editModes.includes(config.default)) {\n      config.default = config.editModes[0];\n    }\n\n    config.onSelect = {\n      replace: () => {\n        if(_.allEqual(config.ogValues)) {\n          cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues), { silent: true });\n        }\n        else {\n          setPlaceholder(field, '—');\n        }\n      },\n      append: () => {\n        setPlaceholder(field, '');\n      },\n      prepend: () => {\n        setPlaceholder(field, '');\n      },\n      stringReplace: () => {}\n    };\n\n    if(config.editModes.includes(config.default)) {\n      config.onSelect[config.default]();\n    }\n\n    if(config.editModes.includes('stringReplace')) {\n      const dirtyCheck = this.createDirtyCheck(field);\n      let configKey = `__batchConfig[\"${field.key || field.batchConfig.key}\"]`;\n      let replaceKey = `_replace_${field.key || field.batchConfig.key}`;\n      let withKey = `_with_${field.key || field.batchConfig.key}`;\n      let stringReplaceField = {\n        type: 'component',\n        items: [\n        {\n          key: replaceKey,\n          title: 'Replace',\n          watch: {\n            resolution: `model.${dirtyCheck.key} = true`\n          }\n        }, {\n          key: withKey,\n          title: 'With',\n          watch: {\n            resolution: `model.${dirtyCheck.key} = true`\n          }\n        }],\n        condition: `model.${configKey} === 'stringReplace'`\n      };\n\n      config.key = field.key;\n\n      this.addToSchema(replaceKey, { type: 'string' });\n      this.addToSchema(withKey, { type: 'string' });\n\n\n      return {\n        type: 'section',\n        condition: field.condition,\n        batchConfig: config,\n        schema: field.schema,\n        items: [_.extend(field, {condition: `model.${configKey} !== 'stringReplace'`}), stringReplaceField, dirtyCheck]\n      };\n    }\n\n    return field;\n  }\n\n  function processNumber(field) {\n    let config = field.batchConfig;\n\n    config.editModes = config.editModes || ['replace', 'decrease', 'increase'];\n\n    if(_.allEqual(config.ogValues)) {\n      cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues), { silent: true });\n    }\n    else {\n      field.placeholder = '—';\n    }\n    return field;\n  }\n\n  function setNestedPlaceholder(field) {\n    if(field.items) {\n      //field.items.forEach(setNestedPlaceholder);\n    }\n    else {\n      setPlaceholder(field, '—');\n    }\n  }\n\n  function processSelect(field) {\n    let type = field.schema.type;\n    let config = field.batchConfig;\n\n    if(type === 'array') {\n      config.editModes = config.editModes || ['replace', 'append'];\n\n      config.default = config.default || 'replace';\n\n      if(_.allEqual(config.ogValues)) {\n        // fucking angular infdigs\n        $timeout(() =>\n          cnFlexFormService.parseExpression(field.key, this.model).set(_.first(angular.copy(config.ogValues)), { silent: true })\n        );\n      }\n      else {\n        setNestedPlaceholder(field);\n      }\n\n      config.onSelect = {\n        replace: (prev) => {\n          if(prev && prev !== 'append') {\n            cnFlexFormService.parseExpression(field.key, this.model).set([]);\n          }\n        },\n        append: (prev) => {\n          if(prev !== 'replace') {\n            cnFlexFormService.parseExpression(field.key, this.model).set([]);\n          }\n        },\n        remove: () => {\n          let val = _.chain(field.batchConfig.ogValues).flatten().uniq().value();\n          cnFlexFormService.parseExpression(field.key, this.model).set(val, { silent: true });\n        }\n      };\n    }\n    else {\n\n      let first = _.first(config.ogValues);\n      //TODO: dynamically send back data\n      if(first && _.allEqual(config.ogValues)) {\n        cnFlexFormService.parseExpression(field.key, this.model).set(first, { silent: true });\n      }\n\n      if(!field.placeholder) {\n        setPlaceholder(field, '—');\n      }\n    }\n    return field;\n  }\n\n  function processDate(field) {\n    let config = field.batchConfig;\n\n    if(_.allEqual(config.ogValues)) {\n      cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues, { silent: true }));\n    }\n    else {\n      setPlaceholder(field, '—');\n    }\n    return field;\n  }\n\n  function processToggle(field) {\n    let config = field.batchConfig;\n\n    if(_.allEqual(config.ogValues)) {\n      cnFlexFormService.parseExpression(field.key, this.model).set(_.first(config.ogValues, { silent: true }));\n    }\n    return field;\n  }\n\n  function processSchema() {\n    this.schema.schema.required = undefined;\n    _.each(this.schema.schema.properties, this.clearSchemaDefault.bind(this));\n\n    this.schema.schema.properties.__batchConfig = {\n      type: 'object',\n      properties: {}\n    };\n\n    this.schema.schema.properties.__dirtyCheck = {\n      type: 'object',\n      properties: {}\n    };\n\n    $rootScope.$on('schemaFormBeforeAppendToArray', (e, form) => this.restoreDefaults(form));\n    $rootScope.$on('schemaFormAfterAppendToArray', (e, form) => this.resetDefaults(form));\n  }\n\n  function restoreDefaults(form) {\n    if(!form.items) return;\n    form.items.forEach(item => {\n      if(item.key) {\n        if(item.schema) {\n          let key = cnFlexFormService.getKey(item.key).replace(/\\[\\d+]/g, '[]');\n          item.schema.default = this.defaults[key];\n        }\n      }\n      this.restoreDefaults(item);\n    });\n    setNoPlaceholder(form.items);\n  }\n\n  function setNoPlaceholder(items) {\n    _.each(items, (item) => {\n      item.placeholder = item._placeholder;\n      item.noBatchPlaceholder = true;\n      if(item.items) setNoPlaceholder(item.items);\n    });\n  }\n\n  function resetDefaults(form) {\n    if(!form.items) return;\n    form.items.forEach(item => {\n      if(item.schema) {\n        item.schema.default = undefined;\n      }\n      this.resetDefaults(item);\n    });\n  }\n\n  function clearSchemaDefault(schema, key) {\n    // save for hydrating newly added array items\n    this.defaults[key] = schema.default;\n\n    // then remove because we don't want to override saved values with defaults\n    schema.default = undefined;\n\n    if(schema.type === 'object' && schema.properties) {\n      schema.required = undefined;\n      // _.each(schema.properties, this.clearSchemaDefault.bind(this));\n      for(let k in schema.properties) {\n        this.clearSchemaDefault(schema.properties[k], `${key}.${k}`);\n      }\n    }\n    else if(schema.type === 'array' && schema.items) {\n      this.clearSchemaDefault(schema.items, `${key}[]`);\n    }\n  }\n  \n  function showResults(results, config) {\n    this.results = results;\n    this.resultsConfig = config;\n\n    if(this.modal) {\n      this.modal.close();\n    }\n\n    this.modal = cnModal.open({\n      controller: 'BatchResults',\n      controllerAs: 'vm',\n      templateUrl: 'cn-batch-forms/batch-results.html',\n      resolve: {\n        parent: () => this\n      }\n    });\n  }\n\n  function closeModal() {\n    this.modal.close();\n    this.results = [];\n    this.resultsConfig = null;\n  }\n\n  function addMeta() {\n    this.schema.meta = `\n        <div class=\"well\">\n          <h5>Edit Modes</h5>\n          <p>Some types of fields allow you to apply batch changes in\n          different ways:</p>\n          <dl>\n            <dt>Replace:</dt>\n            <dd>Replace all the original values\n            with the new value. <em>(If you don't see an <b>Edit Mode</b> option\n            for a field, this will be the default)</em></dd>\n          </dl>\n          ${this.getEditModeLegends()}\n        </div>`;\n  }\n\n  function getEditModeLegends() {\n    let legends = '';\n\n    if(this.editModes.prepend) {\n      legends += `\n          <dl>\n            <dt>Prepend:</dt>\n            <dd>Add the new value to the start of the original\n            values for each item.</dd>\n          </dl>`;\n    }\n    if(this.editModes.append) {\n      legends += `\n          <dl>\n            <dt>Append:</dt>\n            <dd>Affix the new value at the end of the original\n            values for each item.</dd>\n          </dl>`;\n    }\n    if(this.editModes.decrease) {\n      legends += `\n          <dl>\n            <dt>Decrease:</dt>\n            <dd>Subtract the given value from the original\n            values for each item.</dd>\n          </dl>`;\n    }\n    if(this.editModes.increase) {\n      legends += `\n          <dl>\n            <dt>Increase:</dt>\n            <dd>Add the given value to the original\n            values for each item.</dd>\n          </dl>`;\n    }\n\n    return legends;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/cn-batch-forms.service.js","export default function addBatchResultsTmpl($templateCache) {\n  'ngInject';\n  $templateCache.put(\n    'cn-batch-forms/batch-results.html',\n    `\n    <div class=\"cn-modal\">\n      <div class=\"modal-header clearfix\">\n        <cn-flex-form-header\n          ff-header-config=\"vm.headerConfig\"\n          ff-submit=\"vm.submit(handler)\">\n        </cn-flex-form-header>\n      </div>\n      <div class=\"modal-body cn-list card-flex\"\n           cn-responsive-height=\"80\"\n           cn-responsive-break=\"sm\"\n           cn-set-max-height>\n\n        <div class=\"padding-20\"\n             ng-if=\"vm.text\">\n          <p class=\"no-margin text-mute\"\n             ng-bind-html=\"vm.text\">\n          </p>\n        </div>\n\n        <table class=\"table gutterless\">\n          <tbody>\n          <tr ng-repeat=\"result in vm.results\">\n            <td class=\"col-sm-10\">\n              <h6 ng-show=\"result.status == 200\">\n                {{result.body[vm.displayName]}}\n                <span class=\"text-mute\">({{result.body.id}})</span>\n              </h6>\n              <h6 ng-show=\"result.status != 200\">\n                {{vm.originals[$index][vm.displayName]}}\n                <span class=\"text-mute\">({{vm.originals[$index].id}})</span>\n              </h6>\n              <p ng-class=\"{\n                   'text-danger': result.status != 200,\n                   'text-primary': result.status == 200\n                 }\">\n                <i class=\"fa fa-{{result.status == 200 ? 'check' : 'times'}}\"></i>\n                {{result.status == 200 ? 'updated successfully' : result.body.message}}\n              </p>\n            </td>\n            <td class=\"col-sm-2 text-center\">\n              <a class=\"btn btn-sm btn-transparent\"\n                 ng-show=\"vm.showEdit(result)\"\n                 ui-sref=\"{{ result.editSref }}\">\n                <i class=\"icn-edit\"></i>\n              </a>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    `\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/batch-results.tpl.js"],"sourceRoot":""}